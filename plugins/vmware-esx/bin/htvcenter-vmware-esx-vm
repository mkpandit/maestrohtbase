#!/bin/bash
# this script automatically manages vmware-esx
#
# htvcenter Enterprise developed by htvcenter Enterprise GmbH.
#
# All source code and content (c) Copyright 2014, htvcenter Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the htvcenter Enterprise Server and Client License, unless otherwise agreed with htvcenter Enterprise GmbH.
# The latest version of this license can be found here: http://htvcenter-enterprise.com/license
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://htvcenter-enterprise.com
#
# Copyright 2014, htvcenter Enterprise GmbH <info@htvcenter-enterprise.com>
#
htvcenter_SERVER_BASE_DIR=$(dirname $0)/../../../..
htvcenter_SERVER_BASE_DIR=$(pushd $htvcenter_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-functions
# unblock starting command queue early for non-blocking + ui commands
VMWARE_ESX_COMMAND=$1
if [ "$VMWARE_ESX_COMMAND" == "update" ] || [ "$VMWARE_ESX_COMMAND" == "clone" ] || [ "$VMWARE_ESX_COMMAND" == "post_vm_list" ] || [ "$VMWARE_ESX_COMMAND" == "post_vm_config" ] || [ "$VMWARE_ESX_COMMAND" == "list" ] || [ "$VMWARE_ESX_COMMAND" == "post_iso_list" ] || [ "$VMWARE_ESX_COMMAND" == "post_host_statistics" ]; then
	htvcenter_unblock_starting_queue $@
	NON_BLOCKING=true
fi




export htvcenter_SOURCE_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/"
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-package-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/include/htvcenter-plugin-vmware-esx-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/etc/htvcenter-plugin-vmware-esx.conf
. $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-server-functions
htvcenter_server_get_config
export resource_htvcenterserver=$htvcenter_SERVER_IP_ADDRESS
htvcenter_VMWARE_ESX_VM_TEMPLATE="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/etc/templates/htvcenter-vmware-esx-vm.xml"
htvcenter_VMWARE_ESX_ADD_NETWORK_DEVICE_TEMPLATE="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/etc/templates/htvcenter-vmware-esx-add-network-device.xml"
htvcenter_VMWARE_ESX_REMOVE_NETWORK_DEVICE_TEMPLATE="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/etc/templates/htvcenter-vmware-esx-remove-network-device.xml"
htvcenter_VMWARE_ESX_ADD_CDROM_DEVICE_TEMPLATE="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/etc/templates/htvcenter-vmware-esx-add-cdrom.xml"
htvcenter_VMWARE_ESX_VM_CONF_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/conf/vm"
htvcenter_VMWARE_ESX_HOST_CONF_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/conf/host"
htvcenter_VMWARE_ESX_STAT_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/"
export LANG=C
ORG_IFS="$IFS"
# some defaults
DEFAULT_VMWARE_ESX_VM_CPU=1
DEFAULT_VMWARE_ESX_VM_RAM=512
DEFAULT_VMWARE_ESX_VM_DISK=4194304
DEFAULT_VMWARE_ESX_MINI_VM_DISK=1024

# http://communities.vmware.com/thread/240659?tstart=0
export PERL_LWP_SSL_VERIFY_HOSTNAME=0

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

# make sure required deps are installed
if ! check_vmware_esx_deps; then
	if [ "$NON_BLOCKING" != "true" ]; then
		htvcenter_unblock_starting_queue $@
	fi
	exit 1
fi

# conf dirs existing ?
if [ ! -d "$htvcenter_VMWARE_ESX_VM_CONF_DIR" ]; then
	mkdir -p $htvcenter_VMWARE_ESX_VM_CONF_DIR
fi
if [ ! -d "$htvcenter_VMWARE_ESX_HOST_CONF_DIR" ]; then
	mkdir -p $htvcenter_VMWARE_ESX_HOST_CONF_DIR
fi
if [ ! -d "$htvcenter_VMWARE_ESX_STAT_DIR" ]; then
	mkdir -p $htvcenter_VMWARE_ESX_STAT_DIR
	chmod 777 $htvcenter_VMWARE_ESX_STAT_DIR
fi


function vmware_esx_usage() {
	echo "Usage : $0 configure <-i esx-server-ip> <-eu esx-server-username> <-ep esx-server-password> <-eh esx-server-hostname> <-ed esx-server-domainname>"
	echo "        $0 start/stop/reboot/remove/list <-i esx-server-ip> <-n vm-name>"
	echo "        $0 create/update <-i esx-server-ip> <-n vm-name> <-m mac-address> <-l datastore> <-vmtype vmware-esx-vm-local/vmware-esx-vm-net> [ -r memory ] [-d disk-size ] [-c cpus ] [-va vnc-password ] [-vp vnc-port ] [-b local/network/cdrom/iso ] [--iso [datastore]iso ] [--existing-vmdk [datastore]vmdk]"
	echo "        $0 post_host_statistics <-i esx-server-ip>"
	echo "        $0 post_vm_list <-i esx-server-ip>"
	echo "        $0 post_vm_config <-i esx-server-ip> <-n vm-name>"
	echo "        $0 setboot_by_mac <-m mac-address> <-b local/network/cdrom/iso> <-i esx-server-ip>"
	echo "        $0 setboot <-n vm-name> <-b local/network/cdrom/iso> <-i esx-server-ip>"
	echo "        $0 add_vm_nic <-i esx-server-ip> <-n vm-name> <-m mac-address> <-x component-number> <-t nic-type> <-v vm-network>"
	echo "        $0 remove_vm_nic <-i esx-server-ip> <-n vm-name> <-x component-number>"
	echo "        $0 fence <-m mac-address> <-i esx-server-ip>"
	echo "        $0 host_shutdown/host_reboot <-i esx-server-ip>"
	echo "        $0 post_iso_list <-i esx-server-ip>"
	echo "        $0 enable_vnc <-i esx-server-ip>"
	echo "        $0 assign_by_mac <-i esx-server-ip> <-m mac-address> <-l datastore> <-d vmdk>"
	echo "        $0 deassign_by_mac <-i esx-server-ip> <-m mac-address> <-d vmdk>"
	echo "        $0 stop_by_mac <-i esx-server-ip> <-m mac-address>"
	echo "        $0 reboot_by_mac <-i esx-server-ip> <-m mac-address>"
	echo ""
	echo "Optional parameters:"
	echo "             [--htvcenter-ui-user <username>]"
	echo "             [--htvcenter-internal-cmd <true/false>]"
	echo "             [--htvcenter-cmd-mode <regular/background/fork>]"
	exit 1
}


# function to translate a VM mac address into its resource id
function get_vm_resource_id() {
	local VM_MAC=$1
	local VM_PXE=`echo 01-$VM_MAC | sed -e "s/:/-/g" | tr '[:upper:]'  '[:lower:]'`
	if [ -f "$htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/$VM_PXE" ]; then
		cat $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/$VM_PXE | grep ^append | grep initrd | sed -e "s/.*id=//g" | awk {' print $1 '}
	else
		return
	fi
}

# function to translate a mac address into a VM name
function get_vm_name_by_mac() {
	local vmnicmac=$1
	$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmlist.pl --hostname $VI_SERVER_HOSTNAME | grep -i $vmnicmac | cut -d'@' -f1
}



# function to remove a VMs nic
function vm_remove_nic() {
	local vmname=$1
	local nicnumber=$2
	cat $htvcenter_VMWARE_ESX_REMOVE_NETWORK_DEVICE_TEMPLATE |	\
		sed -e "s/@@htvcenter_VMWARE_ESX_VM_NAME@@/$vmname/g" |	\
		sed -e "s/@@htvcenter_VMWARE_ESX_HOST@@/$VI_SERVER_HOSTNAME/g" |	\
		sed -e "s/@@VMWARE_ESX_VM_COMPONENT_NUMBER@@/$nicnumber/g"	\
		> $htvcenter_VMWARE_ESX_VM_CONF_DIR/$vmname.remove-network-$nicnumber.xml
	# make sure vmreconfig.pl is patched to work on ESX
	if [ ! -f "$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl.htvcenter-backup" ]; then
		cp -f $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl.htvcenter-backup
	fi
	sed -i -e "s/\$reconfig_hash{Host},/undef,/g" $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl
	# add via API call
	if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl --filename $htvcenter_VMWARE_ESX_VM_CONF_DIR/$vmname.remove-network-$nicnumber.xml --schema $htvcenter_VMWARE_ESX_SDK_DIR/apps/schema/vmreconfig.xsd; then
		htvcenter_post_event 0 "vm_remove_nic" 3 "htvcenter-vmware-esx" "Failed to remove the $nicnumber network card from ESX VM $vmname!"
		return 1
	fi
	return 0
}

# function to add a VMs nic
function vm_add_nic() {
	local vmname=$1
	local nicnumber=$2
	local vmnicmac=$3
	local vmnictype=$4
	local vmnicbridge=$5
	vmnicbridge=`echo $vmnicbridge | sed -e "s/@/ /g"`

	cat $htvcenter_VMWARE_ESX_ADD_NETWORK_DEVICE_TEMPLATE |	\
		sed -e "s/@@htvcenter_VMWARE_ESX_VM_NAME@@/$vmname/g" |	\
		sed -e "s/@@htvcenter_VMWARE_ESX_HOST@@/$VI_SERVER_HOSTNAME/g" |	\
		sed -e "s/@@htvcenter_VMWARE_ESX_EXTERNAL_BRIDGE@@/$vmnicbridge/g"	\
		> $htvcenter_VMWARE_ESX_VM_CONF_DIR/$vmname.add-network-$nicnumber.xml
	# make sure vmreconfig.pl is patched to work on ESX
	if [ ! -f "$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl.htvcenter-backup" ]; then
		cp -f $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl.htvcenter-backup
	fi
	sed -i -e "s/\$reconfig_hash{Host},/undef,/g" $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl
	# add via API call
	if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl --filename $htvcenter_VMWARE_ESX_VM_CONF_DIR/$vmname.add-network-$nicnumber.xml --schema $htvcenter_VMWARE_ESX_SDK_DIR/apps/schema/vmreconfig.xsd; then
		htvcenter_post_event 0 "vm_add_nic" 3 "htvcenter-vmware-esx" "Failed to add the $nicnumber network card to ESX VM $vmname!"
		return 1
	fi
	# adapt the VMs mac address of the nic
	if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmNICManagement.pl --vmname $vmname --mac $vmnicmac  --operation updatemac --vnic $nicnumber; then
		htvcenter_post_event 0 "vm_add_nic" 3 "htvcenter-vmware-esx" "Failed to change mac address of ESX VM $vmname $nicnumber nic!"
		return 1
	fi
	# adapt the VMs nic type of the nic
	if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmNICManagement.pl --vmname $vmname --nictype $vmnictype --operation updatenictype --vnic $nicnumber; then
		htvcenter_post_event 0 "vm_add_nic" 3 "htvcenter-vmware-esx" "Failed to change nic type of ESX VM $vmname to $VM_NIC_TYPE!"
		return 1
	fi
	return 0
}


# function to update a VMs nic
function vm_update_nic() {
	local vmname=$1
	local nicnumber=$2
	local vmnicmac=$3
	local vmnictype=$4
	local vmnicbridge=$5
	if ! vm_remove_nic $vmname $nicnumber; then
		htvcenter_post_event 0 "vm_update_nic" 3 "htvcenter-vmware-esx" "Failed to remove the $nicnumber network card from ESX VM $vmname!"
		return 1
	fi
	if ! vm_add_nic $vmname $nicnumber $vmnicmac $vmnictype $vmnicbridge; then
		htvcenter_post_event 0 "vm_update_nic" 3 "htvcenter-vmware-esx" "Failed to add the $nicnumber network card to ESX VM $vmname!"
		return 1
	fi
	return 0
}


# function to update a VMs boot sequence
function vm_setboot() {
	local vmname=$1
	local vmboot=$2
	case "$vmboot" in
		local)
			VMWARE_ESX_VM_BOOT_PARAMETER="allow:hd"
			;;
		net)
			VMWARE_ESX_VM_BOOT_PARAMETER="allow:net"
			;;
		network)
			VMWARE_ESX_VM_BOOT_PARAMETER="allow:net"
			;;
		cdrom)
			VMWARE_ESX_VM_BOOT_PARAMETER="allow:cd"
			;;
		iso)
			VMWARE_ESX_VM_BOOT_PARAMETER="allow:cd"
			;;
	esac
	if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmsetboot.pl --vmname $vmname --bootorder $VMWARE_ESX_VM_BOOT_PARAMETER; then
		htvcenter_post_event 0 "vm_setboot" 3 "htvcenter-vmware-esx" "Failed to setboot to $vmboot for ESX VM $vmname!"
		return 1
	fi
	return 0
}



FULL_COMMANDLINE="$0 $@"
VMWARE_ESX_COMMAND=$1
shift
while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			VMWARE_ESX_VM_NAME=$2
			shift
			;;
		-c)
			VMWARE_ESX_VM_CPU=$2
			shift
			;;
		-m)
			VMWARE_ESX_VM_MAC=$2
			shift
			;;
		-m1)
			VMWARE_ESX_VM_MAC2=$2
			shift
			;;
		-m2)
			VMWARE_ESX_VM_MAC3=$2
			shift
			;;
		-m3)
			VMWARE_ESX_VM_MAC4=$2
			shift
			;;
		-m4)
			VMWARE_ESX_VM_MAC5=$2
			shift
			;;
		-t)
			VMWARE_ESX_VM_NIC_TYPE1=$2
			shift
			;;
		-t1)
			VMWARE_ESX_VM_NIC_TYPE2=$2
			shift
			;;
		-t2)
			VMWARE_ESX_VM_NIC_TYPE3=$2
			shift
			;;
		-t3)
			VMWARE_ESX_VM_NIC_TYPE4=$2
			shift
			;;
		-t4)
			VMWARE_ESX_VM_NIC_TYPE5=$2
			shift
			;;
		-v)
			VMWARE_ESX_VM_NIC_VSWITCH1=$2
			shift
			;;
		-v1)
			VMWARE_ESX_VM_NIC_VSWITCH2=$2
			shift
			;;
		-v2)
			VMWARE_ESX_VM_NIC_VSWITCH3=$2
			shift
			;;
		-v3)
			VMWARE_ESX_VM_NIC_VSWITCH4=$2
			shift
			;;
		-v4)
			VMWARE_ESX_VM_NIC_VSWITCH5=$2
			shift
			;;
		-r)
			VMWARE_ESX_VM_RAM=$2
			shift
			;;
		-d)
			VMWARE_ESX_VM_DISK=$2
			shift
			;;
		-i)
			VMWARE_ESX_HOST_IP=$2
			shift
			;;
		-b)
			VMWARE_ESX_VM_BOOT=$2
			shift
			;;
		-va)
			VMWARE_ESX_VM_VNC_AUTH=$2
			shift
			;;
		-vp)
			VMWARE_ESX_VM_VNC_PORT=$2
			shift
			;;
		-u)
			htvcenter_USERNAME=$2
			shift
			;;
		-p)
			htvcenter_PASSWORD=$2
			shift
			;;
		-eu)
			VMWARE_ESX_USERNAME=$2
			shift
			;;
		-ep)
			VMWARE_ESX_PASSWORD=$2
			shift
			;;
		-eh)
			VMWARE_ESX_HOSTNAME=$2
			shift
			;;
		-ed)
			VMWARE_ESX_DOMAINNAME=$2
			shift
			;;
		-l)
			VMWARE_ESX_VM_DATASTORE=$2
			shift
			;;
		-x)
			VMWARE_ESX_VM_COMPONENT_NUMBER=$2
			shift
			;;
		-vmtype)
			VMWARE_ESX_VM_TYPE=$2
			shift
			;;
		-iso)
			VMWARE_ESX_VM_ISO=$2
			shift
			;;
		--existing-vmdk)
			VMWARE_ESX_VM_EXISTING_VMDK=$2
			shift
			;;
		--guest-id)
			VMWARE_ESX_GUEST_ID=$2
			shift
			;;

		--htvcenter-ui-user)
			htvcenter_UI_USER=$2
			shift
			;;
		--htvcenter-internal-cmd)
			htvcenter_INTERNAL_CMD=$2
			shift
			;;
		--htvcenter-cmd-mode)
			htvcenter_CMD_MODE=$2
			shift
			;;

		*)
			if [ "$NON_BLOCKING" != "true" ]; then
				htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			fi
			echo "ERROR: Free commandline arguments are not allowed"
			vmware_esx_usage
			exit 6
			;;
	esac
	shift
done


# command set ?
if [ "$VMWARE_ESX_COMMAND" == "" ]; then
	htvcenter_post_event 0 "parameter_check" 3 "htvcenter-vmware-esx" "Wrong usage, no command given!"
	htvcenter_unblock_starting_queue $FULL_COMMANDLINE
	vmware_esx_usage
fi
# ESX ip set ?
if [ "$VMWARE_ESX_HOST_IP" == "" ]; then
	htvcenter_post_event 0 "parameter_check" 3 "htvcenter-vmware-esx" "Wrong usage, no VMware ESX ip-adress given!"
	if [ "$NON_BLOCKING" != "true" ]; then
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE
	fi
	vmware_esx_usage
fi
# VM name set ?
if [ "$VMWARE_ESX_COMMAND" != "list" ] && [ "$VMWARE_ESX_COMMAND" != "setboot_by_mac" ] && [ "$VMWARE_ESX_COMMAND" != "post_vm_list" ]  && [ "$VMWARE_ESX_COMMAND" != "fence" ]  && [ "$VMWARE_ESX_COMMAND" != "configure" ] && [ "$VMWARE_ESX_COMMAND" != "post_host_statistics" ] && [ "$VMWARE_ESX_COMMAND" != "host_shutdown" ] && [ "$VMWARE_ESX_COMMAND" != "host_reboot" ]  && [ "$VMWARE_ESX_COMMAND" != "post_iso_list" ]  && [ "$VMWARE_ESX_COMMAND" != "post_vm_components" ]  && [ "$VMWARE_ESX_COMMAND" != "enable_vnc" ] && [ "$VMWARE_ESX_COMMAND" != "deassign_by_mac" ] && [ "$VMWARE_ESX_COMMAND" != "assign_by_mac" ] && [ "$VMWARE_ESX_COMMAND" != "stop_by_mac" ] && [ "$VMWARE_ESX_COMMAND" != "reboot_by_mac" ]; then
	if [ "$VMWARE_ESX_VM_NAME" == "" ]; then
		htvcenter_post_event 0 "parameter_check" 3 "htvcenter-vmware-esx" "Wrong usage, VM name missing!"
		if [ "$NON_BLOCKING" != "true" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
		fi
		vmware_esx_usage
	fi
fi
# host configured ?
if [ "$VMWARE_ESX_COMMAND" != "configure" ]; then
	if [ ! -f "$htvcenter_VMWARE_ESX_HOST_CONF_DIR/$VMWARE_ESX_HOST_IP.conf" ]; then
		htvcenter_post_event 0 "parameter_check" 3 "htvcenter-vmware-esx" "VMware ESX Host configuration missing! Please create the configuration first."
		if [ "$NON_BLOCKING" != "true" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
		fi
		vmware_esx_usage
	else
		# source the host configuration
		. $htvcenter_VMWARE_ESX_HOST_CONF_DIR/$VMWARE_ESX_HOST_IP.conf
	fi
fi
if [ "$htvcenter_UI_USER" != "" ]; then
	htvcenter_UI_USER_PARAMETER=" --htvcenter-ui-user $htvcenter_UI_USER"
fi


# main
case "$VMWARE_ESX_COMMAND" in 

	configure)
		if [ "$VMWARE_ESX_USERNAME" == "" ] || [ "$VMWARE_ESX_PASSWORD" == "" ] || [ "$VMWARE_ESX_HOSTNAME" == "" ] || [ "$VMWARE_ESX_DOMAINNAME" == "" ]; then
			htvcenter_post_event 0 "configure" 3 "htvcenter-vmware-esx" "Wrong usage, VMware ESX Host username missing!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		# test if the connection credentials work
		export VI_USERNAME=$VMWARE_ESX_USERNAME
		export VI_PASSWORD=$VMWARE_ESX_PASSWORD
		export VI_SERVER=$VMWARE_ESX_HOST_IP
		export VI_SERVER_HOSTNAME=$VMWARE_ESX_HOSTNAME.$VMWARE_ESX_DOMAINNAME
		VMWARERETURN=$($htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmlist.pl --hostname $VI_SERVER_HOSTNAME 2>&1 >/dev/null)
		if [ -n "$VMWARERETURN" ] ; then
			# notify htvcenter
			echo $VMWARERETURN > $htvcenter_VMWARE_ESX_STAT_DIR/$VMWARE_ESX_HOST_IP.integrated_successful.tmp
			chmod 777 $htvcenter_VMWARE_ESX_STAT_DIR/$VMWARE_ESX_HOST_IP.integrated_successful.tmp
			mv $htvcenter_VMWARE_ESX_STAT_DIR/$VMWARE_ESX_HOST_IP.integrated_successful.tmp $htvcenter_VMWARE_ESX_STAT_DIR/$VMWARE_ESX_HOST_IP.integrated_successful

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT
			exit 1
		fi
		echo "export VI_USERNAME=$VMWARE_ESX_USERNAME" > $htvcenter_VMWARE_ESX_HOST_CONF_DIR/$VMWARE_ESX_HOST_IP.conf
		VMWARE_ESX_PASSWORD_MODIFIED=\"$VMWARE_ESX_PASSWORD\" 
		#echo "export VI_PASSWORD=$VMWARE_ESX_PASSWORD" >> $htvcenter_VMWARE_ESX_HOST_CONF_DIR/$VMWARE_ESX_HOST_IP.conf
		echo "export VI_PASSWORD=$VMWARE_ESX_PASSWORD_MODIFIED" >> $htvcenter_VMWARE_ESX_HOST_CONF_DIR/$VMWARE_ESX_HOST_IP.conf		
		echo "export VI_SERVER=$VMWARE_ESX_HOST_IP" >> $htvcenter_VMWARE_ESX_HOST_CONF_DIR/$VMWARE_ESX_HOST_IP.conf
		echo "export VI_SERVER_HOSTNAME=$VMWARE_ESX_HOSTNAME.$VMWARE_ESX_DOMAINNAME" >> $htvcenter_VMWARE_ESX_HOST_CONF_DIR/$VMWARE_ESX_HOST_IP.conf
		# notify htvcenter
		echo "success" > $htvcenter_VMWARE_ESX_STAT_DIR/$VMWARE_ESX_HOST_IP.integrated_successful.tmp
		chmod 777 $htvcenter_VMWARE_ESX_STAT_DIR/$VMWARE_ESX_HOST_IP.integrated_successful.tmp
		mv $htvcenter_VMWARE_ESX_STAT_DIR/$VMWARE_ESX_HOST_IP.integrated_successful.tmp $htvcenter_VMWARE_ESX_STAT_DIR/$VMWARE_ESX_HOST_IP.integrated_successful

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;


	create)
		# check requirements
		if [ "$VMWARE_ESX_VM_MAC" == "" ]; then
			htvcenter_post_event 0 "parameter_check" 3 "htvcenter-vmware-esx" "Wrong usage, VM mac address missing!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi
		if [ "$VMWARE_ESX_VM_VNC_PORT" == "" ]; then
			htvcenter_post_event 0 "parameter_check" 3 "htvcenter-vmware-esx" "Wrong usage, VM vnc port is missing!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi
		if [ "$VMWARE_ESX_VM_TYPE" == "" ]; then
			htvcenter_post_event 0 "parameter_check" 3 "htvcenter-vmware-esx" "Wrong usage, VM type is missing!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		# set some defaults
		if [ "$VMWARE_ESX_VM_DATASTORE" == "" ]; then
			VMWARE_ESX_VM_DATASTORE=$htvcenter_VMWARE_ESX_CLOUD_DATASTORE
		fi
		VMWARE_ESX_VM_DATASTORE=`echo $VMWARE_ESX_VM_DATASTORE | sed -e "s/@/ /g"`

		if [ "$VMWARE_ESX_VM_CPU" == "" ]; then
			VMWARE_ESX_VM_CPU=$DEFAULT_VMWARE_ESX_VM_CPU
		fi
		if [ "$VMWARE_ESX_VM_DISK" == "" ]; then
			VMWARE_ESX_VM_DISK=$DEFAULT_VMWARE_ESX_VM_DISK
		fi
		if [ "$VMWARE_ESX_VM_EXISTING_VMDK" != "" ]; then
			VMWARE_ESX_VM_DISK=$DEFAULT_VMWARE_ESX_MINI_VM_DISK
		fi
		if [ "$VMWARE_ESX_VM_RAM" == "" ]; then
			VMWARE_ESX_VM_RAM=$DEFAULT_VMWARE_ESX_VM_RAM
		fi
		if [ "$VMWARE_ESX_VM_NIC_TYPE1" == "" ]; then
			VMWARE_ESX_VM_NIC_TYPE1=$htvcenter_VMWARE_ESX_CLOUD_DEFAULT_VM_TYPE
		fi
		if [ "$VMWARE_ESX_VM_NIC_VSWITCH1" == "" ]; then
			VMWARE_ESX_VM_NIC_VSWITCH1=$htvcenter_VMWARE_ESX_INTERNAL_BRIDGE
		fi
		if [ "$VMWARE_ESX_GUEST_ID" == "" ]; then
			VMWARE_ESX_GUEST_ID=$htvcenter_VMWARE_ESX_GUEST_ID
		fi
		# remove space separators from vswitch parameter
		VMWARE_ESX_VM_NIC_VSWITCH1=`echo $VMWARE_ESX_VM_NIC_VSWITCH1 | sed -e "s/@/ /g"`
		VMWARE_ESX_VM_NIC_VSWITCH2=`echo $VMWARE_ESX_VM_NIC_VSWITCH2 | sed -e "s/@/ /g"`
		VMWARE_ESX_VM_NIC_VSWITCH3=`echo $VMWARE_ESX_VM_NIC_VSWITCH3 | sed -e "s/@/ /g"`
		VMWARE_ESX_VM_NIC_VSWITCH4=`echo $VMWARE_ESX_VM_NIC_VSWITCH4 | sed -e "s/@/ /g"`
		VMWARE_ESX_VM_NIC_VSWITCH5=`echo $VMWARE_ESX_VM_NIC_VSWITCH5 | sed -e "s/@/ /g"`

		if [ "$VMWARE_ESX_VM_BOOT" == "" ]; then
			VMWARE_ESX_VM_BOOT="network"
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		htvcenter_post_event 0 "create" 5 "htvcenter-vmware-esx" "Creating VMware VM $VMWARE_ESX_VM_NAME."
		# creating the xml
		cat $htvcenter_VMWARE_ESX_VM_TEMPLATE |	\
			sed -e "s/@@htvcenter_VMWARE_ESX_VM_NAME@@/$VMWARE_ESX_VM_NAME/g" |	\
			sed -e "s/@@htvcenter_VMWARE_ESX_HOST@@/$VI_SERVER_HOSTNAME/g" |	\
			sed -e "s/@@htvcenter_VMWARE_ESX_GUEST_ID@@/$VMWARE_ESX_GUEST_ID/g" |	\
			sed -e "s/@@htvcenter_VMWARE_ESX_DATACENTER_NAME@@/$htvcenter_VMWARE_ESX_DATACENTER_NAME/g" | \
			sed -e "s/@@htvcenter_VMWARE_ESX_DATASTORE@@/$VMWARE_ESX_VM_DATASTORE/g" | \
			sed -e "s/@@htvcenter_VMWARE_ESX_VM_DISK_SIZE@@/$VMWARE_ESX_VM_DISK/g" | \
			sed -e "s/@@htvcenter_VMWARE_ESX_VM_MEMORY_SIZE@@/$VMWARE_ESX_VM_RAM/g" | \
			sed -e "s/@@htvcenter_VMWARE_ESX_VM_CPUS@@/$VMWARE_ESX_VM_CPU/g" | \
			sed -e "s/@@htvcenter_VMWARE_ESX_INTERNAL_BRIDGE@@/$VMWARE_ESX_VM_NIC_VSWITCH1/g"	\
			> $htvcenter_VMWARE_ESX_VM_CONF_DIR/$VMWARE_ESX_VM_NAME.xml

		# make sure to create new VMs with the better supported LSI SCSI controller
		if grep VirtualBusLogicController $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl 1>/dev/null; then
			if [ ! -f $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl.org ]; then
				cp -f $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl.org
			fi
			sed -i -e "s/VirtualBusLogicController/VirtualLsiLogicController/g" $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl
		fi
		# make vmcreate useable for ESX instead of vCenter
		sed -i -e "s/filter => {'name' => \$args{vmhost}});//g" $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl
		sed -i -e "s/HostSystem',/HostSystem');/g" $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl
		# create an additional vmcreate-without-disk.pl by adapting one function
		if [ ! -x $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate-without-disk.pl ]; then
			cat $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl | sed -e "s/my \$disksize = \$args{disksize};/my \$disksize = \$args{disksize}; return 0;/g" | sed -e "s/push(@vm_devices, \$disk_vm_dev_conf_spec);//g" > $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate-without-disk.pl
			chmod +x $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate-without-disk.pl
		fi

		# using an existing vmdk -> creating a vm with an empty disk and attach the vmdk later
		CREATE_VM_TOOL="$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate.pl"
		if [ "$VMWARE_ESX_VM_EXISTING_VMDK" != "" ]; then
			CREATE_VM_TOOL="$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcreate-without-disk.pl"
		fi
		# use API to create the VM
		#if ! $CREATE_VM_TOOL --filename $htvcenter_VMWARE_ESX_VM_CONF_DIR/$VMWARE_ESX_VM_NAME.xml --schema $htvcenter_VMWARE_ESX_SDK_DIR/apps/schema/vmcreate.xsd; then
		CREATERETURN=$($CREATE_VM_TOOL --filename $htvcenter_VMWARE_ESX_VM_CONF_DIR/$VMWARE_ESX_VM_NAME.xml --schema $htvcenter_VMWARE_ESX_SDK_DIR/apps/schema/vmcreate.xsd 2>&1)
		CREATEERROR=$(echo $CREATERETURN | grep "Error")
		if [ -n "$CREATEERROR" ]; then
			CREATEERROR=$(htvcenter_format_error_msg $CREATEERROR)
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to create ESX VM $VMWARE_ESX_VM_NAME!<br>$CREATEERROR"
			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT
			exit 1
		fi
		# check the VM was created correctly
		CHECK_VM_CREATED=false
		for VM in `$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vminfo.pl | grep ^Name: | awk '{ print $2 }'`; do
			if [ "$VM" == "$VMWARE_ESX_VM_NAME" ]; then
				CHECK_VM_CREATED=true
			fi
		done
		if [ "$CHECK_VM_CREATED" == "false" ]; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "(check) Failed to create ESX VM $VMWARE_ESX_VM_NAME!"
			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT
			exit 1
		fi

		# if existing vmdk is set then attach it, the cloud sends none so the image/vmdk will be attached during assign
		if [ "$VMWARE_ESX_VM_EXISTING_VMDK" != "" ] && [ "$VMWARE_ESX_VM_EXISTING_VMDK" != "none" ]; then
			# attach existing vmdk
			EXISTING_VMDK_DATASTORE=`echo $VMWARE_ESX_VM_EXISTING_VMDK | cut -d ':' -f1`
			EXISTING_VMDK_NAME=`echo $VMWARE_ESX_VM_EXISTING_VMDK | cut -d ':' -f2`
			EXISTING_VMDK_NAME=`basename $EXISTING_VMDK_NAME`

			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdkManagement.pl --vmname $VMWARE_ESX_VM_NAME --vmdkname $EXISTING_VMDK_NAME --datastore $EXISTING_VMDK_DATASTORE --operation add; then
				htvcenter_post_event 0 "assign_by_mac" 3 "htvcenter-vmware-esx" "Failed to attach VMDK $EXISTING_VMDK_DATASTORE:$EXISTING_VMDK_NAME to ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		# add a virtual cdrom
		# Patch VMUtil.pm to allow adding a virtual cdrom / SDK Version 5.1
		# Issue documented at http://communities.vmware.com/message/1872721
		if [ ! -f "$htvcenter_VMWARE_ESX_SDK_DIR/apps/AppUtil/VMUtil.pm.htvcenter-backup-patch-to-allow-adding-a-virtual-cdrom" ]; then
			cp -f $htvcenter_VMWARE_ESX_SDK_DIR/apps/AppUtil/VMUtil.pm $htvcenter_VMWARE_ESX_SDK_DIR/apps/AppUtil/VMUtil.pm.htvcenter-backup-patch-to-allow-adding-a-virtual-cdrom
		fi
		sed -i -e "929s@my \$unitNumber.*@my \$unitNumber = (defined \$controller->device) ? \$#{\$controller->device} + 1 : 0;@" $htvcenter_VMWARE_ESX_SDK_DIR/apps/AppUtil/VMUtil.pm
		# make sure vmreconfig.pl is patched to work on ESX
		if [ ! -f "$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl.htvcenter-backup" ]; then
			cp -f $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl.htvcenter-backup
		fi
		sed -i -e "s/\$reconfig_hash{Host},/undef,/g" $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl

		cat $htvcenter_VMWARE_ESX_ADD_CDROM_DEVICE_TEMPLATE |	\
			sed -e "s/@@htvcenter_VMWARE_ESX_VM_NAME@@/$VMWARE_ESX_VM_NAME/g" |	\
			sed -e "s/@@htvcenter_VMWARE_ESX_HOST@@/$VI_SERVER_HOSTNAME/g" \
			> $htvcenter_VMWARE_ESX_VM_CONF_DIR/$VMWARE_ESX_VM_NAME.add-cdom.xml
		# add via API call
		if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmreconfig.pl --filename $htvcenter_VMWARE_ESX_VM_CONF_DIR/$VMWARE_ESX_VM_NAME.add-cdom.xml --schema $htvcenter_VMWARE_ESX_SDK_DIR/apps/schema/vmreconfig.xsd; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to add a VirtualCDROM Device to ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# add iso as cdrom
		if [ "$VMWARE_ESX_VM_ISO" != "" ]; then
			VM_ISO_DATASTORE=`echo $VMWARE_ESX_VM_ISO | cut -d'[' -f2 | cut -d']' -f1`
			VM_ISO_IMAGE_FILE=`echo $VMWARE_ESX_VM_ISO | cut -d']' -f2`
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmISOManagement.pl --vmname $VMWARE_ESX_VM_NAME --operation mount --datastore $VM_ISO_DATASTORE --filename $VM_ISO_IMAGE_FILE; then
				htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to add ISO $VM_ISO_DATASTORE / $VM_ISO_IMAGE_FILE to ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi
		# adapt the VMs mac address of the first nic
		htvcenter_post_event 0 "create" 5 "htvcenter-vmware-esx" "Adapting VMware VM $VMWARE_ESX_VM_NAME first network cards mac address to $VMWARE_ESX_VM_MAC."
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmNICManagement.pl --vmname $VMWARE_ESX_VM_NAME --mac $VMWARE_ESX_VM_MAC --operation updatemac --vnic 1; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to change mac address of ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# adapt the VMs nic type of the first nic
		htvcenter_post_event 0 "create" 5 "htvcenter-vmware-esx" "Adapting VMware VM $VMWARE_ESX_VM_NAME first network cards nic type to $VMWARE_ESX_VM_MAC to $VMWARE_ESX_VM_NIC_TYPE1."
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmNICManagement.pl --vmname $VMWARE_ESX_VM_NAME --nictype $VMWARE_ESX_VM_NIC_TYPE1 --operation updatenictype --vnic 1; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to change nic type of ESX VM $VMWARE_ESX_VM_NAME to $VMWARE_ESX_VM_NIC_TYPE1!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi



		#######################################################################################################

		# addtional nics -> nic2
		if [ "$VMWARE_ESX_VM_MAC2" != "" ]; then
			NETWORK_CARD_SEQ="$NETWORK_CARD_SEQ 2"
			if [ "$VMWARE_ESX_VM_NIC_TYPE2" == "" ]; then
				VMWARE_ESX_VM_NIC_TYPE2=$htvcenter_VMWARE_ESX_CLOUD_DEFAULT_VM_TYPE
			fi
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH2" == "" ]; then
				VMWARE_ESX_VM_NIC_VSWITCH2=$htvcenter_VMWARE_ESX_EXTERNAL_BRIDGE_2
			else
				VMWARE_ESX_VM_NIC_VSWITCH2=`echo $VMWARE_ESX_VM_NIC_VSWITCH2 | sed -e "s/@/ /g"`
			fi
		fi
		# addtional nics -> nic3
		if [ "$VMWARE_ESX_VM_MAC3" != "" ]; then
			NETWORK_CARD_SEQ="$NETWORK_CARD_SEQ 3"
			if [ "$VMWARE_ESX_VM_NIC_TYPE3" == "" ]; then
				VMWARE_ESX_VM_NIC_TYPE3=$htvcenter_VMWARE_ESX_CLOUD_DEFAULT_VM_TYPE
			fi
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH3" == "" ]; then
				VMWARE_ESX_VM_NIC_VSWITCH3=$htvcenter_VMWARE_ESX_EXTERNAL_BRIDGE_3
			else
				VMWARE_ESX_VM_NIC_VSWITCH3=`echo $VMWARE_ESX_VM_NIC_VSWITCH3 | sed -e "s/@/ /g"`
			fi
		fi
		# addtional nics -> nic4
		if [ "$VMWARE_ESX_VM_MAC4" != "" ]; then
			NETWORK_CARD_SEQ="$NETWORK_CARD_SEQ 4"
			if [ "$VMWARE_ESX_VM_NIC_TYPE4" == "" ]; then
				VMWARE_ESX_VM_NIC_TYPE4=$htvcenter_VMWARE_ESX_CLOUD_DEFAULT_VM_TYPE
			fi
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH4" == "" ]; then
				VMWARE_ESX_VM_NIC_VSWITCH4=$htvcenter_VMWARE_ESX_EXTERNAL_BRIDGE_4
			else
				VMWARE_ESX_VM_NIC_VSWITCH4=`echo $VMWARE_ESX_VM_NIC_VSWITCH4 | sed -e "s/@/ /g"`
			fi
		fi
		# addtional nics -> nic5
		if [ "$VMWARE_ESX_VM_MAC5" != "" ]; then
			NETWORK_CARD_SEQ="$NETWORK_CARD_SEQ 5"
			if [ "$VMWARE_ESX_VM_NIC_TYPE5" == "" ]; then
				VMWARE_ESX_VM_NIC_TYPE5=$htvcenter_VMWARE_ESX_CLOUD_DEFAULT_VM_TYPE
			fi
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH5" == "" ]; then
				VMWARE_ESX_VM_NIC_VSWITCH5=$htvcenter_VMWARE_ESX_EXTERNAL_BRIDGE_5
			else
				VMWARE_ESX_VM_NIC_VSWITCH5=`echo $VMWARE_ESX_VM_NIC_VSWITCH5 | sed -e "s/@/ /g"`
			fi
		fi
		for SEQ in $NETWORK_CARD_SEQ; do
			htvcenter_post_event 0 "create" 5 "htvcenter-vmware-esx" "Creating nic $SEQ."
			# creating the xml
			eval "VM_BRIDGE=\$VMWARE_ESX_VM_NIC_VSWITCH$SEQ"
			VM_BRIDGE=`echo $VM_BRIDGE | sed -e "s/ /@/g"`
			eval "VM_MAC=\$VMWARE_ESX_VM_MAC$SEQ"
			eval "VM_NIC_TYPE=\$VMWARE_ESX_VM_NIC_TYPE$SEQ"
			if ! vm_add_nic $VMWARE_ESX_VM_NAME $SEQ $VM_MAC $VM_NIC_TYPE $VM_BRIDGE; then
				htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to create the $SEQ. network card of ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		done

		# setting the bootorder
		htvcenter_post_event 0 "create" 5 "Setting the boot sequence for VMware VM $VMWARE_ESX_VM_NAME to $VMWARE_ESX_VM_BOOT boot."
		if ! vm_setboot $VMWARE_ESX_VM_NAME $VMWARE_ESX_VM_BOOT; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to setboot to $VMWARE_ESX_VM_BOOT for ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi

		# allow nested
		if [ "$htvcenter_VMWARE_ESX_ALLOW_NESTED" == "true" ]; then
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/addVMAdvParamOption.pl --key vhv.enable --value TRUE --vmname $VMWARE_ESX_VM_NAME; then
				htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to set vhv.enable for ESX VM $VMWARE_ESX_VM_NAME!"
			fi
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/addVMAdvParamOption.pl --key vmx.allowNested --value TRUE --vmname $VMWARE_ESX_VM_NAME; then
				htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to set vmx.allowNested for ESX VM $VMWARE_ESX_VM_NAME!"
			fi
		fi

		# starting the VM to set the VNC access
		htvcenter_post_event 0 "create" 5 "Preparing VNC access for VM $VMWARE_ESX_VM_NAME."
		if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWERON; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to start ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# set vnc access
		htvcenter_post_event 0 "create" 5 "Setting VNC access to VM $VMWARE_ESX_VM_NAME."
		if [ "$VMWARE_ESX_VM_VNC_AUTH" == "" ]; then
			VMWARE_ESX_VM_VNC_AUTH=`</dev/urandom tr -dc A-Za-z0-9 | head -c8`
		fi
		VMWARE_ESX_VM_VNC_PORT=$(( $VMWARE_ESX_VM_VNC_PORT + 5900 ))
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/addVMAdvParamOption.pl --key RemoteDisplay.vnc.enabled --value TRUE --vmname $VMWARE_ESX_VM_NAME; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to enable VNC access to ESX VM $VMWARE_ESX_VM_NAME!"
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/addVMAdvParamOption.pl --key RemoteDisplay.vnc.port --value $VMWARE_ESX_VM_VNC_PORT --vmname $VMWARE_ESX_VM_NAME; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to set the VNC Port for ESX VM $VMWARE_ESX_VM_NAME!"
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/addVMAdvParamOption.pl --key RemoteDisplay.vnc.password --value $VMWARE_ESX_VM_VNC_AUTH --vmname $VMWARE_ESX_VM_NAME; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to set the VNC Password for ESX VM $VMWARE_ESX_VM_NAME!"
		fi
		# store the vnc infos for the cloud
		if [ -d "$htvcenter_SERVER_BASE_DIR/htvcenter/web/action/cloud-conf/" ]; then
			echo "$VMWARE_ESX_HOST_IP:$VMWARE_ESX_VM_VNC_PORT" > $htvcenter_SERVER_BASE_DIR/htvcenter/web/action/cloud-conf/$VMWARE_ESX_VM_MAC.vnc
			chmod 777 $htvcenter_SERVER_BASE_DIR/htvcenter/web/action/cloud-conf/$VMWARE_ESX_VM_MAC.vnc
		fi

		# for esx-localboot we stop the VM here, the monitoring will set it to idle
		htvcenter_post_event 0 "create" 5 "Finalizing VNC access for VM $VMWARE_ESX_VM_NAME."
		if [ "$VMWARE_ESX_VM_TYPE" == "vmware-esx-vm-local" ]; then
			if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWEROFF; then
				htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to stop ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT

		# post_vm_list again
		$0 post_vm_list -i $VMWARE_ESX_HOST_IP --htvcenter-internal-cmd true
		;;

	update)
		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		if [ "$VMWARE_ESX_VM_VNC_PORT" == "" ]; then
			htvcenter_post_event 0 "parameter_check" 3 "htvcenter-vmware-esx" "Wrong usage, VM vnc port is missing!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		htvcenter_post_event 0 "update" 5 "htvcenter-vmware-esx" "Updating VMware VM $VMWARE_ESX_VM_NAME."
		# get full vm configuration
		eval `$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdetails.pl --vmname $VMWARE_ESX_VM_NAME`
		if [ "$htvcenter_VMWARE_ESX_VM_NAME" != "$VMWARE_ESX_VM_NAME" ]; then
			htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to set configuration for ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# after that we have the following in the environment
		#htvcenter_VMWARE_ESX_VM_NAME
		#htvcenter_VMWARE_ESX_VM_STATE
		#htvcenter_VMWARE_ESX_VM_CPUS
		#htvcenter_VMWARE_ESX_VM_RAM
		#htvcenter_VMWARE_ESX_VM_MAC
		#htvcenter_VMWARE_ESX_VM_NIC_TYPE
		#htvcenter_VMWARE_ESX_VM_VSWITCH
		#htvcenter_VMWARE_ESX_VM_MAC2
		#htvcenter_VMWARE_ESX_VM_NIC_TYPE2
		#htvcenter_VMWARE_ESX_VM_VSWITCH2
		#htvcenter_VMWARE_ESX_VM_MAC3
		#htvcenter_VMWARE_ESX_VM_NIC_TYPE3
		#htvcenter_VMWARE_ESX_VM_VSWITCH3
		#htvcenter_VMWARE_ESX_VM_MAC4
		#htvcenter_VMWARE_ESX_VM_NIC_TYPE4
		#htvcenter_VMWARE_ESX_VM_VSWITCH4
		#htvcenter_VMWARE_ESX_VM_MAC5
		#htvcenter_VMWARE_ESX_VM_NIC_TYPE5
		#htvcenter_VMWARE_ESX_VM_VSWITCH5
		#htvcenter_VMWARE_ESX_VM_BOOT
		#htvcenter_VMWARE_ESX_VM_VNC_PORT
		#htvcenter_VMWARE_ESX_VM_VNC_PASSWORD
		#htvcenter_VMWARE_ESX_VM_DISK1
		#htvcenter_VMWARE_ESX_VM_CAPACITY1
		#htvcenter_VMWARE_ESX_VM_GUEST_ID
		#htvcenter_VMWARE_ESX_VM_GUEST_NAME
		#htvcenter_VMWARE_ESX_VM_CDROM_FILE

		# we do not allow changing the mac address of the mgmt nic
		if [ "$VMWARE_ESX_VM_MAC" != "" ] && [ "$VMWARE_ESX_VM_MAC" != "$htvcenter_VMWARE_ESX_VM_MAC" ]; then
			htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Not changing mac address $htvcenter_VMWARE_ESX_VM_MAC of ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# we do not allow changing the datastore
		htvcenter_VMWARE_ESX_VM_DATASTORE=`echo $htvcenter_VMWARE_ESX_VM_DISK1 | cut -d'[' -f2 | cut -d']' -f1`
		if [ "$VMWARE_ESX_VM_DATASTORE" != "" ] && [ "$VMWARE_ESX_VM_DATASTORE" != "$htvcenter_VMWARE_ESX_VM_DATASTORE" ]; then
			htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Not changing datastore $htvcenter_VMWARE_ESX_VM_DATASTORE of ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi

		# cpu changed ?
		if [ "$VMWARE_ESX_VM_CPU" != "" ] && [ "$VMWARE_ESX_VM_CPU" != "$htvcenter_VMWARE_ESX_VM_CPUS" ]; then
			htvcenter_post_event 0 "update" 5 "htvcenter-vmware-esx" "Updating CPUS to $VMWARE_ESX_VM_CPU of ESX VM $VMWARE_ESX_VM_NAME."
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmupdate.pl --vmname $VMWARE_ESX_VM_NAME --cpu_cores $VMWARE_ESX_VM_CPU; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to update CPUS to $VMWARE_ESX_VM_CPU of ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi
		# ram changed ?
		if [ "$VMWARE_ESX_VM_RAM" != "" ] && [ "$VMWARE_ESX_VM_RAM" != "$htvcenter_VMWARE_ESX_VM_RAM" ]; then
			htvcenter_post_event 0 "update" 5 "htvcenter-vmware-esx" "Updating RAM to $VMWARE_ESX_VM_RAM of ESX VM $VMWARE_ESX_VM_NAME."
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmupdate.pl --vmname $VMWARE_ESX_VM_NAME --mem_mb $VMWARE_ESX_VM_RAM; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to update RAM to $VMWARE_ESX_VM_RAM of ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		VM_NIC1_CHANGED=false
		VM_NIC2_CHANGED=false
		VM_NIC3_CHANGED=false
		VM_NIC4_CHANGED=false
		VM_NIC5_CHANGED=false
		# nic 1 type changed
		if [ "$VMWARE_ESX_VM_NIC_TYPE1" != "" ] && [ "$VMWARE_ESX_VM_NIC_TYPE1" != "$htvcenter_VMWARE_ESX_VM_NIC_TYPE" ]; then
			VM_NIC1_CHANGED=true
		fi
		# nic 1 vswitch changed
		if [ "$VMWARE_ESX_VM_NIC_VSWITCH1" != "" ]; then
			VMWARE_ESX_VM_NIC_VSWITCH1_CHECK=`echo $VMWARE_ESX_VM_NIC_VSWITCH1 | sed -e "s/@/ /g"`
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH1_CHECK" != "$htvcenter_VMWARE_ESX_VM_VSWITCH" ]; then
				VM_NIC1_CHANGED=true
			fi
		fi
		# re-create nic 1 ?
		if [ "$VM_NIC1_CHANGED" == "true" ]; then
			if ! vm_update_nic $VMWARE_ESX_VM_NAME 1 $VMWARE_ESX_VM_MAC $VMWARE_ESX_VM_NIC_TYPE1 $VMWARE_ESX_VM_NIC_VSWITCH1; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to update the 1. network card of ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		# nic 2 removed
		if [ "$VMWARE_ESX_VM_MAC2" == "" ]; then
			if ! vm_remove_nic $VMWARE_ESX_VM_NAME 2; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to remove the 2. network card of ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		else
			# nic 2 type changed
			if [ "$VMWARE_ESX_VM_NIC_TYPE2" != "" ] && [ "$VMWARE_ESX_VM_NIC_TYPE2" != "$htvcenter_VMWARE_ESX_VM_NIC_TYPE2" ]; then
				VM_NIC2_CHANGED=true
			fi
			# nic 2 vswitch changed
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH2" != "" ]; then
				VMWARE_ESX_VM_NIC_VSWITCH2_CHECK=`echo $VMWARE_ESX_VM_NIC_VSWITCH2 | sed -e "s/@/ /g"`
				if [ "$VMWARE_ESX_VM_NIC_VSWITCH2_CHECK" != "$htvcenter_VMWARE_ESX_VM_VSWITCH2" ]; then
					VM_NIC2_CHANGED=true
				fi
			fi
			# nic 2 mac changed
			if [ "$VMWARE_ESX_VM_MAC2" != "" ] && [ "$VMWARE_ESX_VM_MAC2" != "$htvcenter_VMWARE_ESX_VM_MAC2" ]; then
				VM_NIC2_CHANGED=true
			fi
			# re-create nic 2 ?
			if [ "$VM_NIC2_CHANGED" == "true" ]; then
				if ! vm_update_nic $VMWARE_ESX_VM_NAME 2 $VMWARE_ESX_VM_MAC2 $VMWARE_ESX_VM_NIC_TYPE2 $VMWARE_ESX_VM_NIC_VSWITCH2; then
					htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to update the 2. network card of ESX VM $VMWARE_ESX_VM_NAME!"

					htvcenter_lock_queue release vmware-esx $LOCK_TIME
					trap '' EXIT

					exit 1
				fi
			fi
		fi


		# nic 3 removed
		if [ "$VMWARE_ESX_VM_MAC3" == "" ]; then
			if ! vm_remove_nic $VMWARE_ESX_VM_NAME 3; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to remove the 3. network card of ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		else
			# nic 3 type changed
			if [ "$VMWARE_ESX_VM_NIC_TYPE3" != "" ] && [ "$VMWARE_ESX_VM_NIC_TYPE3" != "$htvcenter_VMWARE_ESX_VM_NIC_TYPE3" ]; then
				VM_NIC3_CHANGED=true
			fi
			# nic 3 vswitch changed
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH3" != "" ]; then
				VMWARE_ESX_VM_NIC_VSWITCH3_CHECK=`echo $VMWARE_ESX_VM_NIC_VSWITCH3 | sed -e "s/@/ /g"`
				if [ "$VMWARE_ESX_VM_NIC_VSWITCH3_CHECK" != "$htvcenter_VMWARE_ESX_VM_VSWITCH3" ]; then
					VM_NIC3_CHANGED=true
				fi
			fi
			# nic 3 mac changed
			if [ "$VMWARE_ESX_VM_MAC3" != "" ] && [ "$VMWARE_ESX_VM_MAC3" != "$htvcenter_VMWARE_ESX_VM_MAC3" ]; then
				VM_NIC3_CHANGED=true
			fi
			# re-create nic 3 ?
			if [ "$VM_NIC3_CHANGED" == "true" ]; then
				if ! vm_update_nic $VMWARE_ESX_VM_NAME 3 $VMWARE_ESX_VM_MAC3 $VMWARE_ESX_VM_NIC_TYPE3 $VMWARE_ESX_VM_NIC_VSWITCH3; then
					htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to update the 3. network card of ESX VM $VMWARE_ESX_VM_NAME!"

					htvcenter_lock_queue release vmware-esx $LOCK_TIME
					trap '' EXIT

					exit 1
				fi
			fi
		fi


		# nic 4 removed
		if [ "$VMWARE_ESX_VM_MAC4" == "" ]; then
			if ! vm_remove_nic $VMWARE_ESX_VM_NAME 4; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to remove the 4. network card of ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		else
			# nic 4 type changed
			if [ "$VMWARE_ESX_VM_NIC_TYPE4" != "" ] && [ "$VMWARE_ESX_VM_NIC_TYPE4" != "$htvcenter_VMWARE_ESX_VM_NIC_TYPE4" ]; then
				VM_NIC4_CHANGED=true
			fi
			# nic 4 vswitch changed
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH4" != "" ]; then
				VMWARE_ESX_VM_NIC_VSWITCH4_CHECK=`echo $VMWARE_ESX_VM_NIC_VSWITCH4 | sed -e "s/@/ /g"`
				if [ "$VMWARE_ESX_VM_NIC_VSWITCH4_CHECK" != "$htvcenter_VMWARE_ESX_VM_VSWITCH4" ]; then
					VM_NIC4_CHANGED=true
				fi
			fi
			# nic 4 mac changed
			if [ "$VMWARE_ESX_VM_MAC4" != "" ] && [ "$VMWARE_ESX_VM_MAC4" != "$htvcenter_VMWARE_ESX_VM_MAC4" ]; then
				VM_NIC4_CHANGED=true
			fi
			# re-create nic 4 ?
			if [ "$VM_NIC4_CHANGED" == "true" ]; then
				if ! vm_update_nic $VMWARE_ESX_VM_NAME 4 $VMWARE_ESX_VM_MAC4 $VMWARE_ESX_VM_NIC_TYPE4 $VMWARE_ESX_VM_NIC_VSWITCH4; then
					htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to update the 4. network card of ESX VM $VMWARE_ESX_VM_NAME!"

					htvcenter_lock_queue release vmware-esx $LOCK_TIME
					trap '' EXIT

					exit 1
				fi
			fi
		fi

		# nic 5 removed
		if [ "$VMWARE_ESX_VM_MAC5" == "" ]; then
			if ! vm_remove_nic $VMWARE_ESX_VM_NAME 5; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to remove the 5. network card of ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		else
			# nic 5 type changed
			if [ "$VMWARE_ESX_VM_NIC_TYPE5" != "" ] && [ "$VMWARE_ESX_VM_NIC_TYPE5" != "$htvcenter_VMWARE_ESX_VM_NIC_TYPE5" ]; then
				VM_NIC5_CHANGED=true
			fi
			# nic 5 vswitch changed
			if [ "$VMWARE_ESX_VM_NIC_VSWITCH5" != "" ]; then
				VMWARE_ESX_VM_NIC_VSWITCH5_CHECK=`echo $VMWARE_ESX_VM_NIC_VSWITCH5 | sed -e "s/@/ /g"`
				if [ "$VMWARE_ESX_VM_NIC_VSWITCH5_CHECK" != "$htvcenter_VMWARE_ESX_VM_VSWITCH5" ]; then
					VM_NIC5_CHANGED=true
				fi
			fi
			# nic 5 mac changed
			if [ "$VMWARE_ESX_VM_MAC5" != "" ] && [ "$VMWARE_ESX_VM_MAC5" != "$htvcenter_VMWARE_ESX_VM_MAC5" ]; then
				VM_NIC5_CHANGED=true
			fi
			# re-create nic 5 ?
			if [ "$VM_NIC5_CHANGED" == "true" ]; then
				if ! vm_update_nic $VMWARE_ESX_VM_NAME 5 $VMWARE_ESX_VM_MAC5 $VMWARE_ESX_VM_NIC_TYPE5 $VMWARE_ESX_VM_NIC_VSWITCH5; then
					htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to update the 5. network card of ESX VM $VMWARE_ESX_VM_NAME!"

					htvcenter_lock_queue release vmware-esx $LOCK_TIME
					trap '' EXIT

					exit 1
				fi
			fi
		fi

		# boot sequence changed
		if [ "$VMWARE_ESX_VM_BOOT" != "" ] && [ "$VMWARE_ESX_VM_BOOT" != "$htvcenter_VMWARE_ESX_VM_BOOT" ]; then
			htvcenter_post_event 0 "update" 5 "htvcenter-vmware-esx" "Updating bootsequence to $VMWARE_ESX_VM_BOOT of ESX VM $VMWARE_ESX_VM_NAME."
			if ! vm_setboot $VMWARE_ESX_VM_NAME $VMWARE_ESX_VM_BOOT; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to setboot to $VMWARE_ESX_VM_BOOT for ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi
		# iso/cdrom changed
		if [ "$VMWARE_ESX_VM_ISO" != "" ] && [ "$VMWARE_ESX_VM_ISO" != "$htvcenter_VMWARE_ESX_VM_CDROM_FILE" ]; then
			htvcenter_post_event 0 "update" 5 "htvcenter-vmware-esx" "Updating ISO/CDROM to $VMWARE_ESX_VM_ISO of ESX VM $VMWARE_ESX_VM_NAME."
			VM_ISO_DATASTORE=`echo $VMWARE_ESX_VM_ISO | cut -d'[' -f2 | cut -d']' -f1`
			VM_ISO_IMAGE_FILE=`echo $VMWARE_ESX_VM_ISO | cut -d']' -f2`
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmISOManagement.pl --vmname $VMWARE_ESX_VM_NAME --operation mount --datastore $VM_ISO_DATASTORE --filename $VM_ISO_IMAGE_FILE; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to add ISO $VM_ISO_DATASTORE / $VM_ISO_IMAGE_FILE to ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		VMWARE_ESX_VM_VNC_UPDATE=false
		VMWARE_ESX_VM_VNC_PORT=$(( $VMWARE_ESX_VM_VNC_PORT + 5900 ))
		if [ "$VMWARE_ESX_VM_VNC_PORT" != "" ] && [ "$VMWARE_ESX_VM_VNC_PORT" != "$htvcenter_VMWARE_ESX_VM_VNC_PORT" ]; then
			VMWARE_ESX_VM_VNC_UPDATE=true
		fi
		if [ "$VMWARE_ESX_VM_VNC_AUTH" != "" ] && [ "$VMWARE_ESX_VM_VNC_AUTH" != "$htvcenter_VMWARE_ESX_VM_VNC_PASSWORD" ]; then
			VMWARE_ESX_VM_VNC_UPDATE=true
		fi
		if [ "$VMWARE_ESX_VM_VNC_UPDATE" == "true" ]; then
			# starting the VM
			if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWERON; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to start ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
			# set vnc access
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/addVMAdvParamOption.pl --key RemoteDisplay.vnc.enabled --value TRUE --vmname $VMWARE_ESX_VM_NAME; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to enable VNC access to ESX VM $VMWARE_ESX_VM_NAME!"
			fi
			# vnc port changed
			if [ "$VMWARE_ESX_VM_VNC_PORT" != "" ] && [ "$VMWARE_ESX_VM_VNC_PORT" != "$htvcenter_VMWARE_ESX_VM_VNC_PORT" ]; then
				htvcenter_post_event 0 "update" 5 "htvcenter-vmware-esx" "Updating VNC Port to $VMWARE_ESX_VM_VNC_PORT of ESX VM $VMWARE_ESX_VM_NAME."
				if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/addVMAdvParamOption.pl --key RemoteDisplay.vnc.port --value $VMWARE_ESX_VM_VNC_PORT --vmname $VMWARE_ESX_VM_NAME; then
					htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to set the VNC Port for ESX VM $VMWARE_ESX_VM_NAME!"
				fi
			fi
			# vnc password changed
			if [ "$VMWARE_ESX_VM_VNC_AUTH" != "" ] && [ "$VMWARE_ESX_VM_VNC_AUTH" != "$htvcenter_VMWARE_ESX_VM_VNC_PASSWORD" ]; then
				htvcenter_post_event 0 "update" 5 "htvcenter-vmware-esx" "Updating VNC Password to $VMWARE_ESX_VM_VNC_AUTH of ESX VM $VMWARE_ESX_VM_NAME."
				if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/addVMAdvParamOption.pl --key RemoteDisplay.vnc.password --value $VMWARE_ESX_VM_VNC_AUTH --vmname $VMWARE_ESX_VM_NAME; then
					htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to set the VNC Password for ESX VM $VMWARE_ESX_VM_NAME!"
				fi
			fi
			# stopping the VM again
			if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWEROFF; then
				htvcenter_post_event 0 "update" 3 "htvcenter-vmware-esx" "Failed to stop ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT

		$0 post_vm_list -i $VMWARE_ESX_HOST_IP --htvcenter-internal-cmd true
		;;
	start)
		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWERON; then
			htvcenter_post_event 0 "start" 3 "htvcenter-vmware-esx" "Failed to start ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		# post_vm_list again
		$0 post_vm_list -i $VMWARE_ESX_HOST_IP --htvcenter-internal-cmd true
		;;
	stop)
		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		if $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_SHUTDOWN | grep -i VMTools; then
			htvcenter_post_event 0 "stop" 3 "htvcenter-vmware-esx" "Please install VMware Tools in the ESX VM $VMWARE_ESX_VM_NAME!"
			htvcenter_post_event 0 "stop" 3 "htvcenter-vmware-esx" "Failed to shutdown ESX VM $VMWARE_ESX_VM_NAME! Forcing stop!"
			if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWEROFF; then
				htvcenter_post_event 0 "stop" 3 "htvcenter-vmware-esx" "Failed to force stop ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		# post_vm_list again
		$0 post_vm_list -i $VMWARE_ESX_HOST_IP --htvcenter-internal-cmd true
		;;
	reboot)
		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		if $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_REBOOT | grep -i VMTools; then
			htvcenter_post_event 0 "reboot" 3 "htvcenter-vmware-esx" "Please install VMware Tools in the ESX VM $VMWARE_ESX_VM_NAME!"
			htvcenter_post_event 0 "reboot" 3 "htvcenter-vmware-esx" "Failed to reboot ESX VM $VMWARE_ESX_VM_NAME! Forcing reboot!"
			if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_RESET; then
				htvcenter_post_event 0 "reboot" 3 "htvcenter-vmware-esx" "Failed to force reboot ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi
		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		# post_vm_list again
		$0 post_vm_list -i $VMWARE_ESX_HOST_IP --htvcenter-internal-cmd true
		;;
	remove)
		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		# make sure it is stopped
		$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWEROFF
		# remove, somehow returns bad exit code while still removing the vm
		$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdestroy.pl --vmname $VMWARE_ESX_VM_NAME
		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		if [ "$NO_POST" != "true" ]; then
			# post_vm_list again
			$0 post_vm_list -i $VMWARE_ESX_HOST_IP --htvcenter-internal-cmd true
		fi
		;;

	list)
		# run API command
		$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vminfo.pl | grep ^Name: | awk '{ print $2 }'
		;;

	post_vm_list)
		ESX_STATS="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.vm_list"
		ESX_STATS_TMP="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.vm_list.tmp"
		rm -f $ESX_STATS
		> $ESX_STATS_TMP
		$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmlist.pl --hostname $VI_SERVER_HOSTNAME >> $ESX_STATS_TMP
		/bin/mv $ESX_STATS_TMP $ESX_STATS
		chmod 777 $ESX_STATS
		;;

	post_vm_components)
		ESX_STATS="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.vm_components"
		ESX_STATS_TMP="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.components.tmp"
		rm -f $ESX_STATS
		> $ESX_STATS_TMP
		# datastore list
		ESX_DATASTORE_DATASTORE_DETAILS=`mktemp /tmp/esx-ds.XXXXXX` || exit 1
		ESX_DATASTORE_BROWSE_COMMAND="$htvcenter_VMWARE_ESX_SDK_DIR/apps/host/dsbrowse.pl"
		$ESX_DATASTORE_BROWSE_COMMAND > $ESX_DATASTORE_DATASTORE_DETAILS
IFS='
'
		for n in `cat $ESX_DATASTORE_DATASTORE_DETAILS`; do
			if echo $n | grep "Information about datastore" 1>/dev/null; then
				DS_NAME=`echo $n | cut -d':' -f2 | sed -e "s/'//g" | awk '{ print $1 }'`
			fi
			if [ "$DS_NAME" == "" ]; then
				continue
			fi
			echo "ds""@""$DS_NAME" >> $ESX_STATS_TMP
			unset DS_NAME
		done
		IFS="$ORG_IFS"
		rm -f $ESX_DATASTORE_DATASTORE_DETAILS
		# vswitch list
		ESX_NETWORK_DETAILS=`mktemp /tmp/esx-net.XXXXXX` || exit 1
		ESX_PORTGROUP_DETAILS=`mktemp /tmp/esx-pg.XXXXXX` || exit 1
		ESX_NETWORK_BROWSE_COMMAND="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/esxcfg-vswitch-lamw-mod.pl -l"
		$ESX_NETWORK_BROWSE_COMMAND > $ESX_NETWORK_DETAILS
		NEXT_IS_VSWITCH_NAME=false
		NEXT_IS_WRITE_CONFIG_LINE=false
		CONF_VSWITCH_LINE=""

IFS='
'
		for n in `cat $ESX_NETWORK_DETAILS`; do
			if ($NEXT_IS_VSWITCH_NAME); then
				CONF_VSWITCH_LINE="$n"
				NEXT_IS_VSWITCH_NAME=false
				NEXT_IS_WRITE_CONFIG_LINE=true
			fi
			if echo $n | grep "Switch Name" 1>/dev/null; then
				NEXT_IS_VSWITCH_NAME=true
				continue
			fi
			if ($NEXT_IS_WRITE_CONFIG_LINE); then
				CONF_VSWITCH_NAME=`echo $CONF_VSWITCH_LINE | awk '{ print $1 }'`
				CONF_VSWITCH_NUM_PORTS=`echo $CONF_VSWITCH_LINE | awk '{ print $2 }'`
				CONF_VSWITCH_USED_PORTS=`echo $CONF_VSWITCH_LINE | awk '{ print $3 }'`
				CONF_VSWITCH_CONF_PORTS=`echo $CONF_VSWITCH_LINE | awk '{ print $4 }'`
				CONF_VSWITCH_MTU=`echo $CONF_VSWITCH_LINE | awk '{ print $5 }'`
				CONF_VSWITCH_UPLINK=`echo $CONF_VSWITCH_LINE | awk '{ print $6 }'`
				# echo "vs""@""$CONF_VSWITCH_NAME""@""$CONF_VSWITCH_NUM_PORTS""@""$CONF_VSWITCH_USED_PORTS""@""$CONF_VSWITCH_CONF_PORTS""@""$CONF_VSWITCH_MTU""@""$CONF_VSWITCH_UPLINK" >> $ESX_STATS_TMP
				# get the portgroups on this vswitch
				cat $ESX_NETWORK_DETAILS | grep -A1000 ^$CONF_VSWITCH_NAME  > $ESX_PORTGROUP_DETAILS
				echo END_OF_FILE >> $ESX_PORTGROUP_DETAILS
				sed '/Switch Name/,/END_OF_FILE/d' $ESX_PORTGROUP_DETAILS > $ESX_PORTGROUP_DETAILS.$CONF_VSWITCH_NAME
				sed -i -e 's/END_OF_FILE//g' $ESX_PORTGROUP_DETAILS.$CONF_VSWITCH_NAME
				sed -i -e '1,3d' $ESX_PORTGROUP_DETAILS.$CONF_VSWITCH_NAME
				sed -i -e '/./,/^$/!d' $ESX_PORTGROUP_DETAILS.$CONF_VSWITCH_NAME
				for p in `cat $ESX_PORTGROUP_DETAILS.$CONF_VSWITCH_NAME`; do

					PG_UPLINK=`echo $p | rev | awk '{ print $1 }' | rev | sed 's/^[ \t]*//' | awk '{ print $1 }' | sed 's/[ \t]*$//'`
					if echo $PG_UPLINK | grep '[a-z][a-z]' 1>/dev/null; then
						# this means we have a portgroup uplink parameter
						PG_NAME=`echo $p | rev | awk '{ print $4" "$5" "$6 }' | rev | sed 's/^[ \t]*//' | awk '{ print $1" "$2 }' | sed 's/[ \t]*$//'`
						PG_VLAN=`echo $p | rev | awk '{ print $3 }' | rev | sed 's/^[ \t]*//' | awk '{ print $1 }' | sed 's/[ \t]*$//'`
						PG_PORTS=`echo $p | rev | awk '{ print $2 }' | rev | sed 's/^[ \t]*//' | awk '{ print $1 }' | sed 's/[ \t]*$//'`
					else
						# this means the portgroup uplink parameter is emptry
						PG_UPLINK=""
						PG_NAME=`echo $p | rev | awk '{ print $3" "$4" "$5 }' | rev | sed 's/^[ \t]*//' | awk '{ print $1" "$2 }' | sed 's/[ \t]*$//'`
						PG_VLAN=`echo $p | rev | awk '{ print $2 }' | rev | sed 's/^[ \t]*//' | awk '{ print $1 }' | sed 's/[ \t]*$//'`
						PG_PORTS=`echo $p | rev | awk '{ print $1 }' | rev | sed 's/^[ \t]*//' | awk '{ print $1 }' | sed 's/[ \t]*$//'`
					fi
					# post VM network only
					if [ "$PG_NAME" != "Management Network" ]; then
						echo "vs""@""$PG_NAME" >> $ESX_STATS_TMP
					fi
				done
				rm -f $ESX_PORTGROUP_DETAILS
				NEXT_IS_WRITE_CONFIG_LINE=false
			fi
		done
		IFS="$ORG_IFS"
		rm -f $ESX_NETWORK_DETAILS


		/bin/mv $ESX_STATS_TMP $ESX_STATS
		chmod 777 $ESX_STATS
		;;

	post_vm_config)
		ESX_STATS="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.$VMWARE_ESX_VM_NAME.vm_config"
		ESX_STATS_TMP="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.$VMWARE_ESX_VM_NAME.vm_config.tmp"
		rm -f $ESX_STATS
		> $ESX_STATS_TMP
		$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdetails.pl --vmname $VMWARE_ESX_VM_NAME >> $ESX_STATS_TMP
		/bin/mv $ESX_STATS_TMP $ESX_STATS
		chmod 777 $ESX_STATS
		;;



	setboot_by_mac)
		# this command is is running from the htvcenter engine which does not know about the vm-name
	   unset VMWARE_ESX_VM_NAME
		if [ "$VMWARE_ESX_VM_MAC" == "" ] || [ "$VMWARE_ESX_VM_BOOT" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		VMWARE_ESX_VM_NAME=`get_vm_name_by_mac $VMWARE_ESX_VM_MAC`
		if [ "$VMWARE_ESX_VM_NAME" == "" ]; then
				htvcenter_post_event 0 "setboot_by_mac" 3 "htvcenter-vmware-esx" "VM with MAC address $VM_MAC is not existing on ESX Host $VI_SERVER_HOSTNAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
		else
			vmware_esx_lock aquire
			if ! vm_setboot $VMWARE_ESX_VM_NAME $VMWARE_ESX_VM_BOOT; then
				htvcenter_post_event 0 "setboot_by_mac" 3 "htvcenter-vmware-esx" "Failed to setboot to $VMWARE_ESX_VM_BOOT for ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT
		fi
		;;


	setboot)
		if [ "$VMWARE_ESX_VM_BOOT" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		if ! vm_setboot $VMWARE_ESX_VM_NAME $VMWARE_ESX_VM_BOOT; then
			htvcenter_post_event 0 "setboot" 3 "htvcenter-vmware-esx" "Failed to setboot to $VMWARE_ESX_VM_BOOT for ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT

		$0 post_vm_list -i $VMWARE_ESX_HOST_IP --htvcenter-internal-cmd true
		;;


	add_vm_nic)
		if [ "$VMWARE_ESX_VM_NAME" == "" ] || [ "$VMWARE_ESX_VM_MAC" == "" ] || [ "$VMWARE_ESX_VM_COMPONENT_NUMBER" == "" ] || [ "$VMWARE_ESX_VM_NIC_TYPE1" == "" ] || [ "$VMWARE_ESX_VM_NIC_VSWITCH1" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		if ! vm_add_nic $VMWARE_ESX_VM_NAME $VMWARE_ESX_VM_COMPONENT_NUMBER $VMWARE_ESX_VM_MAC $VMWARE_ESX_VM_NIC_TYPE1 $VMWARE_ESX_VM_NIC_VSWITCH1; then
			htvcenter_post_event 0 "add_vm_nic" 3 "htvcenter-vmware-esx" "Failed to add the $VMWARE_ESX_VM_COMPONENT_NUMBER network card to ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT

		$0 post_vm_config -i $VMWARE_ESX_HOST_IP -n $VMWARE_ESX_VM_NAME --htvcenter-internal-cmd true
		;;


	remove_vm_nic)
		if [ "$VMWARE_ESX_VM_NAME" == "" ] || [ "$VMWARE_ESX_VM_COMPONENT_NUMBER" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		echo "Removing nic $VMWARE_ESX_VM_COMPONENT_NUMBER from VMWare ESX VM $VMWARE_ESX_VM_NAME"
		if ! vm_remove_nic $VMWARE_ESX_VM_NAME $VMWARE_ESX_VM_COMPONENT_NUMBER; then
			htvcenter_post_event 0 "remove_vm_nic" 3 "htvcenter-vmware-esx" "Failed to remove the $VMWARE_ESX_VM_COMPONENT_NUMBER network card from ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT

		$0 post_vm_config -i $VMWARE_ESX_HOST_IP -n $VMWARE_ESX_VM_NAME --htvcenter-internal-cmd true
		;;


	fence)
		# this command is is running from the htvcenter engine which does not know about the vm-name
	   unset VMWARE_ESX_VM_NAME
		if [ "$VMWARE_ESX_VM_MAC" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		VMWARE_ESX_VM_NAME=`get_vm_name_by_mac $VMWARE_ESX_VM_MAC`
		if [ "$VMWARE_ESX_VM_NAME" == "" ]; then
				htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "VM with MAC address $VM_MAC is not existing on ESX Host $VI_SERVER_HOSTNAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
		else
			vmware_esx_lock aquire
			if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWEROFF; then
				htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to fence ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;


	assign_by_mac)
		# this command is is running from the htvcenter engine which does not know about the vm-name
		unset VMWARE_ESX_VM_NAME
		if [ "$VMWARE_ESX_VM_MAC" == "" ] || [ "$VMWARE_ESX_VM_DISK" == "" ] || [ "$VMWARE_ESX_VM_DATASTORE" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		VMWARE_ESX_VM_NAME=`get_vm_name_by_mac $VMWARE_ESX_VM_MAC`
		if [ "$VMWARE_ESX_VM_NAME" == "" ]; then
			htvcenter_post_event 0 "assign_by_mac" 3 "htvcenter-vmware-esx" "VM with MAC address $VM_MAC is not existing on ESX Host $VI_SERVER_HOSTNAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# stop VM
		if $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_SHUTDOWN | grep -i VMTools; then
			$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWEROFF
		fi

		eval `$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdetails.pl --vmname $VMWARE_ESX_VM_NAME`
		# disk1 empty, this is coming from idle assignment
		if [ "$htvcenter_VMWARE_ESX_VM_DISK1" == "" ]; then
			# attach disk
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdkManagement.pl --vmname $VMWARE_ESX_VM_NAME --vmdkname $VMWARE_ESX_VM_DISK --datastore $VMWARE_ESX_VM_DATASTORE --operation add; then
				htvcenter_post_event 0 "assign_by_mac" 3 "htvcenter-vmware-esx" "Failed to attach VMDK $VMWARE_ESX_VM_DISK to ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		else
			# make sure current disk is detached
			htvcenter_VMWARE_ESX_VM_VMDK=`echo $htvcenter_VMWARE_ESX_VM_DISK1 | cut -d']' -f2`
			htvcenter_VMWARE_ESX_VM_VMDK=`basename $htvcenter_VMWARE_ESX_VM_VMDK`
			htvcenter_VMWARE_ESX_VM_VMDK_DS=`echo $htvcenter_VMWARE_ESX_VM_DISK1 | cut -d'[' -f2 | cut -d']' -f1`
			# only detach if it is different
			if [ "$VMWARE_ESX_VM_DISK" == "$htvcenter_VMWARE_ESX_VM_VMDK" ] && [ "$VMWARE_ESX_VM_DATASTORE" == "$htvcenter_VMWARE_ESX_VM_VMDK_DS" ]; then
				htvcenter_post_event 0 "deassign_by_mac" 5 "htvcenter-vmware-esx" "Found VMDK $htvcenter_VMWARE_ESX_VM_DISK1 already attached on ESX VM $VMWARE_ESX_VM_NAME!"
			else
				if [ "$htvcenter_VMWARE_ESX_VM_VMDK" != "" ]; then
					htvcenter_post_event 0 "assign_by_mac" 5 "htvcenter-vmware-esx" "Found existing VMDK $htvcenter_VMWARE_ESX_VM_DISK1 on ESX VM $VMWARE_ESX_VM_NAME! Trying to detach it."
					if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdkManagement.pl --vmname $VMWARE_ESX_VM_NAME --vmdkname $htvcenter_VMWARE_ESX_VM_VMDK --operation remove; then
						htvcenter_post_event 0 "assign_by_mac" 3 "htvcenter-vmware-esx" "Failed to remove existing VMDK $htvcenter_VMWARE_ESX_VM_DISK1 from ESX VM $VMWARE_ESX_VM_NAME!"

						htvcenter_lock_queue release vmware-esx $LOCK_TIME
						trap '' EXIT

						exit 1
					fi
				fi
				# attach disk
				if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdkManagement.pl --vmname $VMWARE_ESX_VM_NAME --vmdkname $VMWARE_ESX_VM_DISK --datastore $VMWARE_ESX_VM_DATASTORE --operation add; then
					htvcenter_post_event 0 "assign_by_mac" 3 "htvcenter-vmware-esx" "Failed to attach VMDK $VMWARE_ESX_VM_DISK to ESX VM $VMWARE_ESX_VM_NAME!"

					htvcenter_lock_queue release vmware-esx $LOCK_TIME
					trap '' EXIT

					exit 1
				fi
			fi
		fi
		# we leave the VM stopped to make the virtual-resource reboot_by_mac command start it again

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;

	deassign_by_mac)
		# this command is is running from the htvcenter engine which does not know about the vm-name
		unset VMWARE_ESX_VM_NAME
		if [ "$VMWARE_ESX_VM_MAC" == "" ] || [ "$VMWARE_ESX_VM_DISK" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		VMWARE_ESX_VM_NAME=`get_vm_name_by_mac $VMWARE_ESX_VM_MAC`
		if [ "$VMWARE_ESX_VM_NAME" == "" ]; then
			htvcenter_post_event 0 "deassign_by_mac" 3 "htvcenter-vmware-esx" "VM with MAC address $VM_MAC is not existing on ESX Host $VI_SERVER_HOSTNAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# stop VM
		if $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_SHUTDOWN | grep -i VMTools; then
			$htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWEROFF
		fi
		# remove disk
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdkManagement.pl --vmname $VMWARE_ESX_VM_NAME --vmdkname $VMWARE_ESX_VM_DISK --operation remove; then
			htvcenter_post_event 0 "deassign_by_mac" 3 "htvcenter-vmware-esx" "Failed to remove $VMWARE_ESX_VM_DISK from ESX VM $VMWARE_ESX_VM_NAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# we leave the VM stopped to make the virtual-resource reboot_by_mac command start it again

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;


	stop_by_mac)
		# this command is is running from the htvcenter engine which does not know about the vm-name
		unset VMWARE_ESX_VM_NAME
		if [ "$VMWARE_ESX_VM_MAC" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		VMWARE_ESX_VM_NAME=`get_vm_name_by_mac $VMWARE_ESX_VM_MAC`
		if [ "$VMWARE_ESX_VM_NAME" == "" ]; then
			htvcenter_post_event 0 "stop_by_mac" 3 "htvcenter-vmware-esx" "VM with MAC address $VM_MAC is not existing on ESX Host $VI_SERVER_HOSTNAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_SHUTDOWN | grep -i VMTools; then
			htvcenter_post_event 0 "stop_by_mac" 3 "htvcenter-vmware-esx" "Please install VMware Tools in the ESX VM $VMWARE_ESX_VM_NAME!"
			htvcenter_post_event 0 "stop_by_mac" 3 "htvcenter-vmware-esx" "Failed to shutdown ESX VM $VMWARE_ESX_VM_NAME! Forcing stop!"
			if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWEROFF; then
				htvcenter_post_event 0 "stop_by_mac" 3 "htvcenter-vmware-esx" "Failed to force stop ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;

	reboot_by_mac)
		# check if the VM is running
		# if yes, reboot it
		# if not just start it
		# this command is is running from the htvcenter engine which does not know about the vm-name
		unset VMWARE_ESX_VM_NAME
		if [ "$VMWARE_ESX_VM_MAC" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			vmware_esx_usage
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		VMWARE_ESX_VM_NAME=`get_vm_name_by_mac $VMWARE_ESX_VM_MAC`
		if [ "$VMWARE_ESX_VM_NAME" == "" ]; then
			htvcenter_post_event 0 "reboot_by_mac" 3 "htvcenter-vmware-esx" "VM with MAC address $VM_MAC is not existing on ESX Host $VI_SERVER_HOSTNAME!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		eval `$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmdetails.pl --vmname $VMWARE_ESX_VM_NAME`
		if [ "$htvcenter_VMWARE_ESX_VM_STATE" == "active" ]; then
			# reboot/restart, this is coming from the UI resource reboot
			if $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_REBOOT | grep -i VMTools; then
				htvcenter_post_event 0 "reboot_by_mac" 3 "htvcenter-vmware-esx" "Please install VMware Tools in the ESX VM $VMWARE_ESX_VM_NAME!"
				htvcenter_post_event 0 "reboot_by_mac" 3 "htvcenter-vmware-esx" "Failed to reboot ESX VM $VMWARE_ESX_VM_NAME! Forcing reboot!"
				if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_RESET; then
					htvcenter_post_event 0 "reboot_by_mac" 3 "htvcenter-vmware-esx" "Failed to force reboot ESX VM $VMWARE_ESX_VM_NAME!"

					htvcenter_lock_queue release vmware-esx $LOCK_TIME
					trap '' EXIT

					exit 1
				fi
			fi
		else
			# just start, this is coming from server assignment which leaves the VM stopped
			# it only start esx-localboot VMs if active, monitoring will set the non-running localboot VMs to idle
			if ! $htvcenter_VMWARE_ESX_SDK_DIR/apps/vm/vmcontrol.pl --vmname $VMWARE_ESX_VM_NAME --operation $VM_ACTION_POWERON; then
				htvcenter_post_event 0 "reboot_by_mac" 3 "htvcenter-vmware-esx" "Failed to start ESX VM $VMWARE_ESX_VM_NAME!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;

# host functions

	host_shutdown)
		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		mkdir -p $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/tmp
		ESX_SHUTDOWN=`mktemp $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/tmp/vmware-esx.shutdown.XXXXXX` || exit 1
		ESX_HOSTFILE=`mktemp $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/tmp/vmware-esx.hostfile.XXXXXX` || exit 1
		/bin/cp -f $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/shutdownHostViaSOAPAPICall.pl $ESX_SHUTDOWN
		sed -i -e "s/username = 'fillmein'/username = \'$VI_USERNAME\'/" $ESX_SHUTDOWN
		sed -i -e "s/fillmein/$VI_PASSWORD/" $ESX_SHUTDOWN
		chmod +x $ESX_SHUTDOWN
		echo "$VMWARE_ESX_HOST_IP" > $ESX_HOSTFILE
		vmware_esx_lock aquire
		if ! $ESX_SHUTDOWN $ESX_HOSTFILE; then
			htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to shutdown ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		rm -f $ESX_SHUTDOWN $ESX_HOSTFILE

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;


	host_reboot)
		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE


		#htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "/dev/tcp/$VMWARE_ESX_HOST_IP/$htvcenter_EXEC_PORT"

		# the ESX may eventually be in idle state and the host_reboot is coming through assignment
		# then we need to use the regular dropbear/ssh mechanism to reboot the idle system
		#if read < /dev/tcp/$VMWARE_ESX_HOST_IP/$htvcenter_EXEC_PORT 2>/dev/null; then
		#	# in idle state
		#	CMD_TOKEN=`echo $RANDOM | md5sum | awk '{ print $1 }'`
		#	HOST_REBOOT_COMMAND="$htvcenter_SERVER_BASE_DIR/htvcenter/sbin/htvcenter-exec -i $VMWARE_ESX_HOST_IP -t $CMD_TOKEN -c reboot"
		#	$HOST_REBOOT_COMMAND
		#else
			# running ESX Host
			mkdir -p $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/tmp
			ESX_REBOOT=`mktemp $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/tmp/vmware-esx.shutdown.XXXXXX` || exit 1
			ESX_HOSTFILE=`mktemp $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/tmp/vmware-esx.hostfile.XXXXXX` || exit 1
			/bin/cp -f $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/shutdownHostViaSOAPAPICall.pl $ESX_REBOOT
			sed -i -e "s/username = 'fillmein'/username = \'$VI_USERNAME\'/" $ESX_REBOOT
			sed -i -e "s/fillmein/$VI_PASSWORD/" $ESX_REBOOT
			# change ShutdownTask to RebootTask
			sed -i -e "s/ShutdownHost_Task/RebootHost_Task/" $ESX_REBOOT
			chmod +x $ESX_REBOOT
			echo "$VMWARE_ESX_HOST_IP" > $ESX_HOSTFILE
			if ! $ESX_REBOOT $ESX_HOSTFILE; then
				htvcenter_post_event 0 "create" 3 "htvcenter-vmware-esx" "Failed to reboot ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
			rm -f $ESX_REBOOT $ESX_HOSTFILE
		#fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;

	post_iso_list)
		# post dir list
		PICK_ISO_CONFIG_TMP=$VMWARE_ESX_HOST_IP.pick_iso_config
		ESX_ISO_STATS="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.pick_iso_config"
		> $PICK_ISO_CONFIG_TMP
		for ISO in `$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/hostlistfiles.pl --vmhost $VI_SERVER_HOSTNAME --type iso | sed -e "s/ //g"`; do
			echo "$ISO" >> $PICK_ISO_CONFIG_TMP
		done
		/bin/mv $PICK_ISO_CONFIG_TMP $ESX_ISO_STATS
		chmod 777 $ESX_ISO_STATS
		;;

	enable_vnc)
		LOCK_TIME=`htvcenter_lock_queue aquire vmware-esx`
		trap "htvcenter_lock_queue release vmware-esx $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		# check if enabled already
		if $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/hostfirewall.pl --vmhost $VI_SERVER_HOSTNAME | grep VNC 1>/dev/null; then
			htvcenter_post_event 0 "enable_vnc" 5 "htvcenter-vmware-esx" "VNC access is enabled on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 0
		fi
		# make sure vnc is enabled in the ESX firewall
		ESX_SSH_ENABLED=false
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/hostServiceManagement.pl --operation query | grep TSM-SSH | grep -i NOT 1>/dev/null; then
			ESX_SSH_ENABLED=true
		else
			# not running
			vmware_esx_lock aquire
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/hostServiceManagement.pl --operation start --service TSM-SSH; then
				htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to start TSM-SSH on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi
		fi

		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-ssh.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD "cp -f /etc/vmware/firewall/service.xml /etc/vmware/firewall/service.xml.backup"; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-ssh.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD "chmod 644 /etc/vmware/firewall/service.xml"; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-ssh.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD "chmod +t /etc/vmware/firewall/service.xml"; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-ssh.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD "sed -i -e 's#</ConfigRoot>##g' /etc/vmware/firewall/service.xml"; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-scp.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/etc/templates/htvcenter-vmware-esx-vnc-firewall.xml /tmp/; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-ssh.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD "cat /tmp/htvcenter-vmware-esx-vnc-firewall.xml >> /etc/vmware/firewall/service.xml"; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-ssh.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD "rm -f /tmp/htvcenter-vmware-esx-vnc-firewall.xml"; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-ssh.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD "esxcli network firewall refresh"; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/expect/htvcenter-vmware-esx-ssh.exp $VI_SERVER $VI_USERNAME $VI_PASSWORD "esxcli network firewall ruleset list"; then
			htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to configure /etc/vmware/firewall/service.xml on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

			htvcenter_lock_queue release vmware-esx $LOCK_TIME
			trap '' EXIT

			exit 1
		fi

		# should we stop the ssh service again ?
		if [ "$ESX_SSH_ENABLED" == "false" ]; then
			if ! $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/hostServiceManagement.pl --operation stop --service TSM-SSH; then
				htvcenter_post_event 0 "enable_vnc" 3 "htvcenter-vmware-esx" "Failed to stop TSM-SSH on ESX Host $VI_SERVER_HOSTNAME - $VMWARE_ESX_HOST_IP!"

				htvcenter_lock_queue release vmware-esx $LOCK_TIME
				trap '' EXIT

				exit 1
			fi

		fi

		htvcenter_lock_queue release vmware-esx $LOCK_TIME
		trap '' EXIT
		;;


	post_host_statistics)
		ESX_STATS="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.host_statistics"
		ESX_STATS_TMP="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/web/vmware-esx-stat/$VMWARE_ESX_HOST_IP.host_statistics.tmp"
		rm -f $ESX_STATS
		# check if host is online, we are not trying to connect an offline host via the VMware API
		wget -T 10 -t 1 -O /dev/null --no-check-certificate https://$VI_SERVER/folder &>/dev/null
		WGET_RET=$?
		# an exit code 6 means online but auth failed
		if [ "$WGET_RET" != "6" ]; then
			exit 0
		fi
		> $ESX_STATS_TMP
		ESX_HOST_DETAILS=`mktemp /tmp/esx-ds.XXXXXX` || exit 1
		ESX_HOST_BROWSE_COMMAND="$htvcenter_VMWARE_ESX_SDK_DIR/apps/host/hostinfo.pl"
		$ESX_HOST_BROWSE_COMMAND > $ESX_HOST_DETAILS
IFS='
'
		for n in `cat $ESX_HOST_DETAILS`; do
			if echo $n | grep "Host Name" 1>/dev/null; then
				ESX_HOSTNAME=`echo $n | cut -d':' -f2 | sed -e "s/'//g" | awk '{ print $1 }'`
			fi
			if echo $n | grep "Cpu Speed" 1>/dev/null; then
				ESX_CPU_SPEED=`echo $n | cut -d':' -f2 | awk '{ print $1 }'`
			fi
			if echo $n | grep "Cpu Usage" 1>/dev/null; then
				ESX_CPU_USAGE=`echo $n | cut -d':' -f2 | awk '{ print $1 }'`
				ESX_CPU_USAGE=$(( ESX_CPU_USAGE / 100 ))
			fi
			if echo $n | grep "Physical Memory" 1>/dev/null; then
				ESX_PHYSICAL_MEMORY=`echo $n | cut -d':' -f2 | awk '{ print $1 }'`
				ESX_PHYSICAL_MEMORY=$(( ESX_PHYSICAL_MEMORY / 1024 / 1024 ))
			fi
			if echo $n | grep "Memory Usage" 1>/dev/null; then
				ESX_USED_MEMORY=`echo $n | cut -d':' -f2 | awk '{ print $1 }'`
			fi
			if echo $n | grep "Network Adapters" 1>/dev/null; then
				ESX_NETWORK_ADAPTER=`echo $n | cut -d':' -f2 | awk '{ print $1 }'`
			fi

			if [ "$ESX_HOSTNAME" == "" ] || [ "$ESX_CPU_SPEED" == "" ] || [ "$ESX_CPU_USAGE" == "" ] || [ "$ESX_PHYSICAL_MEMORY" == "" ] || [ "$ESX_USED_MEMORY" == "" ] || [ "$ESX_NETWORK_ADAPTER" == "" ]; then
				continue
			fi
			echo "$ESX_HOSTNAME@$ESX_CPU_SPEED@$ESX_CPU_USAGE@$ESX_PHYSICAL_MEMORY@$ESX_USED_MEMORY@$ESX_NETWORK_ADAPTER" >> $ESX_STATS_TMP
			unset ESX_HOSTNAME
			unset ESX_CPU_SPEED
			unset ESX_CPU_USAGE
			unset ESX_PHYSICAL_MEMORY
			unset ESX_USED_MEMORY
			unset ESX_NETWORK_ADAPTER
		done
		IFS="$ORG_IFS"
		# get the vm status
		$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/vmware-esx/bin/perl/vmlist.pl --hostname $VI_SERVER_HOSTNAME >> $ESX_STATS_TMP
		/bin/mv $ESX_STATS_TMP $ESX_STATS
		chmod 777 $ESX_STATS
		rm -f $ESX_HOST_DETAILS
		;;


	*)
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE
		vmware_esx_usage
		;;

esac

