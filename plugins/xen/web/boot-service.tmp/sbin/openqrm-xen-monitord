#!/bin/bash
# this script automatically monitors xen vms
#
# htvcenter Enterprise developed by htvcenter Enterprise GmbH.
#
# All source code and content (c) Copyright 2012, htvcenter Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the htvcenter Enterprise Server and Client License, unless otherwise agreed with htvcenter Enterprise GmbH.
# The latest version of this license can be found here: http://htvcenter-enterprise.com/license
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://htvcenter-enterprise.com
#
# Copyright 2012, htvcenter Enterprise GmbH <info@htvcenter-enterprise.com>
#
htvcenter_SERVER_BASE_DIR=$(dirname $0)/../../../..
htvcenter_SERVER_BASE_DIR=$(pushd $htvcenter_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/xen/include/htvcenter-plugin-xen-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/xen/etc/htvcenter-plugin-xen.conf
if [ -f $htvcenter_RESOURCE_PARAMETER_FILE ]; then
	. $htvcenter_RESOURCE_PARAMETER_FILE
	htvcenter_SERVER_IP=$resource_htvcenterserver
	export SERVER_PROTOCOL=$htvcenter_web_protocol
elif [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf ]; then
	. $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf
	. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-server-functions
	htvcenter_server_get_config
	htvcenter_SERVER_IP=$htvcenter_SERVER_IP_ADDRESS
	resource_id=0
	export resource_htvcenterserver=$htvcenter_SERVER_IP_ADDRESS
	export SERVER_PROTOCOL=$htvcenter_WEB_PROTOCOL
	export resource_senddelay=10
fi
htvcenter_POSTENCODE="$htvcenter_SERVER_BASE_DIR/htvcenter/sbin/htvcenter-postencode"
htvcenter_VM_DIR="/var/lib/xen/htvcenter/"
export LANG=C
htvcenter_EVENT="statistics"
htvcenter_ACTIVE_STATE="active"
htvcenter_STARTING_STATE="starting"

# define wget to use with https
if [ "$SERVER_PROTOCOL" == "https" ]; then
	WGET_NO_CERT_CHECK="--no-check-certificate --random-file=/dev/random"
fi

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

# mac is the identifier
XEN_VM_MAC=$1
if [ "$XEN_VM_MAC" == "" ]; then
	echo "Usage: $0 <mac-address>"
	exit 1
fi

XEN_VM_NAME=`grep -rHi $XEN_VM_MAC $htvcenter_VM_DIR/*/mac1 2>/dev/null | cut -d':' -f1 2>/dev/null` 2>/dev/null
XEN_VM_NAME=`dirname $XEN_VM_NAME` 2>/dev/null
XEN_VM_NAME=`basename $XEN_VM_NAME` 2>/dev/null
if [ "$XEN_VM_NAME" == "" ]; then
	echo "NOTICE: Cloud not find XEN vm $XEN_VM_MAC on this host" | logger
	exit 1
fi


# local used functions
function send_info() {
	current_state=`urlencodestring $htvcenter_ACTIVE_STATE`
	current_event=`urlencodestring $htvcenter_EVENT`
	MESSAGEDATA="resource_id=$resource_id&resource_uptime=$current_uptime&resource_cpunumber=$current_cpu_number&resource_cpuspeed=$current_cpu_speed&resource_cpumodel=$current_cpu_model&resource_memtotal=$current_mem_total&resource_memused=$current_mem_used&resource_swaptotal=$current_swap_total&resource_swapused=$current_swap_used&resource_hostname=$current_hostname&resource_load=$current_cpu_load&resource_nics=$current_nic_count&resource_state=$current_state&resource_event=$current_event";
	htvcenter_RESOURCE_INFO_URL="$SERVER_PROTOCOL://$resource_htvcenterserver/htvcenter/action/resource-monitor.php?resource_command=update_info&$MESSAGEDATA"
	wget $WGET_NO_CERT_CHECK -q -O /dev/null "$htvcenter_RESOURCE_INFO_URL"
}

# uptime
function find_uptime() {
	if [ -f /proc/uptime ]; then
		current_uptime=`cat /proc/uptime | cut -d'.' -f 1`
	fi
	if [ -z "$current_uptime" ]; then
		current_uptime=0
	fi
}
# cpu_speed
function find_cpu_speed() {
	if [ -f /proc/cpuinfo ]; then
		current_cpu_speed=(`cat /proc/cpuinfo | grep "cpu.*MHz"`)
		current_cpu_speed=${current_cpu_speed[3]/\.*/}
	fi
	if [ -z "$current_cpu_speed" ]; then
		current_cpu_speed=0
	fi
}

# used mem
function find_mem_used() {
	local VP=$1
	if [ -f /proc/$VP/status ]; then
		VM_RSS=`cat /proc/$VP/status | grep ^VmRSS: | awk '{ print $2 }'`
		current_mem_used=$(( VM_RSS / 1024 ))
	else
		current_mem_used=0
	fi
	if [ "$current_mem_used" -gt "$current_mem_total" ]; then
		current_mem_used=$current_mem_total
	fi
	export current_mem_used
}
# used cpu load
function find_cpu_load() {
	local VP=$1
	VM_CPU_SLICE=`ps -p $VP -o %cpu | tail -n+2`
	current_cpu_load=`perl -E "say $VM_CPU_SLICE/10"`
	export current_cpu_load
}


# get parameters for the vm resource
XEN_VM_RESOURCE_PARAMETER="$htvcenter_VM_DIR/$XEN_VM_NAME/resource-parameter.conf"
# sending resource-id will add the resource if not existing (-1 = new resource)
# loop get-parameters in case the network card is still not ready initialized
NETWORKCARD_LOOP=0
# send id -1 if resource parameters are not existing
if [ ! -f $XEN_VM_RESOURCE_PARAMETER ]; then
	NEW_RES_ID="&resource_id=-1"
fi

while (true); do
	if wget $WGET_NO_CERT_CHECK -q -O $XEN_VM_RESOURCE_PARAMETER "$SERVER_PROTOCOL://$resource_htvcenterserver/htvcenter/action/resource-monitor.php?resource_command=get_parameter&resource_mac=$XEN_VM_MAC$NEW_RES_ID"; then
		if grep resource_id $XEN_VM_RESOURCE_PARAMETER 1>/dev/null 2>&1; then
			echo "-> got parameters via $SERVER_PROTOCOL"
			break
		fi
	fi
	# no chance ?
	if [ "$NETWORKCARD_LOOP" == "10" ]; then
		echo "ERROR: Could not reach the htvcenter-Server at $htvcenter_SERVER_IP_ADDRESS!"
		exit 1
	fi
	NETWORKCARD_LOOP=$(( NETWORKCARD_LOOP + 1 ))
	sleep 5
done
# source parameters
. $XEN_VM_RESOURCE_PARAMETER

# gathering the static values
echo "$0: Gathering resources-information" | logger
# source xen vm config
XEN_VM_CPUS=`cat $htvcenter_VM_DIR/$XEN_VM_NAME/vcpu 2>/dev/null`
XEN_VM_RAM=`cat $htvcenter_VM_DIR/$XEN_VM_NAME/memory 2>/dev/null`
XEN_VM_MAC_1=`cat $htvcenter_VM_DIR/$XEN_VM_NAME/mac1 2>/dev/null`
XEN_VM_MAC_2=`cat $htvcenter_VM_DIR/$XEN_VM_NAME/mac2 2>/dev/null`
XEN_VM_MAC_3=`cat $htvcenter_VM_DIR/$XEN_VM_NAME/mac3 2>/dev/null`
XEN_VM_MAC_4=`cat $htvcenter_VM_DIR/$XEN_VM_NAME/mac4 2>/dev/null`
XEN_VM_MAC_5=`cat $htvcenter_VM_DIR/$XEN_VM_NAME/mac5 2>/dev/null`
export current_hostname=$XEN_VM_NAME
export resource_cpumodel="Xen Virtual CPU"
export current_cpu_number=$XEN_VM_CPUS
export current_mem_total=$XEN_VM_RAM

# nic count
TOTAL_NIC_COUNT=0
if [ "$XEN_VM_MAC_1" != "" ]; then
	TOTAL_NIC_COUNT=$(( TOTAL_NIC_COUNT + 1 ))
fi
if [ "$XEN_VM_MAC_2" != "" ]; then
	TOTAL_NIC_COUNT=$(( TOTAL_NIC_COUNT + 1 ))
fi
if [ "$XEN_VM_MAC_3" != "" ]; then
	TOTAL_NIC_COUNT=$(( TOTAL_NIC_COUNT + 1 ))
fi
if [ "$XEN_VM_MAC_4" != "" ]; then
	TOTAL_NIC_COUNT=$(( TOTAL_NIC_COUNT + 1 ))
fi
if [ "$XEN_VM_MAC_5" != "" ]; then
	TOTAL_NIC_COUNT=$(( TOTAL_NIC_COUNT + 1 ))
fi
export current_nic_count=$TOTAL_NIC_COUNT

# gather cpu speed only once
find_cpu_speed
# main loop
while (true); do
	# if we have a disk, check that the vm is still running
	XEN_VM_DISK_1=`cat $htvcenter_VM_DIR/$XEN_VM_NAME/disk1 2>/dev/null`
	if [ "$XEN_VM_DISK_1" != "" ]; then
		if ! ps ax | grep qemu | grep -v grep | grep -i "mac=$XEN_VM_MAC_1" 1>/dev/null; then
			exit 1
		fi

		# get the used mem from the VM
		VM_PID=`ps ax | grep qemu | grep -v grep | grep -i "mac=$KVM_VM_MAC" | head -n1 | awk '{ print $1 }'`
		if [ "$VM_PID" != "" ]; then
			find_mem_used $VM_PID
			find_cpu_load $VM_PID
		fi
	fi
	# uptime
	find_uptime
	# sending statistics
	send_info
	# delay
	sleep $resource_senddelay
done
# never reached
exit 0

















