#!/bin/bash
# this script automatically manages nfs
#
# htvcenter Enterprise developed by htvcenter Enterprise GmbH.
#
# All source code and content (c) Copyright 2014, htvcenter Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the htvcenter Enterprise Server and Client License, unless otherwise agreed with htvcenter Enterprise GmbH.
# The latest version of this license can be found here: http://htvcenter-enterprise.com/license
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://htvcenter-enterprise.com
#
# Copyright 2014, htvcenter Enterprise GmbH <info@htvcenter-enterprise.com>
#
htvcenter_SERVER_BASE_DIR=$(dirname $0)/../../../..
htvcenter_SERVER_BASE_DIR=$(pushd $htvcenter_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-functions
# unblock starting command queue early for non-blocking + ui commands
NFS_COMMAND=$1
if [ "$NFS_COMMAND" == "post_exports" ] || [ "$NFS_COMMAND" == "post_identifier" ] || [ "$NFS_COMMAND" == "list" ] || [ "$NFS_COMMAND" == "auth" ] || [ "$NFS_COMMAND" == "post_sync_progress" ] || [ "$NFS_COMMAND" == "post_sync_finished" ]; then
	htvcenter_unblock_starting_queue $@
	NON_BLOCKING=true
fi

export htvcenter_SOURCE_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/"
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-package-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/nfs-storage/include/htvcenter-plugin-nfs-storage-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/nfs-storage/etc/htvcenter-plugin-nfs-storage.conf
htvcenter_POSTENCODE="$htvcenter_SERVER_BASE_DIR/htvcenter/sbin/htvcenter-postencode"
if [ -f $htvcenter_RESOURCE_PARAMETER_FILE ]; then
	. $htvcenter_RESOURCE_PARAMETER_FILE
	htvcenter_SERVER_IP=$resource_htvcenterserver
	htvcenter_EXEC_PORT=$resource_execdport
elif [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf ]; then
	. $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf
	. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-server-functions
	htvcenter_server_get_config
	htvcenter_SERVER_IP=$htvcenter_SERVER_IP_ADDRESS
	resource_id=0
	resource_htvcenterserver=$htvcenter_SERVER_IP_ADDRESS
	htvcenter_web_protocol=$htvcenter_WEB_PROTOCOL
fi
export LANG=C
# how long to wait for the volume authentication, each loop is 5 secs
MAX_VOLUME_AUTHENTICATION_LOOP=300
export MAX_VOLUME_AUTHENTICATION_LOOP
# dir for progress stats
SYNC_PROGRESS_DIR="/tmp"

# define wget to use with https
if [ "$htvcenter_web_protocol" == "https" ]; then
	WGET_NO_CERT_CHECK="--no-check-certificate"
fi
# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

if [ ! -d "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY" ]; then
	mkdir -p $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY
fi

# make sure required deps are installed
if ! check_nfs_storage_deps; then
	if [ "$NON_BLOCKING" != "true" ]; then
		htvcenter_unblock_starting_queue $@
	fi
	exit 1
fi

function nfs_storage_usage() {
	echo "Usage : $0 add/remove/clone|snap/list <-n image-name>"
	echo "             [-s image-snapshot-name]"
	echo "        $0 auth <-r image-rootdevice> <-i ip-address>"
	echo "        $0 adapt <-n image-name> <-u username> <-p password>"
	echo "        $0 post_exports <-u username> <-p password>"
	echo "        $0 post_identifier <-u username> <-p password>"
	echo "        $0 post_sync_progress <-n image-name> <-u username> <-p password>"
	echo "        $0 post_sync_finished <-n image-name> <-u username> <-p password>"
	echo ""
	echo "Optional parameters:"
	echo "             [--htvcenter-ui-user <username>]"
	echo "             [--htvcenter-internal-cmd <true/false>]"
	echo "             [--htvcenter-cmd-mode <regular/background/fork>]"
	exit 1
}


FULL_COMMANDLINE="$0 $@"
NFS_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			NFS_IMAGE_NAME=$2
			shift
			;;
		-s)
			NFS_IMAGE_SNAPSHOT_NAME=$2
			shift
			;;
		-i)
			NFS_IMAGE_AUTH_IP=$2
			shift
			;;
		-r)
			NFS_IMAGE_ROOTDEVICE=$2
			shift
			;;
		-t)
			NFS_IMAGE_TYPE=$2
			shift
			;;
		-u)
			NFS_htvcenter_USERNAME=$2
			shift
			;;
		-p)
			NFS_htvcenter_PASSWORD=$2
			shift
			;;
		--htvcenter-ui-user)
			htvcenter_UI_USER=$2
			shift
			;;
		--htvcenter-internal-cmd)
			htvcenter_INTERNAL_CMD=$2
			shift
			;;
		--htvcenter-cmd-mode)
			htvcenter_CMD_MODE=$2
			shift
			;;

		*)
			if [ "$NON_BLOCKING" != "true" ]; then
				htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			fi
			echo "ERROR: Free commandline arguments are not allowed"
			nfs_storage_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$NFS_COMMAND" == "" ]; then
	htvcenter_unblock_starting_queue $FULL_COMMANDLINE
	nfs_storage_usage
fi

if [ "$NFS_COMMAND" == "post_exports" ]  || [ "$NFS_COMMAND" == "post_identifier" ]; then
	if [ "$NFS_htvcenter_USERNAME" == "" ]; then
		nfs_storage_usage
	fi
	if [ "$NFS_htvcenter_PASSWORD" == "" ]; then
		nfs_storage_usage
	fi
else
	if [ "$NFS_COMMAND" != "list" ] && [ "$NFS_COMMAND" != "auth" ]; then
		if [ "$NFS_IMAGE_NAME" == "" ]; then
			if [ "$NON_BLOCKING" != "true" ]; then
				htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			fi
			nfs_storage_usage
		fi
	fi
fi
if [ "$htvcenter_UI_USER" != "" ]; then
	htvcenter_UI_USER_PARAMETER=" --htvcenter-ui-user $htvcenter_UI_USER"
fi

case "$NFS_COMMAND" in 

	add)
		if [ -d "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME" ]; then
			htvcenter_post_event 0 "add" 3 "nfs-storage" "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME already exists."
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire nfs-storage`
		trap "htvcenter_lock_queue release nfs-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		htvcenter_post_event 0 "add" 5 "nfs-storage" "Creating NFS export for image $NFS_IMAGE_NAME."

		# add to exports
		manage_nfs add $htvcenter_SERVER_IP

		htvcenter_lock_queue release nfs-storage $LOCK_TIME
		trap '' EXIT

		# in case we have a username + password post the updated list to the htvcenter-server
		if [ "$NFS_htvcenter_USERNAME" != "" ] && [ "$NFS_htvcenter_PASSWORD" != "" ]; then
			$0 post_exports -u $NFS_htvcenter_USERNAME -p $NFS_htvcenter_PASSWORD --htvcenter-internal-cmd true
		fi
		;;

	remove)
		# check that source fs-images exist
		if [ ! -d "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME" ]; then
			htvcenter_post_event 0 "remove" 3 "nfs-storage" "Volume $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME does not exists!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi
		# check that it is not in use by a syncing action
		if ls $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/.sync_in_progress.* 1>/dev/null 2>&1; then
			htvcenter_post_event 0 "remove" 3 "nfs-storage" "Volume $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME is currently in use by a sync action!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi
		if [ -f "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/.clone_in_progress" ]; then
			htvcenter_post_event 0 "remove" 3 "nfs-storage" "Volume $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME is currently in use by a clone action!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire nfs-storage`
		trap "htvcenter_lock_queue release nfs-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		htvcenter_post_event 0 "add" 5 "nfs-storage" "Removing NFS export for image $NFS_IMAGE_NAME."

		manage_nfs remove

		htvcenter_lock_queue release nfs-storage $LOCK_TIME
		trap '' EXIT

		if [ "$NFS_htvcenter_USERNAME" != "" ] && [ "$NFS_htvcenter_PASSWORD" != "" ]; then
			$0 post_exports -u $NFS_htvcenter_USERNAME -p $NFS_htvcenter_PASSWORD --htvcenter-internal-cmd true
		fi
		;;

	clone|snap)
		if [ "$NFS_IMAGE_SNAPSHOT_NAME" == "" ]; then
			htvcenter_post_event 0 "clone" 3 "nfs-storage" "No snapshot name given. Please use the -s cmdline parameter."
			nfs_storage_usage
		fi
		# check that source fs-images exist
		if [ ! -d "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME" ]; then
			htvcenter_post_event 0 "clone" 3 "nfs-storage" "Source volume $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME does not exists!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi
		if [ -f "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_SNAPSHOT_NAME/.clone_in_progress" ]; then
			htvcenter_post_event 0 "clone" 3 "nfs-storage" "There is already an active cloning action running for snapshot $NFS_IMAGE_SNAPSHOT_NAME!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi
		if [ -d "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_SNAPSHOT_NAME" ]; then
			htvcenter_post_event 0 "clone" 3 "nfs-storage" "Snapshot $NFS_IMAGE_SNAPSHOT_NAME already exists!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire nfs-storage`
		trap "htvcenter_lock_queue release nfs-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		htvcenter_post_event 0 "add" 5 "nfs-storage" "Creating snapshot from image $NFS_IMAGE_NAME -> $NFS_IMAGE_SNAPSHOT_NAME."
		mkdir -p "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_SNAPSHOT_NAME"
		# create lock in the origin for clone so remove is not able to remove the origin while syncing
		touch "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/.sync_in_progress.$NFS_IMAGE_SNAPSHOT_NAME"
		# create long-term-action start event
		htvcenter_post_event 0 "$NFS_IMAGE_SNAPSHOT_NAME" 9 "nfs-storage" "Started to clone $NFS_IMAGE_SNAPSHOT_NAME from $NFS_IMAGE_NAME"

		export ORG_IMAGE_NAME=$NFS_IMAGE_NAME
		export NFS_IMAGE_NAME=$NFS_IMAGE_SNAPSHOT_NAME
		manage_nfs add $htvcenter_SERVER_IP
		# create a lock in the new created dir for post_exports + identifier
		touch "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/.clone_in_progress"

		htvcenter_lock_queue release nfs-storage $LOCK_TIME
		trap '' EXIT

		# get a list of files to sync
		rsync -a -vv --list-only --progress --exclude="/.sync_in_progress.*" $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$ORG_IMAGE_NAME/* $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/ > $SYNC_PROGRESS_DIR/rsync_files.$NFS_IMAGE_NAME.log
		> $SYNC_PROGRESS_DIR/rsync_progress.$NFS_IMAGE_NAME.log
		# post exports early, we show the progress in the ui
		if [ "$NFS_htvcenter_USERNAME" != "" ] && [ "$NFS_htvcenter_PASSWORD" != "" ]; then
			$0 post_sync_progress -n $NFS_IMAGE_NAME -u $NFS_htvcenter_USERNAME -p $NFS_htvcenter_PASSWORD --htvcenter-internal-cmd true &
		fi
		# delay start syncing
		sleep 10
		rsync -a --progress --exclude="/.sync_in_progress.*" $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$ORG_IMAGE_NAME/* $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/ > $SYNC_PROGRESS_DIR/rsync_progress.$NFS_IMAGE_NAME.log

		# remove lock from the origin + snapshot
		rm -f "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$ORG_IMAGE_NAME/.sync_in_progress.$NFS_IMAGE_NAME"
		rm -f "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/.clone_in_progress"

		# stop sync-progress monitor and send sync-finished to htvcenter
		rm -f $SYNC_PROGRESS_DIR/rsync_progress.$NFS_IMAGE_NAME.log $SYNC_PROGRESS_DIR/rsync_files.$NFS_IMAGE_NAME.log
		$0 post_sync_finished -n $NFS_IMAGE_NAME -u $NFS_htvcenter_USERNAME -p $NFS_htvcenter_PASSWORD --htvcenter-internal-cmd true
		# create long-term-action finished event
		htvcenter_post_event 0 "$NFS_IMAGE_SNAPSHOT_NAME" 10 "nfs-storage" "Finished to clone $NFS_IMAGE_SNAPSHOT_NAME"
		;;

	auth)
		if [ "$NFS_IMAGE_ROOTDEVICE" == "" ]; then
			NFS_IMAGE_ROOTDEVICE="$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME"
		fi
		echo -n "Authenticating NFS export $NFS_IMAGE_ROOTDEVICE to $NFS_IMAGE_AUTH_IP"
		if [ "$NFS_htvcenter_USERNAME" != "" ] && [ "$NFS_htvcenter_PASSWORD" != "" ] && [ "$NFS_IMAGE_NAME" != "" ]; then
			MAX_AUTH_LOOP=0
			while (true); do
				# if this is a snapshot volume we have to wait until the sync is ready
				if [ -d "$NFS_IMAGE_ROOTDEVICE" ] && [ ! -f "$NFS_IMAGE_ROOTDEVICE/.clone_in_progress" ]; then
					# sync is ready
					break
				fi
				sleep 5
				if [ "$MAX_AUTH_LOOP" == "$MAX_VOLUME_AUTHENTICATION_LOOP" ]; then
					htvcenter_post_event 0 "auth" 3 "nfs-storage" "Volume $NFS_IMAGE_ROOTDEVICE does not exists, Cannot auth to $NFS_IMAGE_AUTH_IP."
					exit 1
				fi
				MAX_AUTH_LOOP=$(( MAX_AUTH_LOOP + 1 ))
			done
		fi
		# auth in exports
		LOCK_TIME=`htvcenter_lock_queue aquire nfs-storage`
		trap "htvcenter_lock_queue release nfs-storage $LOCK_TIME" EXIT

		manage_nfs auth $NFS_IMAGE_AUTH_IP

		htvcenter_lock_queue release nfs-storage $LOCK_TIME
		trap '' EXIT
		# if we have an image name send back to htvcenter that storage auth finished to remvoe the storage-auth-blocker
		if [ "$NFS_htvcenter_USERNAME" != "" ] && [ "$NFS_htvcenter_PASSWORD" != "" ] && [ "$NFS_IMAGE_NAME" != "" ]; then
			if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$NFS_htvcenter_USERNAME --http-password=$NFS_htvcenter_PASSWORD "$htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/nfs-storage/nfs-storage-action.php?nfs_storage_command=auth_finished&nfs_image_name=$NFS_IMAGE_NAME"; then
				htvcenter_post_event 0 "auth" 3 "nfs-storage" "Could not remove the storage-auth-blocker from htvcenter at $htvcenter_SERVER_IP."
			fi
			# post exports again
			$0 post_exports -u $NFS_htvcenter_USERNAME -p $NFS_htvcenter_PASSWORD --htvcenter-internal-cmd true
		fi
		;;

	adapt)
		if [ ! -d "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME" ]; then
			htvcenter_post_event 0 "adapt" 3 "nfs-storage" "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME does not exist."
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire nfs-storage`
		trap "htvcenter_lock_queue release nfs-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		# add to exports
		manage_nfs adapt $htvcenter_SERVER_IP

		htvcenter_lock_queue release nfs-storage $LOCK_TIME
		trap '' EXIT

		STORAGE_STATUS_TMP=$resource_id.nfs.$NFS_IMAGE_NAME.adapt
		> $STORAGE_STATUS_TMP
		echo "$IMAGE_NAME,$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME" >> $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$NFS_htvcenter_USERNAME --http-password=$NFS_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/nfs-storage/nfs-storage-action.php?nfs_storage_command=get_ident; then
			htvcenter_post_event 0 "adapt" 3 "nfs-storage" "Could not post the nfs-export identifier to htvcenter at $htvcenter_SERVER_IP."
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post

		;;

	list)
		ls $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY
		;;
	post_exports)
		BACKEND_DIR_AVAIL_SPACE=`df --block-size MB $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY | grep -v Used | awk '{ print $2 }' | sed -e "s/MB//g"`
		BACKEND_DIR_FREE_SPACE=`df --block-size MB $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY | grep -v Used | awk '{ print $4 }' | sed -e "s/MB//g"`
		STORAGE_STATUS_TMP=$resource_id.nfs.stat
		# send avail + free as first line, all next lines are luns
		echo "$BACKEND_DIR_AVAIL_SPACE""@""$BACKEND_DIR_FREE_SPACE" > $STORAGE_STATUS_TMP
		for VOLUME in `ls  $htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY`; do
			if grep -w ^$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$VOLUME /var/lib/nfs/etab 1>/dev/null; then
				AUTHENTICATED=`grep -w ^$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$VOLUME /var/lib/nfs/etab  | awk '{ print $2 }' | cut -d'(' -f1`
				if [ -f "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$VOLUME/.clone_in_progress" ]; then
					echo "nfs-deployment""@""$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$VOLUME""@""$AUTHENTICATED""@""clone_in_progress" >> $STORAGE_STATUS_TMP
				else
					echo "nfs-deployment""@""$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$VOLUME""@""$AUTHENTICATED""@" >> $STORAGE_STATUS_TMP
				fi
			else
					echo "@""$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$VOLUME""@@" >> $STORAGE_STATUS_TMP
			fi
		done
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$NFS_htvcenter_USERNAME --http-password=$NFS_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/nfs-storage/nfs-storage-action.php?nfs_storage_command=get_storage; then
			htvcenter_post_event 0 "post_exports" 3 "nfs-storage" "Could not post the nfs-export status to htvcenter at $htvcenter_SERVER_IP."
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;
	post_identifier)
		echo "Posting current nfs-identifier to the htvcenter-server"
		STORAGE_STATUS_TMP=$resource_id.nfs.ident
		> $STORAGE_STATUS_TMP
		for IMAGE_NAME_EXPORT in `cat /var/lib/nfs/etab | grep ^$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY | awk {' print $1 '} | sed -e "s/<.*>//g" | sed -e "s/(.*)//g"`; do
			if [ ! -f "$IMAGE_NAME_EXPORT/.clone_in_progress" ]; then
				IMAGE_NAME=`basename $IMAGE_NAME_EXPORT`
				echo "$IMAGE_NAME,$IMAGE_NAME_EXPORT" >> $STORAGE_STATUS_TMP
			fi
		done
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$NFS_htvcenter_USERNAME --http-password=$NFS_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/nfs-storage/nfs-storage-action.php?nfs_storage_command=get_ident; then
			htvcenter_post_event 0 "post_identifier" 3 "nfs-storage" "Could not post the nfs-export identifier to htvcenter at $htvcenter_SERVER_IP."
		fi
		rm -f $STORAGE_STATUS_TMP
		rm -f $STORAGE_STATUS_TMP.post
		;;

	post_sync_progress)
		echo "Posting progress of the sync action for volume $NFS_IMAGE_NAME to the htvcenter-server"
		if [ ! -f "$SYNC_PROGRESS_DIR/rsync_files.$NFS_IMAGE_NAME.log" ] || [ ! -f "$SYNC_PROGRESS_DIR/rsync_progress.$NFS_IMAGE_NAME.log" ]; then
			htvcenter_post_event 0 "clone" 3 "nfs-storage" "No sync action active for volume $NFS_IMAGE_NAME!"
			exit 1
		fi
		STORAGE_STATUS_TMP=$resource_id.nfs.$NFS_IMAGE_NAME.sync_progress

		while (true); do
			# if this is a snapshot volume we have to wait until the sync is ready
			if [ -d "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/" ] && [ ! -f "$htvcenter_NFS_STORAGE_SERVER_IMAGE_DIRECTORY/$NFS_IMAGE_NAME/.clone_in_progress" ]; then
				# sync is ready
				break
			else
				if [ ! -f "$SYNC_PROGRESS_DIR/rsync_files.$NFS_IMAGE_NAME.log" ] || [ ! -f "$SYNC_PROGRESS_DIR/rsync_progress.$NFS_IMAGE_NAME.log" ]; then
				    # cloning not started yet, waiting for the snapshot to appear
				    echo "0" > $STORAGE_STATUS_TMP
				else
				    # get the size of all changes
				    COMPLETE_CHANGE_SIZE=`cat $SYNC_PROGRESS_DIR/rsync_files.$NFS_IMAGE_NAME.log | wc -l`
				    # double up to get around 100 percent
				    COMPLETE_CHANGE_SIZE=$(( COMPLETE_CHANGE_SIZE * 2 ))
				    PARTITIAL_CHANGE_SIZE=`cat $SYNC_PROGRESS_DIR/rsync_progress.$NFS_IMAGE_NAME.log | wc -l`
				    if [ "$PARTITIAL_CHANGE_SIZE" == 0 ]; then
					    PARTITIAL_CHANGE_SIZE=1
				    fi
				    CURRENT_SYNC_PROGRESS_IN_PERCENT=$(( COMPLETE_CHANGE_SIZE / PARTITIAL_CHANGE_SIZE ))
				    CURRENT_SYNC_PROGRESS_IN_PERCENT=$(( 100 / CURRENT_SYNC_PROGRESS_IN_PERCENT ))
				    # make sure to not send 100%, this is send by clone finished
				    CURRENT_SYNC_PROGRESS_IN_PERCENT=$(( CURRENT_SYNC_PROGRESS_IN_PERCENT - 1 ))
					if (( $CURRENT_SYNC_PROGRESS_IN_PERCENT < 0 )); then
						CURRENT_SYNC_PROGRESS_IN_PERCENT=0
					fi
				    echo "$CURRENT_SYNC_PROGRESS_IN_PERCENT" > $STORAGE_STATUS_TMP
				fi
				if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$NFS_htvcenter_USERNAME --http-password=$NFS_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/nfs-storage/nfs-storage-action.php?nfs_storage_command=get_sync_progress; then
					nfs_storage_log "post_sync_progress" "Could not post the sync progress for volume $NFS_IMAGE_NAME to htvcenter at $htvcenter_SERVER_IP."
				fi
				rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
			fi
			sleep 2
		done
		;;


	post_sync_finished)
		echo "Posting finished for volume $NFS_IMAGE_NAME to the htvcenter-server"
		STORAGE_STATUS_TMP=$resource_id.nfs.$NFS_IMAGE_NAME.sync_progress
		echo "100" > $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$NFS_htvcenter_USERNAME --http-password=$NFS_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/nfs-storage/nfs-storage-action.php?nfs_storage_command=get_sync_finished; then
			nfs_storage_log "post_sync_finished" "Could not post the sync progress for volume $NFS_IMAGE_NAME to htvcenter at $htvcenter_SERVER_IP."
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
		;;



	*)
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE
		nfs_storage_usage
		;;


esac

