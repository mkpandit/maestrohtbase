#!/bin/bash
# this is the functions file for the sanboot-storage-plugin
#
# htvcenter Enterprise developed by htvcenter Enterprise GmbH.
#
# All source code and content (c) Copyright 2014, htvcenter Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the htvcenter Enterprise Server and Client License, unless otherwise agreed with htvcenter Enterprise GmbH.
# The latest version of this license can be found here: http://htvcenter-enterprise.com/license
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://htvcenter-enterprise.com
#
# Copyright 2014, htvcenter Enterprise GmbH <info@htvcenter-enterprise.com>
#


# iscsi-target config file
IETDCONF=`find /etc/ -name ietd.conf -type f | head -n1`
# vblade config file
VBLADECONF=/etc/vblade.conf
# some definitions
DEFAULT_IMAGE_SIZE=5000
MAX_UMOUNT_LOOP=5
LV_SIZE_DEFAULT=5000
ISCSI_TARGET_URL=http://iscsitarget.sourceforge.net/
AOE_AUTHENTICATED_MAC="00:00:00:00:00:00"
IMAGE_LUN=0
# which screen binary to use
if [ -x /usr/bin/screen.real ]; then
	RUNSCREEN="/usr/bin/screen.real"
else
	RUNSCREEN=`which screen`
fi

################ common sanboot-storage functions

# logs for sanboot_storage
function sanboot_storage_log() {
	local COMPONENT=$1
	shift
	local MESSAGE=$@
	logger -i -t "sanboot-storage plug-in" "$COMPONENT : $MESSAGE"
}


################ sanboot-storage functions

# deps function
function check_sanboot_storage_deps() {
	# check and fullfill dependencies
	# screen
	if ! htvcenter_full_fill_os_dependency screen screen; then
		return 1
	fi
	if [ -x /usr/bin/screen.real ]; then
		export RUNSCREEN="/usr/bin/screen.real"
	else
		export RUNSCREEN=`which screen`
	fi
	# wget
	if ! htvcenter_full_fill_os_dependency wget wget; then
		return 1
	fi
	# procmail for lockfile
	if ! htvcenter_full_fill_os_dependency lockfile procmail; then
		return 1
	fi
	if ! htvcenter_full_fill_os_dependency vbladed vblade; then
		return 1
	fi
	if ! htvcenter_full_fill_os_dependency aoe-discover aoetools; then
		return 1
	fi
	# resize2fs
	if ! htvcenter_full_fill_os_dependency resize2fs e2fsprogs; then
		return 1
	fi
	# kpartx
	if ! htvcenter_full_fill_os_dependency kpartx kpartx; then
		return 1
	fi
	# lvm2
	if ! htvcenter_full_fill_os_dependency lvs lvm2; then
		return 1
	fi

	if [ -f /etc/debian_version ]; then
		# open-iscsi
		if ! htvcenter_full_fill_os_dependency iscsid open-iscsi; then
			return 1
		fi
		# open-iscsi-utils
		if ! htvcenter_full_fill_os_dependency iscsiadm open-iscsi-utils; then
			return 1
		fi
		if ! htvcenter_full_fill_os_dependency ietd iscsitarget; then
			return 1
		fi
		# ietd - needs dkms package on debian/ubuntu
		if ! htvcenter_full_fill_os_dependency ietd iscsitarget-dkms; then
			return 1
		fi
# TODO check for Ubuntu >= 13.04 - package name ntfs-3g

		if ! htvcenter_full_fill_os_dependency ntfsresize ntfsprogs; then
			return 1
		fi
	elif [ -f /etc/redhat-release ]; then
		# iscsi-initiator-utils
		if ! htvcenter_full_fill_os_dependency iscsid iscsi-initiator-utils; then
			return 1
		fi
		# ietd
		if ! htvcenter_full_fill_os_dependency ietd iscsitarget; then
			return 1
		fi
		# ntfsprogs
		if ! htvcenter_full_fill_os_dependency ntfsresize ntfsprogs; then
			return 1
		fi

	elif [ -f /etc/SuSE-release ]; then
		# open-iscsi
		if ! htvcenter_full_fill_os_dependency iscsid open-iscsi; then
			return 1
		fi
		# ietd
		if ! htvcenter_full_fill_os_dependency ietd iscsitarget; then
			return 1
		fi
		# ntfsprogs
		if ! htvcenter_full_fill_os_dependency ntfsresize ntfsprogs; then
			exit 1
		fi

	fi

}



################ sanboot-iscsi ###################################



function manage_iscsi() {

	case "$1" in
		add)
			IMAGE_PASS=$3
			echo "Target $SANBOOT_IMAGE_NAME:$SANBOOT_IMAGE_NAME" >> $IETDCONF
			# echo "	IncomingUser $SANBOOT_IMAGE_NAME $IMAGE_PASS" >> $IETDCONF
			echo "	Lun $IMAGE_LUN Path=/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME,Type=fileio" >> $IETDCONF
			LAST_TID=`grep tid: /proc/net/iet/volume | cut -d':' -f2 | awk {' print $1 '} | sort -g | tail -n1`
			NEW_TID=$(( $LAST_TID + 1 ))
			# dynamically add new target
			if ! ietadm --op new --tid=$NEW_TID --params Name=$SANBOOT_IMAGE_NAME:$SANBOOT_IMAGE_NAME; then
				sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not create new target !"
				sanboot_storage_lock release
				return 1
			fi
			# set path to sanboot device in the new target
			if ! ietadm --op new --tid=$NEW_TID --lun=$IMAGE_LUN --params Path=/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME; then
				sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not set sanboot-path in new target !"
				sanboot_storage_lock release
				return 1
			fi
			# auth target
			#if ! ietadm --op new --tid=$NEW_TID --user --params IncomingUser=$SANBOOT_IMAGE_NAME,Password=$IMAGE_PASS; then
			#	sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not set username/password in new target !"
			#	sanboot_storage_lock release
			#	return 1
			#else
			#	sanboot_storage_log sanboot-storage-functions "sanboot-iscsi created new target $SANBOOT_IMAGE_NAME !"
			#fi
			;;
		remove)
			# remove from config file
			cat $IETDCONF | grep -v -w $SANBOOT_IMAGE_NAME > $IETDCONF.tmp
			mv -f $IETDCONF.tmp $IETDCONF
			sed -i '/^$/d' $IETDCONF
			TID_TO_REMOVE=`cat /proc/net/iet/volume | grep "name:$SANBOOT_IMAGE_NAME:$SANBOOT_IMAGE_NAME$" | cut -d':' -f2 | awk {' print $1 '}`
			OPEN_SESSION=`cat /proc/net/iet/session | grep -w ^tid:$TID_TO_REMOVE -A1 | grep sid: | cut -d':' -f2 | awk {' print $1 '}`
			if [ "$OPEN_SESSION" != "" ]; then
				# first remove active session (does not support multiple sessions yet)
				if ! ietadm --op delete --tid=$TID_TO_REMOVE --sid=$OPEN_SESSION --cid=0; then
					sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not remove session $OPEN_SESSION for tid $TID_TO_REMOVE !"
					sanboot_storage_lock release
					return 1
				else
					sanboot_storage_log sanboot-storage-functions "sanboot-iscsi removed session $OPEN_SESSION for tid $TID_TO_REMOVE !"
				fi
			fi
			# remove lun
			if ! ietadm --op delete --tid=$TID_TO_REMOVE --lun=$IMAGE_LUN; then
				sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not remove lun $IMAGE_LUN for tid $TID_TO_REMOVE !"
				sanboot_storage_lock release
				return 1
			fi
			# remove target dynamically
			if ! ietadm --op delete --tid=$TID_TO_REMOVE; then
				sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not remove target tid $TID_TO_REMOVE !"
				sanboot_storage_lock release
				return 1
			else
				sanboot_storage_log sanboot-storage-functions "sanboot-iscsi removed target tid $TID_TO_REMOVE !"
			fi
			;;
		auth)
			IMAGE_PASS=$2
			IMAGE_AUTHNAME=`echo $SANBOOT_IMAGE_ROOTDEVICE | cut -d'/' -f3`
			#sed -i -e "s#IncomingUser $IMAGE_AUTHNAME .*#IncomingUser $IMAGE_AUTHNAME $IMAGE_PASS#g" $IETDCONF
			#sed -i '/^$/d' $IETDCONF
			#TID_TO_AUTH=`cat /proc/net/iet/volume | grep "name:$IMAGE_AUTHNAME$" | cut -d':' -f2 | awk {' print $1 '}`
			#if [ "$TID_TO_AUTH" == "" ]; then
			#	sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not find target $IMAGE_AUTHNAME to update the authentication !"
			#	sanboot_storage_lock release
			#	return 1
			#fi
			#if ! ietadm --op new --tid=$TID_TO_AUTH --user --params IncomingUser=$IMAGE_AUTHNAME,Password=$IMAGE_PASS; then
			#	sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not find target $IMAGE_AUTHNAME to update the authentication !"
			#	sanboot_storage_lock release
			#	return 1
			#else
			#	sanboot_storage_log sanboot-storage-functions "sanboot-iscsi updated the authentication for target $IMAGE_AUTHNAME !"
			#fi
			;;

		adapt)
			IMAGE_PASS=$2
			if [ "$IMAGE_PASS" == "" ]; then
			    IMAGE_PASS=`cat /dev/urandom|tr -dc "a-zA-Z0-9-_\$\?"|fold -w 9|head -n1`
			fi
			if ! grep -w "/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME" $IETDCONF 1>/dev/null; then
				echo "Target $SANBOOT_IMAGE_NAME:$SANBOOT_IMAGE_NAME" >> $IETDCONF
				# echo "	IncomingUser $SANBOOT_IMAGE_NAME $IMAGE_PASS" >> $IETDCONF
				echo "	Lun $IMAGE_LUN Path=/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME,Type=fileio" >> $IETDCONF
				LAST_TID=`grep tid: /proc/net/iet/volume | cut -d':' -f2 | awk {' print $1 '} | sort -g | tail -n1`
				NEW_TID=$(( $LAST_TID + 1 ))
				# dynamically add new target
				if ! ietadm --op new --tid=$NEW_TID --params Name=$SANBOOT_IMAGE_NAME:$SANBOOT_IMAGE_NAME; then
					sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not create new target !"
					sanboot_storage_lock release
					return 1
				fi
				# set path to sanboot device in the new target
				if ! ietadm --op new --tid=$NEW_TID --lun=$IMAGE_LUN --params Path=/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME; then
					sanboot_storage_log sanboot-storage-functions "ERROR: sanboot-iscsi could not set sanboot-path in new target !"
					sanboot_storage_lock release
					return 1
				fi
			fi
			;;

	esac
}




################ sanboot-aoe ###################################



function manage_vblade() {

	if [ ! -f $VBLADECONF ]; then
		mkdir -p `dirname $VBLADECONF`
		echo "# this is the vblade configuration file created by htvcenter" > $VBLADECONF
		echo "" >> $VBLADECONF
	fi
	if [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf ]; then
		. $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf
		AOE_INTERFACE=$htvcenter_SERVER_INTERFACE
	else
		. /var/htvcenter/htvcenter-resource.conf
		AOE_INTERFACE=`ifconfig | grep -i $resource_mac | awk {' print $1 '} | tail -1`
	fi

	case "$1" in
		add)
			# slots are dynamic
			FOUND=0
			for (( AOE_SHELF=0; $AOE_SHELF<15; AOE_SHELF = $AOE_SHELF + 1)) ; do
				for (( AOE_SLOT=1; $AOE_SLOT<=15; AOE_SLOT = $AOE_SLOT + 1)) ; do
					TEST=`cat $VBLADECONF | grep -v '^#' | awk {' print $2" "$3 '} | grep $AOE_SHELF" "$AOE_SLOT`
					STATUS=$?
					if [ $STATUS -eq 1 ]; then
						FOUND=1
						break;
					fi
				done
				if [ $STATUS -eq 1 ]; then
					break;
				fi
			done
			echo "$AOE_INTERFACE $AOE_SHELF $AOE_SLOT /dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME $AOE_AUTHENTICATED_MAC" >> $VBLADECONF
			sed -i '/^$/d' $VBLADECONF
			# start vbladed
			SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
			$RUNSCREEN -dmS $SCREEN_NAME vblade -m $AOE_AUTHENTICATED_MAC $AOE_SHELF $AOE_SLOT $AOE_INTERFACE /dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME
			;;
		auth)
			AUTHENTICATED_MAC=$2
			AOE_SLOT=`echo $SANBOOT_IMAGE_ROOTDEVICE | cut -d'.' -f2`
			AOE_SHELF=`echo $SANBOOT_IMAGE_ROOTDEVICE | cut -d'.' -f1 | sed -e "s#/dev/etherd/e##g"`
			if grep "$AOE_SHELF $AOE_SLOT" $VBLADECONF 1>/dev/null; then
				AOE_INTERFACE=`cat $VBLADECONF | grep -v "#" | grep "$AOE_SHELF $AOE_SLOT" | awk {' print $1'}`
				AOE_IMAGE_ROOTDEVICE_PATH=`cat $VBLADECONF | grep "$AOE_SHELF $AOE_SLOT" | awk {' print $4 '}`
				sed -i -e "s#$AOE_IMAGE_ROOTDEVICE_PATH .*#$AOE_IMAGE_ROOTDEVICE_PATH $AUTHENTICATED_MAC#g" $VBLADECONF
				sed -i '/^$/d' $VBLADECONF
				for VBLADE_PID in `ps ax | grep vblade | grep -w $AOE_IMAGE_ROOTDEVICE_PATH | awk {' print $1 '}`; do
					kill $VBLADE_PID
				done
				sync
				# start vbladed
				SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
				$RUNSCREEN -dmS $SCREEN_NAME vblade -m $AUTHENTICATED_MAC $AOE_SHELF $AOE_SLOT $AOE_INTERFACE $AOE_IMAGE_ROOTDEVICE_PATH
			fi
			;;
		remove)
			for VBLADE_PID in `ps ax | grep vblade | grep -w $SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME | awk {' print $1 '}`; do
				kill $VBLADE_PID
			done
			sync
			sed -i -e "s#.*$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME .*##g" $VBLADECONF
			sed -i '/^$/d' $VBLADECONF
			;;

		adapt)
			if ! grep -w "/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME" $VBLADECONF 1>/dev/null; then
				# slots are dynamic
				FOUND=0
				for (( AOE_SHELF=0; $AOE_SHELF<15; AOE_SHELF = $AOE_SHELF + 1)) ; do
					for (( AOE_SLOT=1; $AOE_SLOT<=15; AOE_SLOT = $AOE_SLOT + 1)) ; do
						TEST=`cat $VBLADECONF | grep -v '^#' | awk {' print $2" "$3 '} | grep $AOE_SHELF" "$AOE_SLOT`
						STATUS=$?
						if [ $STATUS -eq 1 ]; then
							FOUND=1
							break;
						fi
					done
					if [ $STATUS -eq 1 ]; then
						break;
					fi
				done
				echo "$AOE_INTERFACE $AOE_SHELF $AOE_SLOT /dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME $AOE_AUTHENTICATED_MAC" >> $VBLADECONF
				sed -i '/^$/d' $VBLADECONF
				# start vbladed
				SCREEN_NAME=`date +%T%x | sed -e "s/://g" | sed -e "s#/##g"`
				$RUNSCREEN -dmS $SCREEN_NAME vblade -m $AOE_AUTHENTICATED_MAC $AOE_SHELF $AOE_SLOT $AOE_INTERFACE /dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME
			fi
			;;

	esac
}










