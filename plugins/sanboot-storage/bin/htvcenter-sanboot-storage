#!/bin/bash
# this script automatically manages aoe and iscsi sanboot
#
# htvcenter Enterprise developed by htvcenter Enterprise GmbH.
#
# All source code and content (c) Copyright 2014, htvcenter Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the htvcenter Enterprise Server and Client License, unless otherwise agreed with htvcenter Enterprise GmbH.
# The latest version of this license can be found here: http://htvcenter-enterprise.com/license
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://htvcenter-enterprise.com
#
# Copyright 2014, htvcenter Enterprise GmbH <info@htvcenter-enterprise.com>
#
htvcenter_SERVER_BASE_DIR=$(dirname $0)/../../../..
htvcenter_SERVER_BASE_DIR=$(pushd $htvcenter_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-functions
# unblock starting command queue early for non-blocking + ui commands
SANBOOT_COMMAND=$1
if [ "$SANBOOT_COMMAND" == "post_lv" ] || [ "$SANBOOT_COMMAND" == "post_vg" ] || [ "$SANBOOT_COMMAND" == "post_identifier" ] || [ "$SANBOOT_COMMAND" == "list" ] || [ "$SANBOOT_COMMAND" == "auth" ] || [ "$SANBOOT_COMMAND" == "post_sync_progress" ] || [ "$SANBOOT_COMMAND" == "post_sync_finished" ]; then
	htvcenter_unblock_starting_queue $@
	NON_BLOCKING=true
fi

export htvcenter_SOURCE_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/"
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-package-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/sanboot-storage/etc/htvcenter-plugin-sanboot-storage.conf
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/sanboot-storage/include/htvcenter-plugin-sanboot-storage-functions
htvcenter_POSTENCODE="$htvcenter_SERVER_BASE_DIR/htvcenter/sbin/htvcenter-postencode"
if [ -f $htvcenter_RESOURCE_PARAMETER_FILE ]; then
	. $htvcenter_RESOURCE_PARAMETER_FILE
	htvcenter_SERVER_IP=$resource_htvcenterserver
	htvcenter_EXEC_PORT=$resource_execdport
elif [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf ]; then
	. $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf
	. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-server-functions
	htvcenter_server_get_config
	htvcenter_SERVER_IP=$htvcenter_SERVER_IP_ADDRESS
	resource_id=0
	resource_htvcenterserver=$htvcenter_SERVER_IP_ADDRESS
	htvcenter_web_protocol=$htvcenter_WEB_PROTOCOL
fi
export LANG=C
LINEBR='
'
# define wget to use with https
if [ "$htvcenter_web_protocol" == "https" ]; then
	WGET_NO_CERT_CHECK="--no-check-certificate"
fi

# how long to wait for the volume authentication, each loop is 5 secs
MAX_VOLUME_AUTHENTICATION_LOOP=60
export MAX_VOLUME_AUTHENTICATION_LOOP
# dir for progress stats
SYNC_PROGRESS_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/sanboot-storage/lock"
if [ ! -d "$SYNC_PROGRESS_DIR" ]; then
	mkdir -p $SYNC_PROGRESS_DIR
fi


# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi
# make sure required deps are installed
if ! check_sanboot_storage_deps; then
	if [ "$NON_BLOCKING" != "true" ]; then
		htvcenter_unblock_starting_queue $@
	fi
	exit 1
fi


function sanboot_storage_usage() {
	echo "Usage : $0 add/remove/snap/list/resize/clone <-n image-name> <-v volume-group> <-t iscsi-san-deployment/aoe-san-deployment>"
	echo "             [-m size in MB]"
	echo "             [-s image-snapshot-name]"
	echo "             (for iscsi-san-deployment : <-i authidentifier>)"
	echo "        $0 auth <-r image-rootdevice> <-i authidentifier> <-t iscsi-san-deployment/aoe-san-deployment>"
	echo "        $0 adapt <-n image-name> <-v volume-group> <-t iscsi-san-deployment/aoe-san-deployment> <-u username> <-p password> [-i image-password]"
	echo "        $0 post_vg <-u username> <-p password>"
	echo "        $0 post_lv <-u username> <-p password> <-v volume-group>"
	echo "        $0 post_identifier <-t iscsi-san-deployment/aoe-san-deployment> <-u username> <-p password>"
	echo "        $0 post_sync_progress <-n image-name> <-s image-snapshot-name> <-v volume-group> <-t lvm-nfs-deployment/lvm-iscsi-deployment/lvm-aoe-deployment> <-u username> <-p password>"
	echo "        $0 post_sync_finished <-n image-name> <-v volume-group> <-t iscsi-san-deployment/aoe-san-deployment> <-u username> <-p password>"
	echo ""
	echo "Optional parameters:"
	echo "             [--htvcenter-ui-user <username>]"
	echo "             [--htvcenter-internal-cmd <true/false>]"
	echo "             [--htvcenter-cmd-mode <regular/background/fork>]"
	exit 1
}

function sanboot_storage_resize_fs() {
	local LVM_VOLUME=$1
	local VOLUME_SIZE=$2
	LVM_VOLUME_NAME=`basename $LVM_VOLUME`
	FIRST_PARTITION=`kpartx -av $LVM_VOLUME | awk '{ print $3 }' | head -n1`
	sleep 1
	if [ "$FIRST_PARTITION" != "" ] && [ -e /dev/mapper/$FIRST_PARTITION ]; then
			PARTITION_TYPE=`fdisk -l $LVM_VOLUME | grep ^$LVM_VOLUME | head -n1 | sed -e "s#\*##g" | awk '{ print $5 }'`
			case "$PARTITION_TYPE" in
					83)
						htvcenter_post_event 0 "$LVM_VOLUME" 9 "htvcenter-sanboot-storage" "Resizing Linux filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
						e2fsck -y /dev/mapper/$FIRST_PARTITION
						if resize2fs -f -p /dev/mapper/$FIRST_PARTITION $VOLUME_SIZE""M; then
							htvcenter_post_event 0 "$LVM_VOLUME" 10 "htvcenter-sanboot-storage" "Resizing Linux filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
							htvcenter_post_event 0 "snap" 5 "htvcenter-sanboot-storage" "Successfully resized volume $LVM_VOLUME to $VOLUME_SIZE MB."
						else
							htvcenter_post_event 0 "$LVM_VOLUME" 10 "htvcenter-sanboot-storage" "Resizing Linux filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
							if ! e2fsck -fy /dev/mapper/$FIRST_PARTITION; then
								htvcenter_post_event 0 "snap" 2 "htvcenter-sanboot-storage" "Errors during resizing volume $LVM_VOLUME."
							fi
						fi
						;;
					7)
						htvcenter_post_event 0 "$LVM_VOLUME" 9 "htvcenter-sanboot-storage" "Resizing Windows filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
						if ntfsresize -s $VOLUME_SIZE""M -b -f /dev/mapper/$FIRST_PARTITION; then
							htvcenter_post_event 0 "$LVM_VOLUME" 10 "htvcenter-sanboot-storage" "Resizing Windows filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
							htvcenter_post_event 0 "snap" 5 "htvcenter-sanboot-storage" "Successfully resized volume $LVM_VOLUME to $VOLUME_SIZE MB."
						else
							htvcenter_post_event 0 "$LVM_VOLUME" 10 "htvcenter-sanboot-storage" "Resizing Windows filesystem of volume $LVM_VOLUME to $VOLUME_SIZE MB."
							htvcenter_post_event 0 "snap" 2 "htvcenter-sanboot-storage" "Errors during resizing volume $LVM_VOLUME."
						fi
						;;
					*)
						htvcenter_post_event 0 "snap" 2 "htvcenter-sanboot-storage" "Could not find out filesystem type of volume $LVM_VOLUME. Not resizing."
						;;
			esac
	fi
	sleep 1
	kpartx -d $LVM_VOLUME
	sleep 1
	kpartx -dv $LVM_VOLUME
}


FULL_COMMANDLINE="$0 $@"
SANBOOT_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-n)
			SANBOOT_IMAGE_NAME=$2
			shift
			;;
		-m)
			SANBOOT_IMAGE_SIZE=$2
			shift
			;;
		-s)
			SANBOOT_IMAGE_SNAPSHOT_NAME=$2
			shift
			;;
		-t)
			SANBOOT_IMAGE_TYPE=$2
			shift
			;;
		-i)
			SANBOOT_IMAGE_AUTH=$2
			shift
			;;
		-r)
			SANBOOT_IMAGE_ROOTDEVICE=$2
			shift
			;;
		-u)
			SANBOOT_htvcenter_USERNAME=$2
			shift
			;;
		-p)
			SANBOOT_htvcenter_PASSWORD=$2
			shift
			;;
		-v)
			SANBOOT_STORAGE_SERVER_VOLUME_GROUP=$2
			shift
			;;
		--htvcenter-ui-user)
			htvcenter_UI_USER=$2
			shift
			;;
		--htvcenter-internal-cmd)
			htvcenter_INTERNAL_CMD=$2
			shift
			;;
		--htvcenter-cmd-mode)
			htvcenter_CMD_MODE=$2
			shift
			;;

		*)
			if [ "$NON_BLOCKING" != "true" ]; then
				htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			fi
			echo "ERROR: Free commandline arguments are not allowed"
			sanboot_storage_usage
			exit 6
			;;
	esac
	shift
done




# main
if [ "$SANBOOT_COMMAND" == "" ]; then
	htvcenter_unblock_starting_queue $FULL_COMMANDLINE
	sanboot_storage_usage
fi

if [ "$SANBOOT_COMMAND" == "post_lv" ] || [ "$SANBOOT_COMMAND" == "post_vg" ] || [ "$SANBOOT_COMMAND" == "post_identifier" ]; then
		if [ "$SANBOOT_htvcenter_USERNAME" == "" ]; then
			sanboot_storage_usage
		fi
		if [ "$SANBOOT_htvcenter_PASSWORD" == "" ]; then
			sanboot_storage_usage
		fi
		if [ "$SANBOOT_COMMAND" == "post_lv" ]; then
			if [ "$SANBOOT_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
				sanboot_storage_usage
			fi
		fi
		if [ "$SANBOOT_COMMAND" == "post_identifier" ]; then
			if [ "$SANBOOT_IMAGE_TYPE" == "" ]; then
				sanboot_storage_usage
			fi
		fi

else

	if [ "$SANBOOT_COMMAND" != "list" ] && [ "$SANBOOT_COMMAND" != "auth" ]; then
		if [ "$SANBOOT_IMAGE_NAME" == "" ]; then
			if [ "$NON_BLOCKING" != "true" ]; then
				htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			fi
			sanboot_storage_usage
		fi
		if [ "$SANBOOT_STORAGE_SERVER_VOLUME_GROUP" == "" ]; then
			if [ "$NON_BLOCKING" != "true" ]; then
				htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			fi
			sanboot_storage_usage
		fi
		if [ "$SANBOOT_IMAGE_TYPE" == "" ]; then
			if [ "$NON_BLOCKING" != "true" ]; then
				htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			fi
			sanboot_storage_usage
		fi
	fi
fi
# load required sanboot modules if needed
if ! grep dm_mod /proc/modules 1>/dev/null; then
	modprobe dm-mod 1>/dev/null 2>&1
	modprobe dm-snapshot 1>/dev/null 2>&1
fi

if [ "$SANBOOT_COMMAND" != "list" ] && [ "$SANBOOT_COMMAND" != "post_vg" ] && [ "$SANBOOT_COMMAND" != "post_identifier" ] && [ "$SANBOOT_COMMAND" != "auth" ]; then
	# check if volume group exists
	if ! vgs --unbuffered $SANBOOT_STORAGE_SERVER_VOLUME_GROUP 1>/dev/null 2>&1; then
		htvcenter_post_event 0 "check-vg" 3 "sanboot-storage" "Could not find volume-group $SANBOOT_STORAGE_SERVER_VOLUME_GROUP on the storage-server"
		if [ "$NON_BLOCKING" != "true" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
		fi
		exit 1
	fi
fi
if [ "$htvcenter_UI_USER" != "" ]; then
	htvcenter_UI_USER_PARAMETER=" --htvcenter-ui-user $htvcenter_UI_USER"
fi

case "$SANBOOT_COMMAND" in 

	add)
		# check if already exists
		if [ -e /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			htvcenter_post_event 0 "add" 3 "sanboot-storage" "Volume $SANBOOT_IMAGE_NAME already exists"
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire sanboot-storage`
		trap "htvcenter_lock_queue release sanboot-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		if [ "$SANBOOT_IMAGE_SIZE" == "" ]; then
			SANBOOT_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
		fi
		export SANBOOT_IMAGE_SIZE

		#echo -n "Creating logical volume $SANBOOT_IMAGE_NAME size $SANBOOT_IMAGE_SIZE MB using volume group $SANBOOT_STORAGE_SERVER_VOLUME_GROUP"
		if ! lvcreate -L$SANBOOT_IMAGE_SIZE -n$SANBOOT_IMAGE_NAME $SANBOOT_STORAGE_SERVER_VOLUME_GROUP; then
			htvcenter_post_event 0 "add" 3 "sanboot-storage" "Error while adding $SANBOOT_IMAGE_NAME to $SANBOOT_STORAGE_SERVER_VOLUME_GROUP"

			htvcenter_lock_queue release sanboot-storage $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if [ "$SANBOOT_IMAGE_TYPE" == "iscsi-san-deployment" ]; then
			echo "Detected Iscsi-image. Adding to $IETDCONF"
			manage_iscsi add regular $SANBOOT_IMAGE_AUTH
		elif [ "$SANBOOT_IMAGE_TYPE" == "aoe-san-deployment" ]; then
			echo "Detected Aoe-image. Adding to $VBLADECONF"
			manage_vblade add
		fi

		htvcenter_lock_queue release sanboot-storage $LOCK_TIME
		trap '' EXIT

		# in case we have a username + password post the updated list to the htvcenter-server
		if [ "$SANBOOT_htvcenter_USERNAME" != "" ] && [ "$SANBOOT_htvcenter_PASSWORD" != "" ]; then
			$0 post_lv -u $SANBOOT_htvcenter_USERNAME -p $SANBOOT_htvcenter_PASSWORD -v $SANBOOT_STORAGE_SERVER_VOLUME_GROUP -t $SANBOOT_IMAGE_TYPE --htvcenter-internal-cmd true
		fi
		;;

	remove)
		if [ ! -e /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME ]; then
			htvcenter_post_event 0 "remove" 3 "sanboot-storage" "Could not find source volume /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi
		# check that no snapshots existing with this volume as the origin
		if lvs | awk '{ print $5 }' | grep -w $SANBOOT_IMAGE_NAME 1>/dev/null; then
			htvcenter_post_event 0 "remove" 3 "sanboot-storage" "Snapshot exist from volume /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME. Not removing!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi

		# check that it is not in use by a syncing action
		if ls $SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME.sync_in_progress.* 1>/dev/null 2>&1; then
			htvcenter_post_event 0 "remove" 3 "sanboot-storage" "Volume /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME is currently in use by a sync action!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi
		if [ -f "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME.clone_in_progress" ]; then
			htvcenter_post_event 0 "remove" 3 "sanboot-storage" "Volume /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME is currently in use by a clone action!"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire sanboot-storage`
		trap "htvcenter_lock_queue release sanboot-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		#echo -n "Removing logical volume $SANBOOT_IMAGE_NAME on volume group $SANBOOT_STORAGE_SERVER_VOLUME_GROUP"
		if [ "$SANBOOT_IMAGE_TYPE" == "iscsi-san-deployment" ]; then
			echo "Detected Iscsi-image. Removing from $IETDCONF"
			manage_iscsi remove
		elif [ "$SANBOOT_IMAGE_TYPE" == "aoe-san-deployment" ]; then
			echo "Detected Aoe-image. Removing from $VBLADECONF"
			manage_vblade remove
		fi
		# give time to settle
		sync
		sleep 2
		lvchange -a n -y /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME
		lvremove -f /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME

		htvcenter_lock_queue release sanboot-storage $LOCK_TIME
		trap '' EXIT

		# in case we have a username + password post the updated list to the htvcenter-server
		if [ "$SANBOOT_htvcenter_USERNAME" != "" ] && [ "$SANBOOT_htvcenter_PASSWORD" != "" ]; then
			$0 post_lv -u $SANBOOT_htvcenter_USERNAME -p $SANBOOT_htvcenter_PASSWORD -v $SANBOOT_STORAGE_SERVER_VOLUME_GROUP -t $SANBOOT_IMAGE_TYPE --htvcenter-internal-cmd true
		fi

		;;

	snap)
		if [ "$SANBOOT_IMAGE_SNAPSHOT_NAME" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			echo "ERROR: Please give a name for the snapshot using the -s cmdline parmeter"
			sanboot_storage_usage
		fi
		if [ "$SANBOOT_IMAGE_SIZE" == "" ]; then
			SANBOOT_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
			echo "Using default size of $DEFAULT_IMAGE_SIZE MB!"
		fi
		export SANBOOT_IMAGE_SIZE

		# check that source fs-images exist
		if [ ! -e /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME ]; then
			htvcenter_post_event 0 "snap" 3 "sanboot-storage" "Source volume /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME does not exist."
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi
		if [ -e /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_SNAPSHOT_NAME ]; then
			htvcenter_post_event 0 "snap" 3 "sanboot-storage" "Volume $SANBOOT_IMAGE_SNAPSHOT_NAME already exists"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire sanboot-storage`
		trap "htvcenter_lock_queue release sanboot-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		#echo -n "Creating snapshot size $SANBOOT_IMAGE_SIZE from logical volume $SANBOOT_IMAGE_NAME -> $SANBOOT_IMAGE_SNAPSHOT_NAME"
		touch $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_SNAPSHOT_NAME
		if ! lvcreate --size $SANBOOT_IMAGE_SIZE""m --snapshot --name $SANBOOT_IMAGE_SNAPSHOT_NAME /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME; then
			rm -f $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_SNAPSHOT_NAME
			htvcenter_post_event 0 "snap" 3 "sanboot-storage" "Error while adding snapshot $SANBOOT_IMAGE_SNAPSHOT_NAME to $SANBOOT_STORAGE_SERVER_VOLUME_GROUP"

			htvcenter_lock_queue release sanboot-storage $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		if [ "$htvcenter_PLUGIN_SANBOOT_STORAGE_RESIZE_SNAPSHOTS_FILESYSTEM" == "true" ]; then
			# find the rootfs and resize it
			sanboot_storage_resize_fs /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_SNAPSHOT_NAME $SANBOOT_IMAGE_SIZE
		fi
		export SANBOOT_IMAGE_NAME=$SANBOOT_IMAGE_SNAPSHOT_NAME

		if [ "$SANBOOT_IMAGE_TYPE" == "iscsi-san-deployment" ]; then
			echo "Detected Iscsi-image. Adding to $IETDCONF"
			manage_iscsi add snap $SANBOOT_IMAGE_AUTH
		elif [ "$SANBOOT_IMAGE_TYPE" == "aoe-san-deployment" ]; then
			echo "Detected Aoe-image. Adding to $VBLADECONF"
			manage_vblade add snap
		fi
		rm -f $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_SNAPSHOT_NAME

		htvcenter_lock_queue release sanboot-storage $LOCK_TIME
		trap '' EXIT

		# in case we have a username + password post the updated list to the htvcenter-server
		if [ "$SANBOOT_htvcenter_USERNAME" != "" ] && [ "$SANBOOT_htvcenter_PASSWORD" != "" ]; then
			$0 post_lv -u $SANBOOT_htvcenter_USERNAME -p $SANBOOT_htvcenter_PASSWORD -v $SANBOOT_STORAGE_SERVER_VOLUME_GROUP -t $SANBOOT_IMAGE_TYPE --htvcenter-internal-cmd true
		fi
		;;

	auth)
		#echo "Authenticating $SANBOOT_IMAGE_TYPE image $SANBOOT_IMAGE_ROOTDEVICE to $SANBOOT_IMAGE_AUTH"
		# this is just for starting auth, make sure the device is there, otherwise wait
		SANBOOT_CHECK_VOLUME_GROUP=`echo $SANBOOT_IMAGE_ROOTDEVICE | cut -d':' -f1`
		if [ "$SANBOOT_htvcenter_USERNAME" != "" ] && [ "$SANBOOT_htvcenter_PASSWORD" != "" ] && [ "$SANBOOT_IMAGE_NAME" != "" ]; then
			MAX_AUTH_LOOP=0
			while (true); do
				if [ -e "/dev/$SANBOOT_CHECK_VOLUME_GROUP/$SANBOOT_IMAGE_NAME" ]  && [ ! -f "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME.clone_in_progress" ]; then
					# fs resize active ?
					if [ ! -f "$SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_NAME" ]; then
						break
					fi
				fi
				sleep 5
				if [ "$MAX_AUTH_LOOP" == "$MAX_VOLUME_AUTHENTICATION_LOOP" ]; then
					sanboot_storage_log auth "ERROR: Volume $SANBOOT_IMAGE_TYPE image $SANBOOT_IMAGE_ROOTDEVICE / /dev/$SANBOOT_CHECK_VOLUME_GROUP/$SANBOOT_IMAGE_NAME does not exists, Cannot auth to $SANBOOT_IMAGE_AUTH"
					exit 1
				fi
				MAX_AUTH_LOOP=$(( MAX_AUTH_LOOP + 1 ))
			done
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire sanboot-storage`
		trap "htvcenter_lock_queue release sanboot-storage $LOCK_TIME" EXIT

		export SANBOOT_IMAGE_ROOTDEVICE
		if [ "$SANBOOT_IMAGE_TYPE" == "iscsi-san-deployment" ]; then
			SANBOOT_IMAGE_ROOTDEVICE=`echo $SANBOOT_IMAGE_ROOTDEVICE | cut -d':' -f2`
			manage_iscsi auth $SANBOOT_IMAGE_AUTH
		elif [ "$SANBOOT_IMAGE_TYPE" == "aoe-san-deployment" ]; then
			SANBOOT_IMAGE_ROOTDEVICE=`echo $SANBOOT_IMAGE_ROOTDEVICE | cut -d':' -f3`
			manage_vblade auth $SANBOOT_IMAGE_AUTH
		fi

		htvcenter_lock_queue release sanboot-storage $LOCK_TIME
		trap '' EXIT

		# if we have an image name send back to htvcenter that storage auth finished to remvoe the storage-auth-blocker
		if [ "$SANBOOT_htvcenter_USERNAME" != "" ] && [ "$SANBOOT_htvcenter_PASSWORD" != "" ] && [ "$SANBOOT_IMAGE_NAME" != "" ]; then
			if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD "$htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=auth_finished&sanboot_image_name=$SANBOOT_IMAGE_NAME"; then
				sanboot_storage_log auth "ERROR: Could not remove the storage-auth-blocker from the htvcenter-server at $htvcenter_SERVER_IP!"
			fi
		fi

		;;


	adapt)
		if [ ! -e /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME ]; then
			htvcenter_post_event 0 "adapt" 3 "sanboot-storage" "Volume $SANBOOT_IMAGE_NAME does not exist"
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire sanboot-storage`
		trap "htvcenter_lock_queue release sanboot-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		STORAGE_STATUS_TMP=$resource_id.sanboot.$SANBOOT_IMAGE_NAME.adapt
		> $STORAGE_STATUS_TMP
		if [ "$SANBOOT_IMAGE_TYPE" == "iscsi-san-deployment" ]; then
			# make sure it is not still used by another storage type, check for aoe
			if [ "$VBLADECONF" != "" ]; then
				if grep -w "/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME" $VBLADECONF | grep -v '^#'; then
					if `which vblade 1>/dev/null`; then
						manage_vblade remove
					fi
				fi
			fi
			manage_iscsi adapt $SANBOOT_IMAGE_AUTH
			LUN=`grep -w "/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME" $IETDCONF | grep -v "#" | grep Lun | awk {'print $2 '}`
			TARGET=`grep -w $SANBOOT_IMAGE_NAME $IETDCONF | grep -v "#" | grep Target | awk {' print $2 '}`
			echo "$SANBOOT_IMAGE_NAME,$SANBOOT_STORAGE_SERVER_VOLUME_GROUP:/dev/$TARGET/$LUN" >> $STORAGE_STATUS_TMP

		elif [ "$SANBOOT_IMAGE_TYPE" == "aoe-san-deployment" ]; then

			# make sure it is not still used by another storage type, check for iscsi
			if [ "$IETDCONF" != "" ]; then
				if grep -w "/dev/mapper/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME" $IETDCONF | grep -v '^#'; then
					if `which ietadm 1>/dev/null`; then
						manage_iscsi remove
					fi
				fi
			fi
			manage_vblade adapt
			V_SHELF=`grep -w $SANBOOT_IMAGE_NAME $VBLADECONF | awk {' print $2 '}`
			V_SLOT=`grep -w $SANBOOT_IMAGE_NAME $VBLADECONF | awk {' print $3 '}`
			echo "$SANBOOT_IMAGE_NAME,$SANBOOT_STORAGE_SERVER_VOLUME_GROUP:$SANBOOT_IMAGE_NAME:/dev/etherd/e$V_SHELF.$V_SLOT" >> $STORAGE_STATUS_TMP

		fi
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=get_ident; then
			htvcenter_post_event 0 "adapt" 3 "sanboot-storage" "Could not post the rootfs-identifier to the htvcenter-server at $htvcenter_SERVER_IP"
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post

		htvcenter_lock_queue release sanboot-storage $LOCK_TIME
		trap '' EXIT
		;;

	list)
		sanboot lvs
		;;
	post_vg)
		#echo "Posting current volume group status to the htvcenter-server"
		STORAGE_STATUS_TMP=$resource_id.vg.stat
		vgs --units m | grep -v VFree | sed -e "s/ \{1,\}//" > $STORAGE_STATUS_TMP
		sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=get_storage; then
			htvcenter_post_event 0 "post_vg" 3 "sanboot-storage" "Could not post the volume group status to the htvcenter-server at $htvcenter_SERVER_IP"
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
		;;
	post_lv)
		#echo "Posting current $SANBOOT_IMAGE_TYPE logic volume status to the htvcenter-server"
		STORAGE_STATUS_TMP=$resource_id.$SANBOOT_STORAGE_SERVER_VOLUME_GROUP.lv.stat
		> $STORAGE_STATUS_TMP
		lvs $SANBOOT_STORAGE_SERVER_VOLUME_GROUP --noheadings --units m -o lv_name,vg_name,lv_attr,lv_size,origin | sed -e "s/ \{1,\}//" > $STORAGE_STATUS_TMP.tmp
		for LVOL in `cat $STORAGE_STATUS_TMP.tmp | awk {' print $1 '}`; do
			if grep -w $LVOL $IETDCONF 1>/dev/null; then
				echo -n "iscsi-san-deployment " >> $STORAGE_STATUS_TMP
			elif grep -w $LVOL $VBLADECONF 1>/dev/null; then
				echo -n "aoe-san-deployment " >> $STORAGE_STATUS_TMP
			else
				echo -n " " >> $STORAGE_STATUS_TMP
			fi
			grep -w ^$LVOL $STORAGE_STATUS_TMP.tmp >> $STORAGE_STATUS_TMP
		done
		# detect clone-in-progress
		for CLONE in `find $SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-* -type f 2>/dev/null`; do
		    CLONE_IMAGE_NAME=`basename $CLONE | cut -d'-' -f2- | sed -e "s/\.clone_in_progress//g"`
		    SOURCE_IMAGE_NAME=`echo $CLONE_IMAGE_NAME | cut -d'.' -f1`
		    SYNC_IN_PROGRESS=`echo $CLONE_IMAGE_NAME | cut -d'.' -f2`
		    if [ "$SYNC_IN_PROGRESS" == "sync_in_progress" ]; then
				grep -w -v $SOURCE_IMAGE_NAME $STORAGE_STATUS_TMP > $STORAGE_STATUS_TMP.clone
				mv -f $STORAGE_STATUS_TMP.clone $STORAGE_STATUS_TMP
				echo "- $SOURCE_IMAGE_NAME - - sync_in_progress - - " >> $STORAGE_STATUS_TMP
		    else
				grep -w -v $CLONE_IMAGE_NAME $STORAGE_STATUS_TMP > $STORAGE_STATUS_TMP.clone
				mv -f $STORAGE_STATUS_TMP.clone $STORAGE_STATUS_TMP
				echo "- $CLONE_IMAGE_NAME - - clone_in_progress - - " >> $STORAGE_STATUS_TMP
		    fi
		done

		sed -i -e "s/ \{1,\}/@/g" $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=get_storage; then
			htvcenter_post_event 0 "post_lv" 3 "sanboot-storage" "Could not post the logical volume list to the htvcenter-server at $htvcenter_SERVER_IP"
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post $STORAGE_STATUS_TMP.tmp
		;;
	post_identifier)
		#echo "Posting current $SANBOOT_IMAGE_TYPE logical volume identifier to the htvcenter-server"
		STORAGE_STATUS_TMP=$resource_id.lv.$SANBOOT_IMAGE_TYPE.ident
		> $STORAGE_STATUS_TMP

		for LVOL in `htvcenter_get_lvm_volume_paths`; do
			LVOL_SHORT=`basename $LVOL`
			case $SANBOOT_IMAGE_TYPE in

				iscsi-san-deployment)
					if grep $LVOL_SHORT $IETDCONF 1>/dev/null; then
						LUN=`grep -w $LVOL_SHORT $IETDCONF | grep Lun | awk {'print $2 '}`
						TARGET=`cat $IETDCONF | grep -v "#" | grep Target | grep -w $LVOL_SHORT | awk {' print $2 '}`
						IMAGE_NAME=$LVOL_SHORT
						VOLUME_GROUP=`echo $LVOL | cut -d'/' -f3`
						echo "$IMAGE_NAME,$VOLUME_GROUP:/dev/$TARGET/$LUN"
						echo "$IMAGE_NAME,$VOLUME_GROUP:/dev/$TARGET/$LUN" >> $STORAGE_STATUS_TMP
					fi
					;;

				aoe-san-deployment)
					if grep $LVOL_SHORT $VBLADECONF 1>/dev/null; then
						INTERFACE=`grep -w $LVOL_SHORT $VBLADECONF | awk {'print $1	'}`
						V_SHELF=`grep -w $LVOL_SHORT $VBLADECONF | awk {' print $2 '}`
						V_SLOT=`grep -w $LVOL_SHORT $VBLADECONF | awk {' print $3 '}`
						V_IMAGE=`grep -w $LVOL_SHORT $VBLADECONF | awk {' print $4 '}`
						V_ALLOWED_MAC=`grep -w $LVOL_SHORT $VBLADECONF | awk {' print $5 '}`
						VOLUME_GROUP=`echo $LVOL | cut -d'/' -f3`
						echo "$V_IMAGE,$VOLUME_GROUP:$LVOL_SHORT:/dev/etherd/e$V_SHELF.$V_SLOT"
						echo "$V_IMAGE,$VOLUME_GROUP:$LVOL_SHORT:/dev/etherd/e$V_SHELF.$V_SLOT" >> $STORAGE_STATUS_TMP
					fi
					;;
			esac

		done

		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=get_ident; then
			htvcenter_post_event 0 "post_identifier" 3 "sanboot-storage" "Could not post the rootfs-identifier to the htvcenter-server at $htvcenter_SERVER_IP"
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
		;;


	resize)
		LOCK_TIME=`htvcenter_lock_queue aquire sanboot-storage`
		trap "htvcenter_lock_queue release sanboot-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		if [ "$SANBOOT_IMAGE_SIZE" == "" ]; then
			SANBOOT_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
		fi
		export SANBOOT_IMAGE_SIZE
		touch $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_NAME
		#echo "Resizing logical volume $SANBOOT_IMAGE_NAME + size $SANBOOT_IMAGE_SIZE MB using volume group $SANBOOT_STORAGE_SERVER_VOLUME_GROUP"
		sanboot_storage_lock aquire
		lvresize -L +$SANBOOT_IMAGE_SIZE /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME 2>&1 | logger
		if [ "$htvcenter_PLUGIN_SANBOOT_STORAGE_RESIZE_SNAPSHOTS_FILESYSTEM" == "true" ]; then
			# find the rootfs and resize it
			sanboot_storage_resize_fs /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME $SANBOOT_IMAGE_SIZE
		fi
		if [ "$SANBOOT_IMAGE_TYPE" == "iscsi-san-deployment" ]; then
			echo "Detected Iscsi-image. Running resize2fs on /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME"
			manage_iscsi remove
			e2fsck -f -y /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME 2>&1 | logger
			resize2fs -fp /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME 2>&1 | logger
			manage_iscsi add snap $SANBOOT_IMAGE_AUTH
		elif [ "$SANBOOT_IMAGE_TYPE" == "aoe-san-deployment" ]; then
			echo "Detected Aoe-image. Running resize2fs on /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME"
			manage_vblade remove
			e2fsck -f -y /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME 2>&1 | logger
			resize2fs -fp /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME 2>&1 | logger
			manage_vblade add snap
		fi
		rm -f $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_NAME

		htvcenter_lock_queue release sanboot-storage $LOCK_TIME
		trap '' EXIT

		# in case we have a username + password post the updated list to the htvcenter-server
		if [ "$SANBOOT_htvcenter_USERNAME" != "" ] && [ "$SANBOOT_htvcenter_PASSWORD" != "" ]; then
			$0 post_lv -u $SANBOOT_htvcenter_USERNAME -p $SANBOOT_htvcenter_PASSWORD -v $SANBOOT_STORAGE_SERVER_VOLUME_GROUP -t $SANBOOT_IMAGE_TYPE --htvcenter-internal-cmd true
		fi

		;;


	clone)
		if [ "$SANBOOT_IMAGE_SNAPSHOT_NAME" == "" ]; then
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			echo "ERROR: Please give a name for the clone using the -s cmdline parmeter"
			sanboot_storage_usage
		fi
		if [ "$SANBOOT_IMAGE_SIZE" == "" ]; then
			SANBOOT_IMAGE_SIZE=$DEFAULT_IMAGE_SIZE
		fi
		export SANBOOT_IMAGE_SIZE
		if [ ! -e /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME ]; then
			htvcenter_post_event 0 "clone" 3 "sanboot-storage" "Source volume /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME does not exist."
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi
		if [ -e /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_SNAPSHOT_NAME ]; then
			htvcenter_post_event 0 "clone" 3 "sanboot-storage" "Volume $SANBOOT_IMAGE_SNAPSHOT_NAME already exists"
			htvcenter_unblock_starting_queue $FULL_COMMANDLINE
			exit 1
		fi

		LOCK_TIME=`htvcenter_lock_queue aquire sanboot-storage`
		trap "htvcenter_lock_queue release sanboot-storage $LOCK_TIME" EXIT
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE

		#echo "Cloning logical volume $SANBOOT_IMAGE_NAME to $SANBOOT_IMAGE_SNAPSHOT_NAME size $SANBOOT_IMAGE_SIZE MB volume group $SANBOOT_STORAGE_SERVER_VOLUME_GROUP"
		touch $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_SNAPSHOT_NAME
		ORIGIN_SIZE=""
		ORIGIN_VOLUME="/dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME"
		# if source volume is a snapshot find out the size of the origin
		VOLUME_IS_SNAPSHOT=`lvs --noheadings -o origin $ORIGIN_VOLUME | awk '{ print $1 }'`
		if [ "$VOLUME_IS_SNAPSHOT" != "" ]; then
			ORIGIN_VOLUME="/dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$VOLUME_IS_SNAPSHOT"
		fi
		ORIGIN_SIZE=`lvs --noheadings -o lv_size --units m --nosuffix $ORIGIN_VOLUME | awk '{ print $1 }' | cut -d'.' -f1`
		if [ "$ORIGIN_SIZE" != "" ]; then
			SANBOOT_IMAGE_SIZE=$ORIGIN_SIZE
		fi
		# create locks for origin + snapshot
		touch "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME.sync_in_progress.$SANBOOT_IMAGE_SNAPSHOT_NAME"
		touch "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_SNAPSHOT_NAME.clone_in_progress"
		# create long-term-action start event
		htvcenter_post_event 0 "$SANBOOT_IMAGE_SNAPSHOT_NAME" 9 "sanboot-storage" "Started to clone $SANBOOT_IMAGE_SNAPSHOT_NAME from $SANBOOT_IMAGE_NAME"
		if ! lvcreate -L$SANBOOT_IMAGE_SIZE"M" -n$SANBOOT_IMAGE_SNAPSHOT_NAME $SANBOOT_STORAGE_SERVER_VOLUME_GROUP; then
			rm -f $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_SNAPSHOT_NAME
			htvcenter_post_event 0 "clone" 2 "htvcenter-sanboot-storage" "Could not create target logical volume $SANBOOT_IMAGE_SNAPSHOT_NAME!"
			rm -f "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME.sync_in_progress.$SANBOOT_IMAGE_SNAPSHOT_NAME"
			rm -f "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_SNAPSHOT_NAME.clone_in_progress"
			htvcenter_post_event 0 "$SANBOOT_IMAGE_SNAPSHOT_NAME" 10 "sanboot-storage" "Finished to clone $SANBOOT_IMAGE_SNAPSHOT_NAME"

			htvcenter_lock_queue release sanboot-storage $LOCK_TIME
			trap '' EXIT

			exit 1
		fi
		# add aoe early, we need to have the shelf/lun nr in the image identifiers
		if [ "$SANBOOT_IMAGE_TYPE" == "aoe-san-deployment" ]; then
			export SANBOOT_IMAGE_NAME_ORG=$SANBOOT_IMAGE_NAME
			export SANBOOT_IMAGE_NAME=$SANBOOT_IMAGE_SNAPSHOT_NAME
			manage_vblade add snap
			export SANBOOT_IMAGE_NAME=$SANBOOT_IMAGE_NAME_ORG
		fi
		# copy content
		lvchange -ay -y /dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME

		htvcenter_lock_queue release sanboot-storage $LOCK_TIME
		trap '' EXIT

		# post exports early, we show the progress in the ui
		if [ "$SANBOOT_htvcenter_USERNAME" != "" ] && [ "$SANBOOT_htvcenter_PASSWORD" != "" ]; then
			$0 post_sync_progress -n $SANBOOT_IMAGE_SNAPSHOT_NAME -v $SANBOOT_STORAGE_SERVER_VOLUME_GROUP -t $SANBOOT_IMAGE_TYPE -u $SANBOOT_htvcenter_USERNAME -p $SANBOOT_htvcenter_PASSWORD --htvcenter-internal-cmd true &
		fi
		# delay start sync
		sleep 10
		if ! nice --20 dd if=/dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME of=/dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_SNAPSHOT_NAME bs=1M; then
			rm -f $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_SNAPSHOT_NAME
			htvcenter_post_event 0 "clone" 2 "htvcenter-sanboot-storage" "Could not copy target logical volume $SANBOOT_IMAGE_NAME!"
			rm -f "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME.sync_in_progress.$SANBOOT_IMAGE_SNAPSHOT_NAME"
			rm -f "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_SNAPSHOT_NAME.clone_in_progress"
			htvcenter_post_event 0 "$SANBOOT_IMAGE_SNAPSHOT_NAME" 10 "sanboot-storage" "Finished to clone $SANBOOT_IMAGE_SNAPSHOT_NAME"
			exit 1
		fi
		rm -f "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_NAME.sync_in_progress.$SANBOOT_IMAGE_SNAPSHOT_NAME"
		rm -f "$SYNC_PROGRESS_DIR/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP-$SANBOOT_IMAGE_SNAPSHOT_NAME.clone_in_progress"
		# stop sync-progress monitor and send sync-finished to htvcenter
		$0 post_sync_finished -n $SANBOOT_IMAGE_SNAPSHOT_NAME -v $SANBOOT_STORAGE_SERVER_VOLUME_GROUP -t $SANBOOT_IMAGE_TYPE -u $SANBOOT_htvcenter_USERNAME -p $SANBOOT_htvcenter_PASSWORD --htvcenter-internal-cmd true
		# create long-term-action finished event
		htvcenter_post_event 0 "$SANBOOT_IMAGE_SNAPSHOT_NAME" 10 "sanboot-storage" "Finished to clone $SANBOOT_IMAGE_SNAPSHOT_NAME"
		# add clone to san/nas
		export SANBOOT_IMAGE_NAME=$SANBOOT_IMAGE_SNAPSHOT_NAME
		if [ "$SANBOOT_IMAGE_TYPE" == "iscsi-san-deployment" ]; then
			LOCK_TIME=`htvcenter_lock_queue aquire sanboot-storage`
			trap "htvcenter_lock_queue release sanboot-storage $LOCK_TIME" EXIT

			manage_iscsi add snap $SANBOOT_IMAGE_AUTH

			htvcenter_lock_queue release sanboot-storage $LOCK_TIME
			trap '' EXIT
		fi
		rm -f $SYNC_PROGRESS_DIR/$SANBOOT_IMAGE_SNAPSHOT_NAME

		# here we notify htvcenter that cloning has finished
		# in case we have a username + password post the updated list to the htvcenter-server
		# and notify htvcenter that cloning has finished
		if [ "$SANBOOT_htvcenter_USERNAME" != "" ] && [ "$SANBOOT_htvcenter_PASSWORD" != "" ]; then
			CLONE_FINISHED="$SANBOOT_IMAGE_SNAPSHOT_NAME.clone"
			touch $CLONE_FINISHED
			if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD  --post-file=`$htvcenter_POSTENCODE $CLONE_FINISHED` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=clone_finished; then
				htvcenter_post_event 0 "clone" 3 "sanboot-storage" "Could not post clone-finished status to the htvcenter-server at $htvcenter_SERVER_IP"
			fi
			# post lv
			$0 post_lv -u $SANBOOT_htvcenter_USERNAME -p $SANBOOT_htvcenter_PASSWORD -v $SANBOOT_STORAGE_SERVER_VOLUME_GROUP -t $SANBOOT_IMAGE_TYPE --htvcenter-internal-cmd true
		fi

		;;


	post_sync_progress)
		#echo "Posting progress of the sync action for volume $SANBOOT_IMAGE_NAME to the htvcenter-server"
		STORAGE_STATUS_TMP=$resource_id.sanboot.$SANBOOT_IMAGE_NAME.sync_progress
		# posting also the root-device identifier once
		VOLUME_ROOT_DEVICE_IDENTIFIER=$resource_id.$SANBOOT_IMAGE_NAME.root_device
		echo "/dev/$SANBOOT_STORAGE_SERVER_VOLUME_GROUP/$SANBOOT_IMAGE_NAME" > $VOLUME_ROOT_DEVICE_IDENTIFIER
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD --post-file=`$htvcenter_POSTENCODE $VOLUME_ROOT_DEVICE_IDENTIFIER` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=get_sync_progress; then
			sanboot_storage_log "post_sync_progress" "Could not post the root-device ident for volume $SANBOOT_IMAGE_NAME to htvcenter at $htvcenter_SERVER_IP."
		fi
		rm -f $VOLUME_ROOT_DEVICE_IDENTIFIER $VOLUME_ROOT_DEVICE_IDENTIFIER.post
		# sync in progress
		for SEQ in `seq 0 99`; do
		    # check if we are finished already
		    if [ -f "$STORAGE_STATUS_TMP" ]; then
			CURRENT_PROGRESS=`cat $STORAGE_STATUS_TMP`
			if [ "$CURRENT_PROGRESS" == "100" ]; then
			    exit 0
			fi
		    fi
		    echo "$SEQ" > $STORAGE_STATUS_TMP
		    if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=get_sync_progress; then
			    sanboot_storage_log "post_sync_progress" "Could not post the sync progress for volume $SANBOOT_IMAGE_NAME to htvcenter at $htvcenter_SERVER_IP."
		    fi
		    rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
		    sleep 2
		done
		;;


	post_sync_finished)
		#echo "Posting finished for volume $SANBOOT_IMAGE_NAME to the htvcenter-server"
		STORAGE_STATUS_TMP=$resource_id.sanboot.$SANBOOT_IMAGE_NAME.sync_progress
		echo "100" > $STORAGE_STATUS_TMP
		if ! wget -q $WGET_NO_CERT_CHECK -O /dev/null --http-user=$SANBOOT_htvcenter_USERNAME --http-password=$SANBOOT_htvcenter_PASSWORD --post-file=`$htvcenter_POSTENCODE $STORAGE_STATUS_TMP` $htvcenter_web_protocol://$htvcenter_SERVER_IP/htvcenter/base/plugins/sanboot-storage/sanboot-storage-action.php?sanboot_storage_command=get_sync_finished; then
			sanboot_storage_log "post_sync_finished" "Could not post the sync progress for volume $SANBOOT_IMAGE_NAME to htvcenter at $htvcenter_SERVER_IP."
		fi
		rm -f $STORAGE_STATUS_TMP $STORAGE_STATUS_TMP.post
		;;




	*)
		htvcenter_unblock_starting_queue $FULL_COMMANDLINE
		sanboot_storage_usage
		;;


esac

