#!/bin/bash
#
# htvcenter Enterprise developed by htvcenter Enterprise GmbH.
#
# All source code and content (c) Copyright 2014, htvcenter Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the htvcenter Enterprise Server and Client License, unless otherwise agreed with htvcenter Enterprise GmbH.
# The latest version of this license can be found here: http://htvcenter-enterprise.com/license
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://htvcenter-enterprise.com
#
# Copyright 2014, htvcenter Enterprise GmbH <info@htvcenter-enterprise.com>
#

# this script automatically manages hybrid-cloud im- and exports
htvcenter_SERVER_BASE_DIR=$(dirname $0)/../../../..
htvcenter_SERVER_BASE_DIR=$(pushd $htvcenter_SERVER_BASE_DIR > /dev/null && echo $PWD && popd > /dev/null)
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-functions
# unblock starting command queue early for non-blocking + ui commands
# only non-blocking commands
htvcenter_unblock_starting_queue $@
NON_BLOCKING=true

export htvcenter_SOURCE_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/"
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-package-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/hybrid-cloud/include/htvcenter-plugin-hybrid-cloud-functions
. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/hybrid-cloud/etc/htvcenter-plugin-hybrid-cloud.conf
# get the ip config
. $htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf
. $htvcenter_SERVER_BASE_DIR/htvcenter/include/htvcenter-server-functions
htvcenter_server_get_config
export LANG=C
export resource_htvcenterserver=$htvcenter_SERVER_IP_ADDRESS
# stat dir
HYBRID_CLOUD_STAT_DIR="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/hybrid-cloud/web/hybrid-cloud-stat/"

if [ "$htvcenter_CUSTOM_JAVA_HOME" != "" ]; then
	export JAVA_HOME=$htvcenter_CUSTOM_JAVA_HOME
	export PATH=$JAVA_HOME/bin:$PATH
fi
if [ "$htvcenter_CUSTOM_EC2_API_HOME" != "" ]; then
	export EC2_HOME=$htvcenter_CUSTOM_EC2_API_HOME
	export PATH=$htvcenter_CUSTOM_EC2_API_HOME/bin:$PATH
fi
if [ "$htvcenter_CUSTOM_EC2_AMI_HOME" != "" ]; then
	export EC2_AMITOOL_HOME=$htvcenter_CUSTOM_EC2_AMI_HOME
	export EC2_AMI_HOME=$htvcenter_CUSTOM_EC2_AMI_HOME
	export PATH=$htvcenter_CUSTOM_EC2_AMI_HOME/bin:$PATH
fi

# let only root run this script
WHOAMI=`whoami`
if [ "$WHOAMI" != "root" ]; then
	echo "ERROR: Please run this script as root!"
	exit 6
fi

# check deps
if ! check_hybrid_cloud_deps; then
	exit 1
fi

# create stat dir
if [ ! -d "$HYBRID_CLOUD_STAT_DIR" ]; then
	mkdir -p $HYBRID_CLOUD_STAT_DIR
	chmod -R 777 $HYBRID_CLOUD_STAT_DIR
fi


function hybrid_cloud_usage() {
	echo "Usage : $0 import_instance <-n account-name> <-i account-id> <-O access_key> <-W secret_key> <-t cloud-type> <-x instance-id> <-k ssh-key> <-s image-storage:/image-path/>"
	echo "        $0 export_image <-n account-name> <-i account-id> <-O access_key> <-W secret_key> <-t cloud-type> <-s image-storage:/image-path/> <-m ami-size(in MB)> <-r ami-architecture> <-a ami-name> <-u EC2-User-ID> <-y private-key-file> <-z public-key-file>  [ -l aws-location]"
	echo "        $0 iso <-q path>"
	echo ""
	echo "Optional parameters:"
	echo "             [--htvcenter-ui-user <username>]"
	echo "             [--htvcenter-internal-cmd <true/false>]"
	echo "             [--htvcenter-cmd-mode <regular/background/fork>]"
	exit 1
}

# debugging
exec 2>> /var/log/ec2-migration.log
set -x



FULL_COMMANDLINE="$0 $@"
HYBRID_CLOUD_COMMAND=$1
shift

while [ $# -ne 0 ]; do
	case "$1" in
		-i)
			PARAM_HYBRID_CLOUD_ACCOUNT_ID=$2
			shift
			;;
		-n)
			PARAM_HYBRID_CLOUD_ACCOUNT_NAME=$2
			shift
			;;
		-t)
			PARAM_HYBRID_CLOUD_ACCOUNT_TYPE=$2
			shift
			;;
		-O)
			PARAM_HYBRID_CLOUD_ACCESS_KEY=$2
			shift
			;;
		-W)
			PARAM_HYBRID_CLOUD_SECRET_KEY=$2
			shift
			;;
		-y)
			PARAM_HYBRID_CLOUD_PRIVATE_KEY_CERT=$2
			shift
			;;
		-z)
			PARAM_HYBRID_CLOUD_PUBLIC_KEY_CERT=$2
			shift
			;;
		-u)
			PARAM_HYBRID_CLOUD_EC2_USER_ID=$2
			shift
			;;
		-s)
			PARAM_IMAGE_STORE=$2
			shift
			;;
		-x)
			PARAM_INSTANCE_ID=$2
			shift
			;;
		-p)
			PARAM_INSTANCE_PUBLIC_HOSTNAME=$2
			shift
			;;
		-k)
			PARAM_SSH_KEY=$2
			shift
			;;
		-l)
			PARAM_EXPORT_LOCATION=$2
			shift
			;;
		-m)
			PARAM_AMI_SIZE=$2
			shift
			;;
		-r)
			PARAM_AMI_ARCH=$2
			shift
			;;
		-a)
			PARAM_AMI_NAME=$2
			shift
			;;
		-q)
			PARAM_HOST_PATH=$2
			shift
			;;
		--htvcenter-ui-user)
			htvcenter_UI_USER=$2
			shift
			;;
		--htvcenter-internal-cmd)
			htvcenter_INTERNAL_CMD=$2
			shift
			;;
		--htvcenter-cmd-mode)
			htvcenter_CMD_MODE=$2
			shift
			;;

		*)
			echo "ERROR: Free commandline arguments are not allowed"
			hybrid_cloud_usage
			exit 6
			;;
	esac
	shift
done

# checks
if [ "$HYBRID_CLOUD_COMMAND" == "" ]; then
	hybrid_cloud_usage
fi
if [ "$HYBRID_CLOUD_COMMAND" != "iso" ]; then
	if [ "$PARAM_HYBRID_CLOUD_ACCOUNT_TYPE" == "" ] || [ "$PARAM_HYBRID_CLOUD_ACCOUNT_ID" == "" ] || [ "$PARAM_HYBRID_CLOUD_ACCESS_KEY" == "" ] || [ "$PARAM_HYBRID_CLOUD_SECRET_KEY" == "" ]; then
		hybrid_cloud_usage
	fi
fi

# map the cloud types to the utils names
case "$PARAM_HYBRID_CLOUD_ACCOUNT_TYPE" in
	aws)
		. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/hybrid-cloud/etc/commands/aws.conf
		check_hybrid_cloud_deps_ec2
		;;
	euca)
		. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/hybrid-cloud/etc/commands/euca.conf
		check_hybrid_cloud_deps_euca
		;;
esac

if [ "$htvcenter_UI_USER" != "" ]; then
	htvcenter_UI_USER_PARAMETER=" --htvcenter-ui-user $htvcenter_UI_USER"
fi


# main
case "$HYBRID_CLOUD_COMMAND" in

	import_instance)
		if [ "$PARAM_INSTANCE_ID" == "" ] || [ "$PARAM_IMAGE_STORE" == "" ] || [ "$PARAM_SSH_KEY" == "" ]; then
			hybrid_cloud_usage
		fi
		hybrid_cloud_log "NOTICE: Importing $PARAM_HYBRID_CLOUD_ACCOUNT_TYPE Instance $PARAM_INSTANCE_ID to Server Image at $PARAM_IMAGE_STORE"
		hybrid_cloud_log "NOTICE: -> using ssh-key file $PARAM_SSH_KEY"
		# active event
		htvcenter_post_event 0 "$PARAM_INSTANCE_ID" 9 "htvcenter-hybrid-cloud" "Importing EC2 Instance $PARAM_INSTANCE_ID to $PARAM_IMAGE_STORE!"

		MOUNTPOINT=`mktemp -d /tmp/$PARAM_INSTANCE_ID.XXXXXXXXXX` || exit 1
		if ! mount -t nfs $PARAM_IMAGE_STORE $MOUNTPOINT; then
			hybrid_cloud_log "ERROR: Could not mount $PARAM_IMAGE_STORE!"
			htvcenter_post_event 0 "$PARAM_INSTANCE_ID" 10 "htvcenter-hybrid-cloud" "Importing EC2 Instance $PARAM_INSTANCE_ID to $PARAM_IMAGE_STORE!"
			htvcenter_post_event 0 "import_instance" 3 "htvcenter-hybrid-cloud" "Could not mount $PARAM_IMAGE_STORE!"
			exit 1
		else
			hybrid_cloud_log "NOTICE: Mounted $PARAM_IMAGE_STORE. Starting the import."
			htvcenter_post_event 0 "import_instance" 5 "htvcenter-hybrid-cloud" "Mounted $PARAM_IMAGE_STORE. Starting the import."
		fi

		# starting import via rsync
		# run one simple command per expetc + ssh so the machine key gets accpeted and added to known_hosts
		hybrid_cloud_log "NOTICE: Checking ssh connection to $PARAM_INSTANCE_PUBLIC_HOSTNAME via key $PARAM_SSH_KEY"
		$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/hybrid-cloud/bin/htvcenter-hybrid-cloud-ssh $PARAM_INSTANCE_PUBLIC_HOSTNAME $PARAM_SSH_KEY ls
		hybrid_cloud_log "NOTICE: Starting AMI import of $PARAM_INSTANCE_PUBLIC_HOSTNAME to $PARAM_IMAGE_STORE"
		rsync -az -e "ssh -i $PARAM_SSH_KEY" --exclude /proc --exclude /sys $PARAM_INSTANCE_PUBLIC_HOSTNAME:/* $MOUNTPOINT/
		RSYNC_RET=$?
		# some more preparations ....
		mkdir -p $MOUNTPOINT/proc $MOUNTPOINT/sys
		# debian/ubuntu
		if [ -f $MOUNTPOINT/etc/debian_version ]; then
			# remove network, plymouth and cloud init
			rm -f $MOUNTPOINT/etc/init/plymouth*
			rm -f $MOUNTPOINT/etc/init/cloud-*
			# remove possible uec services
			chroot $MOUNTPOINT/ update-rc.d -f landscape-client remove
			# remove possible ec2 services
			chroot $MOUNTPOINT/ update-rc.d -f ec2-get-credentials remove
			chroot $MOUNTPOINT/ update-rc.d -f ec2-run-user-data remove
			chroot $MOUNTPOINT/ update-rc.d -f ifupdown remove
			chroot $MOUNTPOINT/ update-rc.d -f ec2-ssh-host-key-gen remove
			chroot $MOUNTPOINT/ update-rc.d -f ec2-killall-nash-hotplug remove
			chroot $MOUNTPOINT/ update-rc.d -f ec2-mkdir-tmp remove

		elif [ -f $MOUNTPOINT/etc/redhat-release ]; then
		# redhat/centos
			rm -f $MOUNTPOINT/etc/init/plymouth*
			rm -f $MOUNTPOINT/etc/init/cloud-*

		fi
		# umount and finalize
		umount $MOUNTPOINT
		rmdir $MOUNTPOINT
		if ! [ $RSYNC_RET == 24 -o $RSYNC_RET == 23 -o $RSYNC_RET == 0 ]; then
			hybrid_cloud_log "ERROR: Error importing $PARAM_HYBRID_CLOUD_ACCOUNT_TYPE Instance $PARAM_INSTANCE_ID"
			htvcenter_post_event 0 "$PARAM_INSTANCE_ID" 10 "htvcenter-hybrid-cloud" "Importing EC2 Instance $PARAM_INSTANCE_ID to $PARAM_IMAGE_STORE!"
			htvcenter_post_event 0 "import_instance" 3 "htvcenter-hybrid-cloud" "Error importing $PARAM_HYBRID_CLOUD_ACCOUNT_TYPE Instance $PARAM_INSTANCE_ID"
			exit 1
		fi
		hybrid_cloud_log "NOTICE: Successfully created Server-image from $PARAM_HYBRID_CLOUD_ACCOUNT_TYPE Instance $PARAM_INSTANCE_ID"
		htvcenter_post_event 0 "$PARAM_INSTANCE_ID" 10 "htvcenter-hybrid-cloud" "Importing EC2 Instance $PARAM_INSTANCE_ID to $PARAM_IMAGE_STORE!"
		htvcenter_post_event 0 "import_instance" 5 "htvcenter-hybrid-cloud" "Successfully imported $PARAM_HYBRID_CLOUD_ACCOUNT_TYPE Instance $PARAM_INSTANCE_ID to Server Image at $PARAM_IMAGE_STORE"

		;;


	export_image)
		if [ "$PARAM_AMI_SIZE" == "" ] || [ "$PARAM_AMI_NAME" == "" ] || [ "$PARAM_AMI_ARCH" == "" ] || [ "$PARAM_IMAGE_STORE" == "" ]; then
			hybrid_cloud_usage
		fi
		hybrid_cloud_log "NOTICE: Exporting Server Image at $PARAM_IMAGE_STORE to $PARAM_HYBRID_CLOUD_ACCOUNT_TYPE as a new AMI $PARAM_AMI_NAME region $PARAM_EXPORT_LOCATION"
		htvcenter_post_event 0 "$PARAM_AMI_NAME" 9 "htvcenter-hybrid-cloud" "Exporting $PARAM_IMAGE_STORE to AMI $PARAM_AMI_NAME region $PARAM_EXPORT_LOCATION!"

		MOUNTPOINT=`mktemp -d /tmp/image-mnt.XXXXXXXXXX` || exit 1
		if ! mount -t nfs $PARAM_IMAGE_STORE $MOUNTPOINT; then
			hybrid_cloud_log "ERROR: Could not mount $PARAM_IMAGE_STORE!"
			htvcenter_post_event 0 "$PARAM_AMI_NAME" 10 "htvcenter-hybrid-cloud" "Exporting $PARAM_IMAGE_STORE to AMI $PARAM_AMI_NAME!"
			htvcenter_post_event 0 "export_image" 3 "htvcenter-hybrid-cloud" "Could not mount $PARAM_IMAGE_STORE!"
			exit 1
		else
			hybrid_cloud_log "NOTICE: Mounted $PARAM_IMAGE_STORE."
			htvcenter_post_event 0 "export_image" 5 "htvcenter-hybrid-cloud" "Mounted $PARAM_IMAGE_STORE."
		fi
		LOOP_IMAGE_FILE="/tmp/$PARAM_AMI_NAME.img"
		LOOP_IMAGE_MNT=`mktemp -d /tmp/image-loop-mnt.XXXXXXXXXX` || exit 1
	   dd if=/dev/zero of=$LOOP_IMAGE_FILE bs=1M seek=$PARAM_AMI_SIZE count=1
		mkfs.ext3 -F $LOOP_IMAGE_FILE
		if ! mount -o loop $LOOP_IMAGE_FILE $LOOP_IMAGE_MNT; then
			hybrid_cloud_log "ERROR: Could not loop mount $LOOP_IMAGE_FILE!"
			htvcenter_post_event 0 "$PARAM_AMI_NAME" 10 "htvcenter-hybrid-cloud" "Exporting $PARAM_IMAGE_STORE to AMI $PARAM_AMI_NAME!"
			htvcenter_post_event 0 "export_image" 3 "htvcenter-hybrid-cloud" "Could not loop mount $LOOP_IMAGE_FILE!"
			exit 1
		else
			hybrid_cloud_log "NOTICE: Loop mounted $LOOP_IMAGE_FILE."
			htvcenter_post_event 0 "export_image" 5 "htvcenter-hybrid-cloud" "Mounted $PARAM_IMAGE_STORE."
		fi
		rsync -az $MOUNTPOINT/* $LOOP_IMAGE_MNT/
		RSYNC_RET=$?
		if ! [ $RSYNC_RET == 24 -o $RSYNC_RET == 23 -o $RSYNC_RET == 0 ]; then
			umount $MOUNTPOINT
			rmdir $MOUNTPOINT
			hybrid_cloud_log "ERROR: Syncing the Image to loop-back file failed. Exiting"
			htvcenter_post_event 0 "$PARAM_AMI_NAME" 10 "htvcenter-hybrid-cloud" "Exporting $PARAM_IMAGE_STORE to AMI $PARAM_AMI_NAME!"
			htvcenter_post_event 0 "export_image" 3 "htvcenter-hybrid-cloud" "Syncing the Image to loop-back file failed. Exiting"
			exit 1
		fi

		# modify it a bit to fit to ec2
		rm -rf $LOOP_IMAGE_MNT/$htvcenter_SERVER_BASE_DIR/htvcenter
		rm -f $LOOP_IMAGE_MNT/iauth*
		cd $LOOP_IMAGE_MNT/etc
		rm -f `find -name htvcenter-client`
		cd - 1>/dev/null
		# create network config
		if [ -f $LOOP_IMAGE_MNT/etc/debian_version ]; then
			rm -f $LOOP_IMAGE_MNT/etc/network/interfaces
			cat >> $LOOP_IMAGE_MNT/etc/network/interfaces << EOF
auto lo
iface lo inet loopback
auto eth0
iface eth0 inet dhcp
EOF

		elif [ -f $LOOP_IMAGE_MNT/etc/redhat-release ]; then
			rm -f $LOOP_IMAGE_MNT/etc/sysconfig/network-scripts/ifcfg-eth0
			cat >> $LOOP_IMAGE_MNT/etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
PEERDNS=yes
IPV6INIT=no
EOF
			echo "NETWORKING=yes" > $LOOP_IMAGE_MNT/etc/sysconfig/network.
		fi
		# re-create fstab / small instances only for now
		rm -f $LOOP_IMAGE_MNT/etc/fstab
		cat >> $LOOP_IMAGE_MNT/etc/fstab << EOF
/dev/sda1  /         ext3    defaults             1 1
/dev/sda3  swap      swap    defaults             0 0
none       /proc     proc    defaults             0 0
none       /sys      sysfs   defaults             0 0
EOF

		# create required devices
		mknod $LOOP_IMAGE_MNT/dev/zero c 1 5
		mknod $LOOP_IMAGE_MNT/dev/null c 1 3
		mknod $LOOP_IMAGE_MNT/dev/tty c 5 0
		mknod $LOOP_IMAGE_MNT/dev/console c 5 1
		mknod $LOOP_IMAGE_MNT/dev/ptmx c 5 2
		mknod $LOOP_IMAGE_MNT/dev/tty0 c 4 0
		mknod $LOOP_IMAGE_MNT/dev/tty1 c 4 1
		mknod $LOOP_IMAGE_MNT/dev/sda b 8 0
		mknod $LOOP_IMAGE_MNT/dev/sda1 b 8 1
		mknod $LOOP_IMAGE_MNT/dev/sda2 b 8 2
		mknod $LOOP_IMAGE_MNT/dev/sda3 b 8 3

		# remove udev mappings
		rm -f $LOOP_IMAGE_MNT/etc/udev/rules.d/*persistent-net.rules

		# umounting
		umount $MOUNTPOINT
		rmdir $MOUNTPOINT
		umount $LOOP_IMAGE_MNT
		rmdir $LOOP_IMAGE_MNT

		# define a separated log for each ami
		CLOUD_TOOLS_DEBUG_LOG="/tmp/$PARAM_AMI_NAME.export.debug.log"
		CLOUD_TOOLS_ERROR_LOG="/tmp/$PARAM_AMI_NAME.export.error.log"

		# bundle
		hybrid_cloud_log "BUNDLING: $BUNDLE_IMAGE -i $LOOP_IMAGE_FILE -c $PARAM_HYBRID_CLOUD_PUBLIC_KEY_CERT -k $PARAM_HYBRID_CLOUD_PRIVATE_KEY_CERT -u $PARAM_HYBRID_CLOUD_EC2_USER_ID -r $PARAM_AMI_ARCH -B ami=sda1,root=/dev/sda1,swap=sda3"
		if ! $BUNDLE_IMAGE -i $LOOP_IMAGE_FILE -c $PARAM_HYBRID_CLOUD_PUBLIC_KEY_CERT -k $PARAM_HYBRID_CLOUD_PRIVATE_KEY_CERT -u $PARAM_HYBRID_CLOUD_EC2_USER_ID -r $PARAM_AMI_ARCH -B "ami=sda1,root=/dev/sda1,swap=sda3" 1>$CLOUD_TOOLS_DEBUG_LOG 2>$CLOUD_TOOLS_ERROR_LOG; then
			hybrid_cloud_log "ERROR: Bundling AMI $LOOP_IMAGE_FILE! failed"
			htvcenter_post_event 0 "$PARAM_AMI_NAME" 10 "htvcenter-hybrid-cloud" "Exporting $PARAM_IMAGE_STORE to AMI $PARAM_AMI_NAME!"
			htvcenter_post_event 0 "export_image" 3 "htvcenter-hybrid-cloud" "Bundling AMI $LOOP_IMAGE_FILE! failed"
			exit 1
		else
			hybrid_cloud_log "NOTICE: Successfully bundled $LOOP_IMAGE_FILE."
			htvcenter_post_event 0 "export_image" 5 "htvcenter-hybrid-cloud" "Successfully bundled $LOOP_IMAGE_FILE."
		fi
		# for aws we need to set the location for the upload
		if [ "$PARAM_HYBRID_CLOUD_ACCOUNT_TYPE" == "aws" ]; then
			if [ "$PARAM_EXPORT_LOCATION" == "" ]; then
				PARAM_EXPORT_LOCATION="$htvcenter_PLUGIN_HYBRID_CLOUD_DEFAULT_REGION"
			fi
			EC2_UPLOAD_BUNDLE_PARAMETER=" --location $PARAM_EXPORT_LOCATION"
		fi
		# upload
		hybrid_cloud_log "UPLOADING: $UPLOAD_BUNDLE -a $PARAM_HYBRID_CLOUD_ACCESS_KEY -s $PARAM_HYBRID_CLOUD_SECRET_KEY -b $PARAM_AMI_NAME -m /tmp/$PARAM_AMI_NAME.img.manifest.xml $EC2_UPLOAD_BUNDLE_PARAMETER"
		if ! $UPLOAD_BUNDLE -a $PARAM_HYBRID_CLOUD_ACCESS_KEY -s $PARAM_HYBRID_CLOUD_SECRET_KEY -b $PARAM_AMI_NAME -m /tmp/$PARAM_AMI_NAME.img.manifest.xml $EC2_UPLOAD_BUNDLE_PARAMETER 1>>$CLOUD_TOOLS_DEBUG_LOG 2>>$CLOUD_TOOLS_ERROR_LOG; then
			hybrid_cloud_log "ERROR: Uploading bundled AMI $LOOP_IMAGE_FILE! failed"
			htvcenter_post_event 0 "$PARAM_AMI_NAME" 10 "htvcenter-hybrid-cloud" "Exporting $PARAM_IMAGE_STORE to AMI $PARAM_AMI_NAME!"
			htvcenter_post_event 0 "export_image" 3 "htvcenter-hybrid-cloud" "Uploading bundled AMI $LOOP_IMAGE_FILE! failed"
			exit 1
		else
			hybrid_cloud_log "NOTICE: Successfully uploaded bundled AMI $LOOP_IMAGE_FILE."
			htvcenter_post_event 0 "export_image" 5 "htvcenter-hybrid-cloud" "Successfully uploaded bundled AMI $LOOP_IMAGE_FILE."
		fi
		# register
		hybrid_cloud_log "REGISTER: $REGISTER -O $PARAM_HYBRID_CLOUD_ACCESS_KEY -W $PARAM_HYBRID_CLOUD_SECRET_KEY --region $PARAM_EXPORT_LOCATION $PARAM_AMI_NAME/$PARAM_AMI_NAME.img.manifest.xml -a $PARAM_AMI_ARCH --root-device-name /dev/sda1"
		HYBRID_CLOUD_AMI_NAME=`$REGISTER -O $PARAM_HYBRID_CLOUD_ACCESS_KEY -W $PARAM_HYBRID_CLOUD_SECRET_KEY --region $PARAM_EXPORT_LOCATION $PARAM_AMI_NAME/$PARAM_AMI_NAME.img.manifest.xml -a $PARAM_AMI_ARCH --root-device-name /dev/sda1 | awk {' print $2 '}`
		echo "# output of $REGISTER -O $PARAM_HYBRID_CLOUD_ACCESS_KEY -W $PARAM_HYBRID_CLOUD_SECRET_KEY --region $PARAM_EXPORT_LOCATION $PARAM_AMI_NAME/$PARAM_AMI_NAME.img.manifest.xml -a $PARAM_AMI_ARCH --root-device-name /dev/sda1"  1>>$CLOUD_TOOLS_DEBUG_LOG
		echo "# $HYBRID_CLOUD_AMI_NAME"  1>>$CLOUD_TOOLS_DEBUG_LOG

		hybrid_cloud_log "NOTICE: Successfully exported Server-image from $PARAM_IMAGE_STORE to $PARAM_HYBRID_CLOUD_ACCOUNT_TYPE AMI $PARAM_AMI_NAME"
		htvcenter_post_event 0 "$PARAM_AMI_NAME" 10 "htvcenter-hybrid-cloud" "Exporting $PARAM_IMAGE_STORE to AMI $PARAM_AMI_NAME!"
		htvcenter_post_event 0 "import_instance" 5 "htvcenter-hybrid-cloud" "Successfully exported Server-image from $PARAM_IMAGE_STORE to $PARAM_HYBRID_CLOUD_ACCOUNT_TYPE AMI $PARAM_AMI_NAME"
		;;

	iso)
		if [ "$PARAM_HOST_PATH" == "" ]; then
			hybrid_cloud_usage
		fi
		# validate path
		PARAM_HOST_PATH=`echo "$PARAM_HOST_PATH" | cut -d';' -f1`
		PARAM_HOST_PATH=`echo "$PARAM_HOST_PATH" | cut -d'&' -f1`
		PARAM_HOST_PATH=`echo "$PARAM_HOST_PATH" | cut -d' ' -f1`
		PARAM_HOST_PATH=`echo "$PARAM_HOST_PATH" | cut -d'$' -f1`
		if [ ! -d "$PARAM_HOST_PATH" ]; then
			htvcenter_post_event 0 "iso" 2 "htvcenter-hybrid-cloud" "No such directory $PARAM_HOST_PATH !"
			exit 1
		fi
		# post dir list
		PICK_ISO_CONFIG_TMP=$HYBRID_CLOUD_STAT_DIR/0.pick_iso_config.tmp
		PICK_ISO_CONFIG=$HYBRID_CLOUD_STAT_DIR/0.pick_iso_config
		echo "P@$PARAM_HOST_PATH" > $PICK_ISO_CONFIG_TMP
		for DIR_CONTENT in `ls -f $PARAM_HOST_PATH`; do
		    if [ -d "$PARAM_HOST_PATH"/"$DIR_CONTENT" ]; then
				echo "D@$DIR_CONTENT" >> $PICK_ISO_CONFIG_TMP
		    elif [ -f "$PARAM_HOST_PATH"/"$DIR_CONTENT" ]; then
				echo "F@$DIR_CONTENT" >> $PICK_ISO_CONFIG_TMP
		    fi
		done
		chmod 777 $PICK_ISO_CONFIG_TMP
		mv -f $PICK_ISO_CONFIG_TMP $PICK_ISO_CONFIG
		;;


	*)
		hybrid_cloud_usage
		;;


esac

