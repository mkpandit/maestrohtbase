#!/bin/bash -x
########################## build functions ##########################
#
# htvcenter Enterprise developed by htvcenter Enterprise GmbH.
#
# All source code and content (c) Copyright 2014, htvcenter Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the htvcenter Enterprise Server and Client License, unless otherwise agreed with htvcenter Enterprise GmbH.
# The latest version of this license can be found here: http://htvcenter-enterprise.com/license
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://htvcenter-enterprise.com
#
# Copyright 2014, htvcenter Enterprise GmbH <info@htvcenter-enterprise.com>
#

# in the stage these function are used the files may be not installed yet

if [ "$htvcenter_SERVER_BASE_DIR" == "" ]; then
	echo "ERROR: Please export htvcenter_SERVER_BASE_DIR before sourcing $0"
	exit 1
fi
if [ "$htvcenter_SOURCE_DIR" == "" ]; then
	echo "ERROR: Please export htvcenter_SOURCE_DIR before sourcing $0"
	exit 1
fi
# source the htvcenter-functions file for more features
. $htvcenter_SOURCE_DIR/include/htvcenter-functions
# include package functions for package management
. $htvcenter_SOURCE_DIR/include/htvcenter-package-functions
# source the htvcenter-server.conf which resets the htvcenter_SERVER_BASE_DIR again
. $htvcenter_SOURCE_DIR/etc/htvcenter-server.conf

if [ -x "/sbin/rpcbind" ]; then
	# portmap was replaced with rpcbind on fc > 7
	htvcenter_INITRD_COMPONENTS="/sbin/rpcbind"
else
	htvcenter_INITRD_COMPONENTS="/sbin/portmap"
fi
if [ -x "/sbin/rpc.statd" ]; then
	htvcenter_INITRD_COMPONENTS="$htvcenter_INITRD_COMPONENTS /sbin/rpc.statd"
fi


htvcenter_INITRD_COMPONENTS="$htvcenter_INITRD_COMPONENTS /bin/bash /usr/bin/rsync /usr/bin/wget /sbin/modprobe /sbin/depmod /sbin/insmod /sbin/lsmod /sbin/mke2fs /sbin/sfdisk /sbin/udevd /sbin/lvm `which ethtool` `which acpid`"
htvcenter_INITRD_DIRECTORIES="bin etc etc/rc.d/init.d etc/sysconfig etc/X11 lib lib/modules lib/i686 loopfs mnt old_root proc sys sysroot usr usr/lib usr/bin usr/sbin var var/lock var/lock/subsys var/log var/run /var/lib /var/lib/nfs /var/lib/nfs/statd"

# colorize/emphasize terminal output
USE_COLORS=1

#
# Print a message to STDOUT
#
# $1: the message
# $2: (optional) use "bold" to get bold-printed output
#
function print_message() {
	bold="\033[1m"
	esc="\033[m"
	if [ $USE_COLORS == 1 -a "$2" == 'bold' ]; then
		echo -e "${bold}${1}${esc}"
	else
		echo "$1"
	fi
}

function print_error() {
	bold="\033[1m"
	red="\033[31m"
	esc="\033[m"
	if [ $USE_COLORS == 1 ]; then
		echo -e "${red}ERROR: ${1}${esc}"
	else
		echo "ERROR: $1"
	fi
}

function print_notice() {
	echo "NOTICE: $1"
}


#
# Display all library files (not links) a binary depends on
# -> this is generic
#
# $1: path to the binary
#
function htvcenter_build_find_libs() {
	BINARY=$1
	for LIBRARY in `ldd $BINARY | awk {' print $3 '}`; do
		REAL_LIBRARYFILE=`readlink $LIBRARY`
		if [ "$REAL_LIBRARYFILE" == "" ]; then
			REAL_LIBRARYFILE=`basename $LIBRARY`
		fi
		FULL_PATH_TO_LIBRARY=`dirname $LIBRARY`
		if [ "$FULL_PATH_TO_LIBRARY" != "." ]; then
			echo $FULL_PATH_TO_LIBRARY/$REAL_LIBRARYFILE
		fi
	done
}



#
# Check requirements for the compile phase
# -> this is for "make all" / compilation phase
#
function htvcenter_check_build_requirements() {
	echo "Checking requirements for the compilation phase"
	export FORCE_INSTALL=true
	# check which command to use for checking the requirements
	if [ -f /etc/debian_version ]; then
		htvcenter_PACKAGE_TYPE=deb
		htvcenter_REQUIREMENTS_CHECK_COMMAND="dpkg -L"
	elif [ -f /etc/redhat-release ]; then
		htvcenter_PACKAGE_TYPE=rpm
		htvcenter_REQUIREMENTS_CHECK_COMMAND="rpm -qs"
	elif [ -f /etc/SuSE-release ]; then
		htvcenter_PACKAGE_TYPE=rpm
		htvcenter_REQUIREMENTS_CHECK_COMMAND="rpm -qs"
	else
		echo "NOTICE: Could not find out which compile-requirements to use"
		echo "        Please make sure to have all needed components installed!"
		sleep 4
		echo "... Continuing anyway"
		return 0
	fi

	# check for required packages and install them if possible
	echo "htvcenter-server requires: $htvcenter_SERVER_BUILD_REQUIREMENTS"
	for DEP in `echo $htvcenter_SERVER_BUILD_REQUIREMENTS | sed -e "s/,//g"`; do
		if $htvcenter_REQUIREMENTS_CHECK_COMMAND $DEP 1>/dev/null 2>&1; then
			print_message "found $DEP installed" bold
		else
			print_notice "Trying to automatically install $DEP ..."
			htvcenter_install_os_dependency $DEP
			if [ $? != 0 ]; then
				print_error "$DEP could not be installed. Please install manually to continue"
				return 1
			fi
		fi
	done

	# check if the build tmp directory is writable
	if [ ! -d "$htvcenter_BUILD_TMP_DIR" ]; then
		if ! mkdir -p "$htvcenter_BUILD_TMP_DIR"; then
			print_error "$htvcenter_BUILD_TMP_DIR could not be created by user `whoami`."
			return 1;
		fi
	elif [ ! -w "$htvcenter_BUILD_TMP_DIR" -o ! -x "$htvcenter_BUILD_TMP_DIR" ]; then
		print_error "$htvcenter_BUILD_TMP_DIR must exist and be writable by user `whoami`."
		return 1;
	fi

	# get a list of plugins for checking their requirements
	htvcenter_PACKAGE_COMPONENT_LIST=`ls $htvcenter_SOURCE_DIR/plugins | grep -v Makefile | grep -v CVS`
	for htvcenter_PLUGIN in $htvcenter_PACKAGE_COMPONENT_LIST; do
		PLUGIN_CONF=$htvcenter_SOURCE_DIR/plugins/$htvcenter_PLUGIN/etc/htvcenter-plugin-$htvcenter_PLUGIN"".conf
		if [ -f $PLUGIN_CONF ]; then
			. $PLUGIN_CONF
		else
			print_notice "htvcenter-plugin-$htvcenter_PLUGIN has no config file. Unable to check dependencies!"
			continue
		fi
		echo "htvcenter-plugin-$htvcenter_PLUGIN requires: `echo $htvcenter_PLUGIN_BUILD_REQUIREMENTS`"
		for DEP in `echo $htvcenter_PLUGIN_BUILD_REQUIREMENTS | sed -e "s/,//g"`; do
			if $htvcenter_REQUIREMENTS_CHECK_COMMAND $DEP 1>/dev/null 2>&1; then
				print_message "found $DEP installed" bold
			else
				echo "NOTICE: Trying to automatically install $DEP ..."
				htvcenter_install_os_dependency $DEP
				if [ $? != 0 ]; then
					print_error "$DEP could not be installed. Please install manually to continue"
					return 1
				fi
			fi
		done
	done
	echo "Checking for required components to compile htvcenter finished successfully"

}


# function to download+cache source packages in the package-dir
# -> this is for "make all" / comilation phase
function htvcenter_cache_or_download() {
	# 1 param: 		component name
	# 2 param:		component build config file
	htvcenter_SOURCE_COMPONENT_NAME=$1
	htvcenter_SOURCE_COMPONENT_BUILD_CONFIG=$2
	if [ "$htvcenter_SOURCE_COMPONENT_BUILD_CONFIG" == "" ]; then
		. $htvcenter_SOURCE_DIR/etc/build.conf/$htvcenter_SOURCE_COMPONENT_NAME.conf
	else
		. $htvcenter_SOURCE_COMPONENT_BUILD_CONFIG
	fi
	htvcenter_SOURCE_COMPONENT_FILE=`basename $htvcenter_SOURCE_DOWNLOAD`
	CURRENT_DIR=`pwd`
	if [ -f $htvcenter_BUILD_TMP_DIR/htvcenter-build/$htvcenter_SOURCE_COMPONENT_NAME/source/$htvcenter_SOURCE_COMPONENT_FILE ]; then
		#if [ "$htvcenter_SOURCE_COMPONENT_NAME" == "htvcenter-*"]; then
		#	COMPONENTO_NAME="htvcenter-*"
		#else
		#	COMPONENTO_NAME="$htvcenter_SOURCE_COMPONENT_NAME"
		#fi

		if [[ "$htvcenter_SOURCE_COMPONENT_NAME" = "htvcenter-"* ]]; then
    			COMPONENTO_NAME="$(echo "$htvcenter_SOURCE_COMPONENT_NAME" | sed 's/htvcenter-\([a-zA-Z0-9_-]\)/htvcenter-\1/g')"
		else
   			 COMPONENTO_NAME="$htvcenter_SOURCE_COMPONENT_NAME"
		fi
		print_message "-> found component $COMPONENTO_NAME OK" bold
#	else
#		mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/$htvcenter_SOURCE_COMPONENT_NAME/source/
#		cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/$htvcenter_SOURCE_COMPONENT_NAME/source/
#		if ! wget $htvcenter_SOURCE_DOWNLOAD; then
#			print_error "Could not download $htvcenter_SOURCE_COMPONENT_NAME from " \
#				"$htvcenter_SOURCE_DOWNLOAD" \
#			print_error "Please put $htvcenter_SOURCE_COMPONENT_FILE in " \
#				"$htvcenter_BUILD_TMP_DIR/htvcenter-build/$htvcenter_SOURCE_COMPONENT_NAME/source/" \
#				" and try again."
#			exit 1
#		fi
#		cd $CURRENT_DIR
	fi
	cd $CURRENT_DIR
}



#function to compile a component from the source
# -> this is for "make all" / compilation phase
function htvcenter_compile_from_source() {
	# 1 param: 		component name
	# 2 param:		component build config file
	# optional variables :
	# htvcenter_CONFIGURE		command to use for configure (default "./configure" if exists)
	# htvcenter_PRE_MAKE		commands to run before make
	# htvcenter_POST_MAKE		commands to run after make
	htvcenter_SOURCE_COMPONENT_NAME=$1
	htvcenter_SOURCE_COMPONENT_BUILD_CONFIG=$2
	if [ "$htvcenter_SOURCE_COMPONENT_BUILD_CONFIG" == "" ]; then
		. $htvcenter_SOURCE_DIR/etc/build.conf/$htvcenter_SOURCE_COMPONENT_NAME.conf
	else
		. $htvcenter_SOURCE_COMPONENT_BUILD_CONFIG
	fi
	htvcenter_SOURCE_COMPONENT_FILE=`basename $htvcenter_SOURCE_DOWNLOAD`
	CURRENT_DIR=`pwd`
	# check if it is already compiled
	if [ ! -f $htvcenter_BUILD_TMP_DIR/htvcenter-build/$htvcenter_SOURCE_COMPONENT_NAME/$htvcenter_SOURCE_BINARY_RESULT ]; then
		# nope, then we have to build it
		# unpack
		cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/$htvcenter_SOURCE_COMPONENT_NAME/
		htvcenter_SOURCE_COMPONENT_FILE_TYPE=`echo $htvcenter_SOURCE_COMPONENT_FILE | sed -e "s/.*\.//g"`
		if [ "$htvcenter_SOURCE_COMPONENT_FILE_TYPE" == "bz2" ]; then
			tar -xjf source/$htvcenter_SOURCE_COMPONENT_FILE
		else
			tar -xzf source/$htvcenter_SOURCE_COMPONENT_FILE
		fi
		cd $htvcenter_SOURCE_COMPONENT_NAME-$htvcenter_SOURCE_VERSION

		# configure
		if [ "$htvcenter_CONFIGURE" != "" ]; then
			$htvcenter_CONFIGURE
		elif [ -f ./configure ]; then
			chmod +x ./configure && ./configure
		fi

		# pre-make
		eval $htvcenter_PRE_MAKE

		# make
		make $htvcenter_MAKE_TARGET
		# we do not run make install, if needed pls run it in post-make

		# post-make
		eval $htvcenter_POST_MAKE

		unset htvcenter_CONFIGURE htvcenter_PRE_MAKE htvcenter_POST_MAKE
		cd $CURRENT_DIR
	else
		print_message "-> Found $htvcenter_SOURCE_BINARY_RESULT already in the build-cache" bold
		print_message "-> Skipping compilation, taking the ready built component from the cache" bold
	fi
}



# function to create the default initrd-template during the compile stage
# -> this is for "make install" / installation phase
function htvcenter_create_default_initrd_template() {

	CURRENT_DIR=`pwd`
	htvcenter_SOURCE_DIR_FULL_PATH=`cd $htvcenter_SOURCE_DIR && pwd && cd $CURRENT_DIR`
	echo "Creating the default initrd-template"
	# install build deps
	export FORCE_INSTALL=true
	if [ -f /etc/debian_version ]; then
		htvcenter_install_os_dependency gcc
		htvcenter_install_os_dependency rpcbind
		htvcenter_install_os_dependency rsync
		htvcenter_install_os_dependency zlib1g-dev
		htvcenter_install_os_dependency netbase
		htvcenter_install_os_dependency patch
		htvcenter_install_os_dependency lvm2
		htvcenter_install_os_dependency ethtool
		htvcenter_install_os_dependency dropbear
		htvcenter_install_os_dependency acpid
	elif [ -f /etc/redhat-release ]; then
		htvcenter_install_os_dependency gcc
		htvcenter_install_os_dependency glibc-static
		htvcenter_install_os_dependency rpcbind
		htvcenter_install_os_dependency rsync
		htvcenter_install_os_dependency zlib-devel
		htvcenter_install_os_dependency zlib-static
		htvcenter_install_os_dependency lvm2
		htvcenter_install_os_dependency ethtool
		htvcenter_install_os_dependency dropbear
		htvcenter_install_os_dependency acpid
	elif [ -f /etc/SuSE-release ]; then
		htvcenter_install_os_dependency gcc
		htvcenter_install_os_dependency rpcbind
		htvcenter_install_os_dependency rsync
		htvcenter_install_os_dependency zlib-devel
		htvcenter_install_os_dependency lvm2
		htvcenter_install_os_dependency ethtool
		htvcenter_install_os_dependency dropbear
		htvcenter_install_os_dependency acpid
	fi

	# getting + compiling busybox
	. $htvcenter_SOURCE_DIR/etc/build.conf/busybox.conf
	htvcenter_cache_or_download busybox
	htvcenter_SOURCE_COMPONENT_BUILD_DIR=$htvcenter_BUILD_TMP_DIR/htvcenter-build/busybox/busybox-$htvcenter_SOURCE_VERSION/
	export htvcenter_PRE_MAKE="cp $htvcenter_SOURCE_DIR_FULL_PATH/etc/build.conf/busybox.configuration $htvcenter_SOURCE_COMPONENT_BUILD_DIR/.config && make oldconfig"
	export htvcenter_POST_MAKE="make install"
	htvcenter_compile_from_source busybox
	unset htvcenter_PRE_MAKE
	unset htvcenter_POST_MAKE

	# getting pciutils
	htvcenter_cache_or_download pciutils
	# compile static
	export LDFLAGS="-static"
	# patch for pcimodules
	. $htvcenter_SOURCE_DIR/etc/build.conf/pciutils.conf
	htvcenter_SOURCE_PCIUTILS_DIR="$htvcenter_BUILD_TMP_DIR/htvcenter-build/pciutils/pciutils-$htvcenter_SOURCE_VERSION/"
	export htvcenter_PRE_MAKE="cd $htvcenter_SOURCE_PCIUTILS_DIR; patch -p1 < $htvcenter_SOURCE_DIR/etc/build.conf/pciutils-pcimodules.patch; cd -"
	htvcenter_compile_from_source pciutils
	unset LDFLAGS
	unset htvcenter_PRE_MAKE
	unset htvcenter_POST_MAKE

	# create the initroot
	mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot
	cp -aR $htvcenter_SOURCE_COMPONENT_BUILD_DIR/_install/* $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/
	# create symlink to /lib64 for 64bit systems
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/
	ln -sf lib lib64
	cd $CURRENT_DIR
	# create lib dir + copy ld-linux
	mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib
	if ls /lib64/ld-* 2>/dev/null 1>&1; then
		for LDLINUX in `ls /lib64/ld-*`; do
			cp -af $LDLINUX $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/
			if [ -h $LDLINUX ]; then
				LDDFILE=`readlink -f $LDLINUX`
				LDDIR=`dirname $LDDFILE`
				mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/$LDDIR
				cp -af $LDDFILE $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/$LDDIR
			fi
		done
	else
		for LDLINUX in `ls /lib/ld-*`; do
			cp -af $LDLINUX $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/
			if [ -h $LDLINUX ]; then
				LDDFILE=`readlink -f $LDLINUX`
				LDDIR=`dirname $LDDFILE`
				mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/$LDDIR
				cp -af $LDDFILE $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/$LDDIR
			fi
		done
	fi
	# add the libs busybox depends on
	for LIB in `htvcenter_build_find_libs $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin/busybox`; do
		LIB=`echo $LIB | sed -e "s/-[0-9].*.so//g" | sed -e "s/\.so.[0-9].*//g"`
		if [ "$LIB" != "/lib/" ]; then
			cp -a $LIB""* $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/
		fi
	done
	# remove wget link
	rm -f $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin/wget
	# add some more utils + their libs
	for UTIL in $htvcenter_INITRD_COMPONENTS; do
		cp -a $UTIL $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin
		echo "Adding $UTIL to default initrd-template"
		for LIB in `htvcenter_build_find_libs $UTIL`; do
			LIB=`echo $LIB | sed -e "s/-[0-9].*.so//g" | sed -e "s/\.so.[0-9].*//g"`
			if [ "$LIB" != "/lib/" ]; then
				cp -af $LIB""* $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/
			fi
		done
	done
	# fix wget
	rm -f $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/usr/bin/wget
	# if lvm is a link to lvm.static (e.g. on centos)
	if [ -x /sbin/lvm.static ]; then
		cp -a /sbin/lvm.static $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin/
	fi
	# create default udhcpc script
	mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/usr/share/udhcpc
	cat > $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/usr/share/udhcpc/default.script << EOF
#!/bin/sh
# udhcpc script edited by Tim Riker <Tim@Rikers.org>
# changed by infernix <infernix@infernix.net>: we don't need to do resolv.conf again
# because we only call this for additional interfaces
[ -z "\$1" ] && echo "Error: should be called from udhcpc" && exit 1
[ -n "\$broadcast" ] && BROADCAST="broadcast \$broadcast"
[ -n "\$subnet" ] && NETMASK="netmask \$subnet"

case "\$1" in
	deconfig)
		/sbin/ifconfig \$interface 0.0.0.0
		;;
	renew|bound)
		/sbin/ifconfig \$interface \$ip \$BROADCAST \$NETMASK
		if [ -n "\$router" ] ; then
			echo "deleting routers"
			while /sbin/route del default gw 0.0.0.0 dev \$interface ; do
				:
			done
			metric=0
			for i in \$router ; do
				/sbin/route add default gw \$i dev \$interface metric \$((metric++))
			done
		fi
		;;
esac
exit 0
EOF
	chmod 755 $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/usr/share/udhcpc/default.script

	# take vol_id or blkid
	if [ -x  /lib/udev/vol_id ]; then
		UDEV_UTIL="/lib/udev/vol_id"
	elif [ -x /sbin/blkid ]; then
		UDEV_UTIL="/sbin/blkid"
	fi
	cp -a $UDEV_UTIL $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin
	echo "Adding $UDEV_UTIL to default initrd-template"
	for LIB in `htvcenter_build_find_libs $UDEV_UTIL`; do
		LIB=`echo $LIB | sed -e "s/-[0-9].*.so//g" | sed -e "s/\.so.[0-9].*//g"`
		if [ "$LIB" != "/lib/" ]; then
			cp -af $LIB""* $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/
		fi
	done
	if [ "$UDEV_UTIL" == "/sbin/blkid" ]; then
		cp -af $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin/blkid $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin/vol_id
	fi


	# fix reboot for the initrd -> reboot -f (it's simply faster)
	rm -f $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/sbin/reboot
	cat >> $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/sbin/reboot << EOF
#!/bin/bash
/bin/busybox reboot -f
EOF
	chmod +x $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/sbin/reboot
	# create shutdown from reboot
	cp -af $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/sbin/reboot $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/sbin/shutdown
	# creating initrd directories
	for DIR in $htvcenter_INITRD_DIRECTORIES; do
		mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/$DIR
	done
	touch $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/var/lib/nfs/rmtab
	touch $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/var/lib/nfs/xtab
	touch $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/var/lib/nfs/etab
	touch $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/var/lib/nfs/state
	# prepare etc
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/etc
	ln -sf /proc/mounts mtab
	ln -sf rc.d/init.d init.d
	touch localtime
	# create shells file
	echo "/bin/bash" > shells
	echo "none            /dev/pts        devpts        gid=0,mode=620    0 0" > fstab
	# passwd + group
	echo "root:x:0:0:root:/root:/bin/bash" > passwd
	echo "rpc:x:100:100:rpc:/tmp:/bin/bash" >> passwd
	echo "root:x:0:root" > group
	echo "rpc:x:100:root" >> group
	# hosts
	echo "127.0.0.1" > hosts
	# netconfig ? fedora has + needs it
	if [ -f "/etc/netconfig" ]; then
		cp -a /etc/netconfig .
	fi
	# services
	cp -a /etc/services .
	# nsswitch
	echo "passwd:     files" > nsswitch.conf
	echo "shadow:     files" >> nsswitch.conf
	echo "group:      files" >> nsswitch.conf
	# cp libnss
	if ls /lib64/libnss_files* 2>/dev/null 1>&1; then
		cp -aR /lib64/libnss_files* $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/
	else
		cp -aR /lib/libnss_files* $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/  2>/dev/null
	fi
	if ls /lib/x86_64-linux-gnu/libnss_files* 2>/dev/null 1>&1; then
		mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/x86_64-linux-gnu/
		cp -aR /lib/x86_64-linux-gnu/libnss_files* $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/x86_64-linux-gnu/
	fi

	# installing pciutils + pcimodules
	cp -a $htvcenter_SOURCE_PCIUTILS_DIR/lspci $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/sbin/
	cp -a $htvcenter_SOURCE_PCIUTILS_DIR/pcimodules $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/sbin/
	# installing dropbear
	DROPBEAR_BIN=`which dropbear`
	DBCLIENT_BIN=`which dbclient`
	DROPBEARKEY_BIN=`which dropbearkey`
	cp -a $DROPBEAR_BIN $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/sbin/
	cp -a $DBCLIENT_BIN $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin/
	cp -a $DROPBEARKEY_BIN $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/bin/
	# install dropbear libs
	for LIB in `htvcenter_build_find_libs $DROPBEAR_BIN`; do
		LIB=`echo $LIB | sed -e "s/-[0-9].*.so//g" | sed -e "s/\.so.[0-9].*//g"`
		if [ "$LIB" != "/lib/" ]; then
			cp -af $LIB""* $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/lib/
		fi
	done
	# creating the initrd devices
	cp -a $htvcenter_SOURCE_DIR_FULL_PATH/etc/build.conf/initrd-devices.conf $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/etc/
	rm -rf $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/dev
	mkdir -p $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/dev
	# copy acpi config
	if [ -d /etc/acpi ]; then
		cp -aR /etc/acpi $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/etc/
	fi
	# create rcS
	rm -f $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/etc/rc.d/init.d/rcS
	cat >> $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/etc/rc.d/init.d/rcS << EOF
#!/bin/bash
export SHELL=/bin/bash
export \$(eval cat /proc/cmdline)
echo "htvcenter resource \$id is starting rcS" > /dev/console

EOF
	chmod +x $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/etc/rc.d/init.d/rcS

	# create inittab
	rm -f $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/etc/inittab
	cat >> $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/etc/inittab << EOF

# inittab
::askfirst:-/bin/bash
tty2::askfirst:-/bin/bash
tty3::askfirst:-/bin/bash
tty4::askfirst:-/bin/bash
::sysinit:/etc/init.d/rcS
::restart:/sbin/reboot

# Stuff to do before rebooting
::ctrlaltdel:/sbin/reboot
::shutdown:/sbin/halt

EOF
}


# function to create a tgz file out of the initroot/initrd-content
# -> this is for "make install" / installation phase
function htvcenter_pack_default_initrd_template() {
	# pack
	CURRENT_DIR=`pwd`
	htvcenter_SOURCE_DIR_FULL_PATH=`cd $htvcenter_SOURCE_DIR && pwd && cd $CURRENT_DIR`
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/sbin $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/bin
	# create the initrd package fitting to the build arch + distri
	KERNEL_ARCH=`uname -m`
	if echo $KERNEL_ARCH | grep i.*86 1>/dev/null; then
		# i386
		htvcenter_CLIENT_ARCH=i386
	else
		htvcenter_CLIENT_ARCH=x86_64
	fi
	# find out the short distri name
	if [ -f /etc/debian_version ]; then
		# debian or ubuntu, try to find out without lsb-release which may not be installed
		if grep -i ubuntu /etc/apt/sources.list 1>/dev/null; then
			htvcenter_SHORT_DISTRI_NAME="ubuntu"
		else
			htvcenter_SHORT_DISTRI_NAME="debian"
		fi
	elif [ -f /etc/redhat-release ]; then
		htvcenter_SHORT_DISTRI_NAME="centos"
	fi
	rm -f $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.$htvcenter_SHORT_DISTRI_NAME.$htvcenter_CLIENT_ARCH.tgz
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/initroot/
	tar -czf $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.$htvcenter_SHORT_DISTRI_NAME.$htvcenter_CLIENT_ARCH.tgz *
	cd $CURRENT_DIR
	echo "Created initrd-template $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.$htvcenter_SHORT_DISTRI_NAME.$htvcenter_CLIENT_ARCH.tgz"
}


# function to provide adodb for Suse+Redhat systems only
# -> this is for "make" phase
function htvcenter_get_adodb() {
	if [ ! -f /etc/debian_version ]; then
		CURRENT_DIR=`pwd`
		htvcenter_cache_or_download adodb
		cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/adodb/
		tar -xzf source/adodb*.tgz
		cd $CURRENT_DIR
	fi
}

# function to install adodb for Suse + Redhat systems only
# -> this is for "make install" phase
function htvcenter_install_adodb() {
	if [ ! -f /etc/debian_version ]; then
		cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/adodb/adodb $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/include/
	fi
}



# function to provide the api-documentation
# -> this is for "make" phase
function htvcenter_get_api_docu() {
	CURRENT_DIR=`pwd`
	htvcenter_cache_or_download htvcenter-api-docu
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-api-docu/
	tar -xzf source/htvcenter-api-docu-$htvcenter_SERVER_VERSION.tgz
	cd $CURRENT_DIR
}

# function to install the api-documentation
# -> this is for "make install" phase
function htvcenter_install_api_docu() {
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/server/zz_documentation/api
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-api-docu/htvcenter-api-docu-$htvcenter_SERVER_VERSION/* $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/server/zz_documentation/api/
}


# function to get the jquery bundle
# -> this is for "make " phase
function htvcenter_get_jquery_bundle() {
	# TODO gather version from build.conf file
	JQUERY_VERSION="1.3.2"
	CURRENT_DIR=`pwd`
	htvcenter_cache_or_download jquery
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/jquery/
	tar -xzf source/jquery-$JQUERY_VERSION.tgz
	cd $CURRENT_DIR
}

# function to install the jquery-bundle
# -> this is for "make install" phase
function htvcenter_install_jquery_bundle() {
	JQUERY_VERSION="1.3.2"
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/jquery
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/css/jquery
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/jquery/jquery-$JQUERY_VERSION/* $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/jquery/
	# exclude .txt files
	rm -f $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/jquery/development-bundle/*.txt
	# css
	rm -rf $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/jquery/css
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/jquery/jquery-$JQUERY_VERSION/css/* $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/css/jquery/
	# also install it for the cloud plugin
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud/cloud-portal/web/user/js
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud/cloud-portal/web/user/css
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/jquery/jquery-$JQUERY_VERSION/* $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud/cloud-portal/web/user/js/
	# exclude .txt files
	rm -f $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud/cloud-portal/web/user/js/development-bundle/*.txt
	# css
	rm -rf $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud/cloud-portal/web/user/js/css
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/jquery/jquery-$JQUERY_VERSION/css/* $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud/cloud-portal/web/user/css/
	# also install it for the cloud-zones plugin
	if [ -d $htvcenter_SOURCE_DIR/plugins/cloud-zones ]; then
		mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud-zones/cloud-portal/web/user/js
		mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud-zones/cloud-portal/web/user/css
		cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/jquery/jquery-$JQUERY_VERSION/* $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud-zones/cloud-portal/web/user/js/
		# exclude .txt files
		rm -f $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud-zones/cloud-portal/web/user/js/development-bundle/*.txt
		# css
		rm -rf $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud-zones/cloud-portal/web/user/js/css
		cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/jquery/jquery-$JQUERY_VERSION/css/* $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud-zones/cloud-portal/web/user/css/
	fi

}


# function to get the interface js
# -> this is for "make " phase
function htvcenter_get_js_interface() {
	# TODO gather version from build.conf file
	INTERFACE_VERSION="1.2"
	CURRENT_DIR=`pwd`
	htvcenter_cache_or_download js-interface
	rm -rf "$htvcenter_BUILD_TMP_DIR/htvcenter-build/js-interface/interface $INTERFACE_VERSION"
	rm -rf "$htvcenter_BUILD_TMP_DIR/htvcenter-build/js-interface/interface_$INTERFACE_VERSION"
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/js-interface/
	unzip -q source/interface_$INTERFACE_VERSION.zip
	for f in *; do mv "$f" `echo $f | tr ' ' '_'` 2>/dev/null; done
	cd $CURRENT_DIR
}


# function to install the jquery-bundle
# -> this is for "make install" phase
function htvcenter_install_js_interface() {
	INTERFACE_VERSION="1.2"
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/interface
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/js-interface/interface_$INTERFACE_VERSION/interface.js $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/interface/
	# also install it for the cloud plugin
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud/cloud-portal/web/user/js
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/js-interface/interface_$INTERFACE_VERSION/interface.js $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud/cloud-portal/web/user/js/
	# also install it for the cloud-zones plugin
	if [ -d $htvcenter_SOURCE_DIR/plugins/cloud-zones ]; then
		mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud-zones/cloud-portal/web/user/js
		cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/js-interface/interface_$INTERFACE_VERSION/interface.js $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/cloud-zones/cloud-portal/web/user/js/
	fi
}



# function to get the htmlobjects
# -> this is for "make " phase
function htvcenter_get_htmlobjects() {
	HTMLOBJECTS_VERSION="v1.1_r186"
	CURRENT_DIR=`pwd`
	htvcenter_cache_or_download htmlobjects
	rm -rf "$htvcenter_BUILD_TMP_DIR/htvcenter-build/htmlobjects/htmlobjects"
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/htmlobjects/
	tar -xzf source/htmlobjects_$HTMLOBJECTS_VERSION.tar.gz
	cd $CURRENT_DIR
}


# function to install the htmlobjects
# -> this is for "make install" phase
function htvcenter_install_htmlobjects() {
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/class/htmlobjects
	cp -aR $htvcenter_BUILD_TMP_DIR/htvcenter-build/htmlobjects/htmlobjects/* $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/class/htmlobjects/
}



# function to get the jqClock jquery plugin
# -> this is for "make " phase
function htvcenter_get_jqclock() {
	JQCLOCK_VERSION="2.0.1"
	CURRENT_DIR=`pwd`
	htvcenter_cache_or_download jqclock
	rm -rf "$htvcenter_BUILD_TMP_DIR/htvcenter-build/jqclock/jqclock"
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/jqclock/
	tar -xzf source/jqclock-$JQCLOCK_VERSION.tgz
	cd $CURRENT_DIR
}


# function to install the jqClock jquery plugin
# -> this is for "make install" phase
function htvcenter_install_jqclock() {
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js
	cp -aR $htvcenter_BUILD_TMP_DIR/htvcenter-build/jqclock/jqClock.min.js $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/
}


# function to get the treemenu.js
# -> this is for "make " phase
function htvcenter_get_treemenu_js() {
	TREEMENUJS_VERSION="0.1"
	CURRENT_DIR=`pwd`
	htvcenter_cache_or_download treemenujs
	rm -rf "$htvcenter_BUILD_TMP_DIR/htvcenter-build/treemenujs/treemenujs"
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/treemenujs/
	tar -xzf source/treemenu-js.$TREEMENUJS_VERSION.tgz
	cd $CURRENT_DIR
}


# function to install the treemenu.js
# -> this is for "make install" phase
function htvcenter_install_treemenu_js() {
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js
	cp -aR $htvcenter_BUILD_TMP_DIR/htvcenter-build/treemenujs/treemenu.js $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/
	cp -aR $htvcenter_BUILD_TMP_DIR/htvcenter-build/treemenujs/menu.js $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/js/
}


# function to get the treemenu icons
# -> this is for "make " phase
function htvcenter_get_treemenu_icons() {
	TREEMENU_ICONS_VERSION="0.1"
	CURRENT_DIR=`pwd`
	htvcenter_cache_or_download treemenuicons
	rm -rf "$htvcenter_BUILD_TMP_DIR/htvcenter-build/treemenuicons/treemenuicons"
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/treemenuicons/
	tar -xzf source/treemenu-icons.$TREEMENU_ICONS_VERSION.tgz
	cd $CURRENT_DIR
}


# function to install the treemenu icons
# -> this is for "make install" phase
function htvcenter_install_treemenu_icons() {
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/img/menu
	cp -aR $htvcenter_BUILD_TMP_DIR/htvcenter-build/treemenuicons/*.png $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/img/menu
}



# function to get the phplib class
# -> this is for "make " phase
function htvcenter_get_phplib() {
	CURRENT_DIR=`pwd`
	htvcenter_cache_or_download phplib
	cd $htvcenter_BUILD_TMP_DIR/htvcenter-build/phplib/
	tar -xzf source/phplib.tgz
	cd $CURRENT_DIR
}


# function to install the phplib class
# -> this is for "make install" phase
function htvcenter_install_phplib() {
	mkdir -p $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/class
	cp -aR $htvcenter_BUILD_TMP_DIR/htvcenter-build/phplib/*.php $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/class/
}


# function to get the additional initrd-templates
# -> this is for "make " phase
function htvcenter_get_initrd_templates() {
	htvcenter_cache_or_download htvcenter-initrd-template.centos.i386
	htvcenter_cache_or_download htvcenter-initrd-template.centos.x86_64
	htvcenter_cache_or_download htvcenter-initrd-template.debian.i386
	htvcenter_cache_or_download htvcenter-initrd-template.debian.x86_64
	htvcenter_cache_or_download htvcenter-initrd-template.ubuntu.i386
	htvcenter_cache_or_download htvcenter-initrd-template.ubuntu.x86_64
}


# function to install the additional initrd-templates
# -> this is for "make install" phase
function htvcenter_install_initrd_templates() {
	CLIENT_VERSION="5.2.0"
	KERNEL_ARCH=`uname -m`
	if echo $KERNEL_ARCH | grep i.*86 1>/dev/null; then
		# i386
		htvcenter_CLIENT_ARCH=i386
	else
		htvcenter_CLIENT_ARCH=x86_64
	fi
	# find out the short distri name
	if [ -f /etc/debian_version ]; then
		# debian or ubuntu, try to find out without lsb-release which may not be installed
		if grep -i ubuntu /etc/apt/sources.list 1>/dev/null; then
			htvcenter_SHORT_DISTRI_NAME="ubuntu"
		else
			htvcenter_SHORT_DISTRI_NAME="debian"
		fi
	elif [ -f /etc/redhat-release ]; then
		htvcenter_SHORT_DISTRI_NAME="centos"
	elif [ -f /etc/SuSE-release ]; then
		htvcenter_SHORT_DISTRI_NAME="centos"
	fi

	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-initrd-template.centos.i386/source/htvcenter-initrd-template.$CLIENT_VERSION.centos.i386.tgz $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.centos.i386.tgz
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-initrd-template.centos.x86_64/source/htvcenter-initrd-template.$CLIENT_VERSION.centos.x86_64.tgz $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.centos.x86_64.tgz
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-initrd-template.debian.i386/source/htvcenter-initrd-template.$CLIENT_VERSION.debian.i386.tgz $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.debian.i386.tgz
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-initrd-template.debian.x86_64/source/htvcenter-initrd-template.$CLIENT_VERSION.debian.x86_64.tgz $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.debian.x86_64.tgz
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-initrd-template.ubuntu.i386/source/htvcenter-initrd-template.$CLIENT_VERSION.ubuntu.i386.tgz $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.ubuntu.i386.tgz
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-initrd-template.ubuntu.x86_64/source/htvcenter-initrd-template.$CLIENT_VERSION.ubuntu.x86_64.tgz $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-template.ubuntu.x86_64.tgz
	# set the default initrd template for creating the default kernel during init
	cp -a $htvcenter_BUILD_TMP_DIR/htvcenter-build/htvcenter-initrd-template.$htvcenter_SHORT_DISTRI_NAME.$htvcenter_CLIENT_ARCH/source/htvcenter-initrd-template.$CLIENT_VERSION.$htvcenter_SHORT_DISTRI_NAME.$htvcenter_CLIENT_ARCH.tgz $DESTINATION_DIR$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-default.tgz

}



# --------------------------------------------------------------------
# ------------------------- update function --------------------------
# --------------------------------------------------------------------

# function to run commands before the update of htvcenter
function htvcenter_pre_update() {
	$htvcenter_SERVER_BASE_DIR/htvcenter/bin/htvcenter-update pre -f
}

# function to run commands after the update of htvcenter
function htvcenter_post_update() {
	$htvcenter_SERVER_BASE_DIR/htvcenter/bin/htvcenter-update post -f
}

# function to update htvcenter base
function htvcenter_base_update() {
	$htvcenter_SERVER_BASE_DIR/htvcenter/bin/htvcenter-update base -f
}

# function to update the htvcenter initrds
function htvcenter_initrd_update() {
	$htvcenter_SERVER_BASE_DIR/htvcenter/bin/htvcenter-update initrds -f
}






