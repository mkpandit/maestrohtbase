#!/bin/bash
# this is the server function file for htvcenter
# only server functions should go in here
#
# htvcenter Enterprise developed by htvcenter Enterprise GmbH.
#
# All source code and content (c) Copyright 2014, htvcenter Enterprise GmbH unless specifically noted otherwise.
#
# This source code is released under the htvcenter Enterprise Server and Client License, unless otherwise agreed with htvcenter Enterprise GmbH.
# The latest version of this license can be found here: http://htvcenter-enterprise.com/license
#
# By using this software, you acknowledge having read this license and agree to be bound thereby.
#
#           http://htvcenter-enterprise.com
#
# Copyright 2014, htvcenter Enterprise GmbH <info@htvcenter-enterprise.com>
#

export LANGUAGE=C
export LANG=C
export LC_ALL=C

if [ "$htvcenter_SERVER_BASE_DIR" == "" ]; then
	echo "ERROR: Please export htvcenter_SERVER_BASE_DIR before sourcing $0"
	exit 1
fi

# source the server configuration
htvcenter_SERVER_CONF=$htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf
. $htvcenter_SERVER_CONF

# some definitions
htvcenter_UNWANTED_MODULES="cops.o ipddp.o ltpc.o hdlcdrv.o airo_cs.o aironet4500_cs.o airo.o axnet_cs.o fmvj18x_cs.o ibmtr_cs.o netwave_cs.o nmclan_cs.o pcnet_cs.o ray_cs.o smc91c92_cs.o wavelan_cs.o wvlan_cs.o xirc2ps_cs.o xircom_cb.o xircom_tulip_cb.o ppp_async.o ppp_deflate.o ppp_generic.o ppp_synctty.o wavelan.o wd.o winbond-840.o airo_cs.o airo.o hermes.o orinoco_cs.o orinoco.o orinoco_plx.o orinoco_old_cs.o cops.ko ipddp.ko ltpc.ko hdlcdrv.ko airo_cs.ko aironet4500_cs.ko airo.ko axnet_cs.ko fmvj18x_cs.ko ibmtr_cs.ko netwave_cs.ko nmclan_cs.ko pcnet_cs.ko ray_cs.ko smc91c92_cs.ko wavelan_cs.ko wvlan_cs.ko xirc2ps_cs.ko xircom_cb.ko xircom_tulip_cb.ko ppp_async.ko ppp_deflate.ko ppp_generic.ko ppp_synctty.ko wavelan.ko wd.ko winbond-840.ko airo_cs.ko airo.ko hermes.ko orinoco_cs.ko orinoco.ko orinoco_plx.ko orinoco_old_cs.ko de600.ko de620.ko defxx.ko depca.ko hp100.ko hp.ko hp-plus.ko ne3210.ko ne.ko netwave_cs.ko ipw2100.ko proteon.ko skisa.ko"
htvcenter_DEFAULT_INITRD_TEMPLATE="$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-initrd-default.tgz"
htvcenter_SERVER_LINUXRC="$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-linuxrc"
htvcenter_MAX_INITRD_SIZE=128000
htvcenter_DEFAULT_RAM_DISK_BLOCK_SIZE=1024
# static directory define for the server state backups
htvcenter_SERVER_STATE_DIR="/var/spool/htvcenter-state"
# which files/dirs to backup/restore (base only, plugin need to care about their bacukp/restore themselves)
htvcenter_SERVER_STATE_FILES="$htvcenter_SERVER_BASE_DIR/htvcenter/etc/htvcenter-server.conf
	$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates//htvcenter-initrd-default.tgz	\
	$htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates//htvcenter-linuxrc"
htvcenter_SERVER_STATE_DIRS="$htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/ \
	$htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/	\
	$htvcenter_SERVER_BASE_DIR/htvcenter/web/boot-service/	\
	$htvcenter_SERVER_BASE_DIR/htvcenter/web/base/plugins/"


# function to export all given configuration from the
# main htvcenter-server config file
function htvcenter_server_get_config() {
	. $htvcenter_SERVER_CONF
	for VAR in `cat $htvcenter_SERVER_CONF | grep -v ^# | grep htvcenter | cut -d'=' -f1`; do
		eval `export $VAR`
	done

	# make sure /sbin and /usr/sbin are in our PATH, because we might be running as the webserver user,
	# in which case the ifconfig and route commands will fail, leaving the variables empty (bad!)
	PATH=/sbin:/usr/sbin:$PATH
	# get ip configuration
	export htvcenter_SERVER_IP_ADDRESS=`ifconfig $htvcenter_SERVER_INTERFACE  2>/dev/null | grep inet | grep -v inet6 | cut -d':' -f2 | awk {' print $1 '} | head -n 1`
	export htvcenter_SERVER_BROADCAST_ADDRESS=`ifconfig $htvcenter_SERVER_INTERFACE  2>/dev/null | grep inet | grep -v inet6 | cut -d':' -f3 | awk {' print $1 '} | head -n 1`
	export htvcenter_SERVER_SUBNET_MASK=`ifconfig $htvcenter_SERVER_INTERFACE  2>/dev/null | grep inet | grep -v inet6 | cut -d':' -f4 | awk {' print $1 '} | head -n 1`
	export htvcenter_SERVER_DEFAULT_GATEWAY=`route -n | grep ^0.0.0.0 | head -n1 | awk {' print $2 '}`
}
# run immediatly
htvcenter_server_get_config

# define wget to use with https
if [ "$htvcenter_WEB_PROTOCOL" == "https" ]; then
	export WGET="wget --no-check-certificate"
else
	export WGET="wget"
fi


# --------------------------------------------------------------------
# ------------------------- kernel functions -------------------------
# --------------------------------------------------------------------


# function to create kernels
# param 1	: kernel name
# param 2	: kernel-version
# param 3	: path-to-kernel-files
function htvcenter_server_create_kernel() {
	htvcenter_SERVER_KERNEL_NAME=$1
	htvcenter_SERVER_KERNEL_VERSION=$2
	htvcenter_SERVER_KERNEL_LOCATION=$3
	# htvcenter_SERVER_KERNEL_TYPE can be "ext2" or "initramfs"
	htvcenter_SERVER_KERNEL_TYPE=$4
	htvcenter_SERVER_INITRD_TEMPLATE=$5

	if [ "$htvcenter_SERVER_KERNEL_TYPE" == "" ]; then
		export htvcenter_SERVER_KERNEL_TYPE="initramfs"
	fi
	if [ "$htvcenter_SERVER_INITRD_TEMPLATE" == "" ]; then
		export htvcenter_SERVER_INITRD_TEMPLATE=$htvcenter_DEFAULT_INITRD_TEMPLATE
	fi
	# kernel there ?
	if [ ! -f "$htvcenter_SERVER_KERNEL_LOCATION/boot/vmlinuz-$htvcenter_SERVER_KERNEL_VERSION" ]; then
		echo "ERROR: Cannot find kernel file at $htvcenter_SERVER_KERNEL_LOCATION/boot/vmlinuz-$htvcenter_SERVER_KERNEL_VERSION!"
		return 1
	fi
	# system.map there ?
	if [ ! -f "$htvcenter_SERVER_KERNEL_LOCATION/boot/System.map-$htvcenter_SERVER_KERNEL_VERSION" ]; then
		echo "ERROR: Cannot find System.map at $htvcenter_SERVER_KERNEL_LOCATION/boot/System.map-$htvcenter_SERVER_KERNEL_VERSION!"
		return 1
	fi
	# module dir there ?
	if [ ! -d "$htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION" ]; then
		echo "ERROR: Cannot find kernel module directory at $htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION!"
		return 1
	fi
	# modules.pcimap there ?
	if [ ! -f "$htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION/modules.pcimap" ]; then
		echo "WARNING: Cannot find modules.pcimap in kernel module directory at $htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION. Trying to create it ..."
		if ! depmod -a -m -F $htvcenter_SERVER_KERNEL_LOCATION/boot/System.map-$htvcenter_SERVER_KERNEL_VERSION -b $htvcenter_SERVER_KERNEL_LOCATION $htvcenter_SERVER_KERNEL_VERSION; then
			echo "WARNING: Could not create modules.pcimap in kernel module directory at $htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION! Trying to continue ..."
		else
			echo "NOTICE: Created modules.pcimap in kernel module directory at $htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION."
		fi
	fi
	echo "Creating kernel $htvcenter_SERVER_KERNEL_NAME version $htvcenter_SERVER_KERNEL_VERSION ($htvcenter_SERVER_KERNEL_TYPE initrd)"
	# copy kernel + System-map
	cp -a $htvcenter_SERVER_KERNEL_LOCATION/boot/vmlinuz-$htvcenter_SERVER_KERNEL_VERSION $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/vmlinuz-$htvcenter_SERVER_KERNEL_NAME
	cp -a $htvcenter_SERVER_KERNEL_LOCATION/boot/System.map-$htvcenter_SERVER_KERNEL_VERSION $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/System.map-$htvcenter_SERVER_KERNEL_NAME
	# modules
	tar -C $htvcenter_SERVER_KERNEL_LOCATION/ -czf $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/modules-$htvcenter_SERVER_KERNEL_NAME.tgz lib/modules/$htvcenter_SERVER_KERNEL_VERSION
	# initrd
	mkdir -p $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME
	mkdir -p $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/modules/$htvcenter_SERVER_KERNEL_VERSION
	for MODULE in `find $htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION/kernel/drivers/net -type f | grep -v wireless`; do
		MODULE_NAME=`echo $MODULE | sed -e "s/.*\///"`
		if ! echo $htvcenter_UNWANTED_MODULES | grep $MODULE_NAME 1>/dev/null; then
			/bin/cp -f $MODULE $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/modules/$htvcenter_SERVER_KERNEL_VERSION
		fi
	done
	# also need virtio* for kvm virtio pci network card
	for MODULE in `find $htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION/kernel/drivers -type f -name virtio*`; do
		MODULE_NAME=`echo $MODULE | sed -e "s/.*\///"`
		if ! echo $htvcenter_UNWANTED_MODULES | grep $MODULE_NAME 1>/dev/null; then
			/bin/cp -f $MODULE $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/modules/$htvcenter_SERVER_KERNEL_VERSION
		fi
	done

	# for bnx2 support
	for MODULE in `find  $htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION/ -type f | egrep 'mptbase|mptsas|mptscsih|scsi_transport_sas|jfs|crc32|bnx2|bnx2x|hid|mdio|dca|virtio'`; do
		MODULE_NAME=`echo $MODULE | sed -e "s/.*\///"`
		if ! echo $htvcenter_UNWANTED_MODULES | grep $MODULE_NAME 1>/dev/null; then
			/bin/cp -f $MODULE $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/modules/$htvcenter_SERVER_KERNEL_VERSION
		fi
	done
	# include firmware for bnx2/bnx2x
	rm -rf   $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/firmware
	mkdir -p $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/firmware/
	if ls $htvcenter_SERVER_KERNEL_LOCATION/lib/firmware/bnx2* 2>/dev/null 1>&2; then
		/bin/cp -aRf  $htvcenter_SERVER_KERNEL_LOCATION/lib/firmware/bnx2* $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/firmware/
	fi

	# also we need to take the modules.pcimap for the hardware detection to work
	cp -a $htvcenter_SERVER_KERNEL_LOCATION/lib/modules/$htvcenter_SERVER_KERNEL_VERSION/modules.* $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/modules/$htvcenter_SERVER_KERNEL_VERSION/
	# unpack the initrd-template
	echo "-> using initrd-template from $htvcenter_SERVER_INITRD_TEMPLATE"
	tar -C $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME -xzf $htvcenter_SERVER_INITRD_TEMPLATE

	# check size
	htvcenter_INITRD_SIZE=`du -s $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/ | awk {' print $1 '}`
	htvcenter_INITRD_SIZE=$(( htvcenter_INITRD_SIZE + 16000 ))
	if (( $htvcenter_INITRD_SIZE > $htvcenter_MAX_INITRD_SIZE )); then
		echo "ERROR: Initrd got too big"
		return 1
	fi

	# take udev from kernel-location
	rm -rf $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/etc/udev
	cp -aR $htvcenter_SERVER_KERNEL_LOCATION/etc/udev $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/etc/
	# and /lib/udev
	rm -rf $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/udev
	cp -aR $htvcenter_SERVER_KERNEL_LOCATION/lib/udev $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/lib/
	# take the initial console device
	cp -aR $htvcenter_SERVER_KERNEL_LOCATION/dev/console $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/dev/

	# creating the initrd file
	if [ "$htvcenter_SERVER_KERNEL_TYPE" == "ext2" ]; then
		echo "Creating the initrd as $htvcenter_SERVER_KERNEL_TYPE"
		dd if=/dev/zero of=$htvcenter_TEMP_DIR/bootimage/initrd-$htvcenter_SERVER_KERNEL_NAME.img bs=1k count=$htvcenter_INITRD_SIZE
		#get ram block size there is a problem in newer kernels with size 4096
		if [ -f "$htvcenter_SERVER_KERNEL_LOCATION/boot/config-$htvcenter_SERVER_KERNEL_VERSION" ]; then
			ram_block_size=`cat $htvcenter_SERVER_KERNEL_LOCATION/boot/config-$htvcenter_SERVER_KERNEL_VERSION | grep  CONFIG_BLK_DEV_RAM_BLOCKSIZE | awk -F= '{print $2}'`
			if [ -z $ram_block_size ]; then
				ram_block_size=$htvcenter_DEFAULT_RAM_DISK_BLOCK_SIZE
			fi
		else
			ram_block_size=$htvcenter_DEFAULT_RAM_DISK_BLOCK_SIZE
		fi
		mkfs.ext2 -q -b $ram_block_size -F $htvcenter_TEMP_DIR/bootimage/initrd-$htvcenter_SERVER_KERNEL_NAME.img
		tune2fs -c 0 -i 0 $htvcenter_TEMP_DIR/bootimage/initrd-$htvcenter_SERVER_KERNEL_NAME.img
		mkdir -p $htvcenter_TEMP_DIR/bootimage/mnt
		mount -o loop $htvcenter_TEMP_DIR/bootimage/initrd-$htvcenter_SERVER_KERNEL_NAME.img $htvcenter_TEMP_DIR/bootimage/mnt
		mv $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/* $htvcenter_TEMP_DIR/bootimage/mnt/
		# add the htvcenter-linuxrc
		rm -f $htvcenter_TEMP_DIR/bootimage/mnt/linuxrc
		cp $htvcenter_SERVER_LINUXRC $htvcenter_TEMP_DIR/bootimage/mnt/linuxrc
		chmod +x $htvcenter_TEMP_DIR/bootimage/mnt/linuxrc
		umount $htvcenter_TEMP_DIR/bootimage/mnt
		gzip $htvcenter_TEMP_DIR/bootimage/initrd-$htvcenter_SERVER_KERNEL_NAME.img
		mv $htvcenter_TEMP_DIR/bootimage/initrd-$htvcenter_SERVER_KERNEL_NAME.img.gz $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/initrd-$htvcenter_SERVER_KERNEL_NAME.img
		rm -rf $htvcenter_TEMP_DIR/bootimage
	elif [ "$htvcenter_SERVER_KERNEL_TYPE" == "initramfs" ]; then
		echo "Creating the initrd as $htvcenter_SERVER_KERNEL_TYPE"
		DIR_CURRENT=`pwd`
		# add the htvcenter-linuxrc as init
		rm -f $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/linuxrc
		rm -f $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/init
		cp $htvcenter_SERVER_LINUXRC $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/init
		chmod +x $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/init
		# pack with cpio
		cd $htvcenter_TEMP_DIR/bootimage/$htvcenter_SERVER_KERNEL_NAME/
		find . | cpio -o -H newc | gzip -9 > $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/initrd-$htvcenter_SERVER_KERNEL_NAME.img
		cd $DIR_CURRENT
		rm -rf $htvcenter_TEMP_DIR/bootimage
	else
		echo "ERROR: Supported initrd types are ext2 and initramfs"
		return 1
	fi
	chmod 444 $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/initrd-$htvcenter_SERVER_KERNEL_NAME.img
	chmod 444 $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/vmlinuz-$htvcenter_SERVER_KERNEL_NAME
	chmod 444 $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/System.map-$htvcenter_SERVER_KERNEL_NAME
	chmod 444 $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/modules-$htvcenter_SERVER_KERNEL_NAME.tgz
	# hook for plugins
	for htvcenter_PLUGIN in `ls $htvcenter_WEBSERVER_DOCUMENT_ROOT/htvcenter/base/plugins/`; do
		if [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$htvcenter_PLUGIN/include/htvcenter-plugin-$htvcenter_PLUGIN-kernel-hook ]; then
			. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$htvcenter_PLUGIN/include/htvcenter-plugin-$htvcenter_PLUGIN-kernel-hook
			PLUGIN_FUNCTION_NAME=`echo $htvcenter_PLUGIN | sed -e "s/-/_/g"`""_kernel_hook
			$PLUGIN_FUNCTION_NAME $htvcenter_SERVER_KERNEL_NAME $htvcenter_SERVER_KERNEL_VERSION $htvcenter_SERVER_KERNEL_LOCATION $htvcenter_SERVER_KERNEL_TYPE
		fi
	done
}



# function to add/remove a kernel to the htvcenter-server db
# param 1	: add/remove
# param 2	: user
# param 3	: password
# param 4	: kernel name
# param 5	: kernel-version
function htvcenter_server_manage_kernel() {
	htvcenter_USER=$2
	htvcenter_USER_PASSWORD=$3
	htvcenter_SERVER_KERNEL_NAME=$4
	htvcenter_SERVER_KERNEL_VERSION=$5
	if [ "$htvcenter_SERVER_IP_ADDRESS" == "" ]; then
		htvcenter_SERVER_IP_ADDRESS="localhost"
	fi
	case "$1" in
		add)
			echo "htvcenter-server: Adding kernel $htvcenter_SERVER_KERNEL_NAME version $htvcenter_SERVER_KERNEL_VERSION" | logger
			if ! $WGET -O /dev/null --http-user=$htvcenter_USER --http-password=$htvcenter_USER_PASSWORD "$htvcenter_WEB_PROTOCOL://$htvcenter_SERVER_IP_ADDRESS/htvcenter/base/server/kernel/kernel-action.php?kernel_command=new_kernel&kernel_name=$htvcenter_SERVER_KERNEL_NAME&kernel_version=$htvcenter_SERVER_KERNEL_VERSION"; then
				echo "ERROR: Could not add kernel $htvcenter_SERVER_KERNEL_NAME to the htvcenter-server!" | logger
				return 1
			fi
			return 0
			;;
		remove)
			echo "htvcenter-server: Removing kernel $htvcenter_SERVER_KERNEL_NAME" | logger
			if ! $WGET -O /dev/null --http-user=$htvcenter_USER --http-password=$htvcenter_USER_PASSWORD "$htvcenter_WEB_PROTOCOL://$htvcenter_SERVER_IP_ADDRESS/htvcenter/base/server/kernel/kernel-action.php?kernel_command=remove_by_name&kernel_name=$htvcenter_SERVER_KERNEL_NAME"; then
				echo "ERROR: Could not remove kernel $htvcenter_SERVER_KERNEL_NAME to the htvcenter-server!" | logger
				return 1
			fi
			return 0
			;;
	esac
}


# function to set the default kernel
# param 1	: kernel-name
function htvcenter_server_set_default_kernel() {
	htvcenter_KERNEL_NAME=$1
	echo "htvcenter-server: Setting kernel $htvcenter_KERNEL_NAME as default kernel" | logger
	if [ "$htvcenter_KERNEL_NAME" != "default" ]; then
		cp -f $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/vmlinuz-$htvcenter_KERNEL_NAME $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/vmlinuz-default
		cp -f $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/System.map-$htvcenter_KERNEL_NAME $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/System.map-default
		cp -f $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/initrd-$htvcenter_KERNEL_NAME.img $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/initrd-default.img
		cp -f $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/modules-$htvcenter_KERNEL_NAME.tgz $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/boot/modules-default.tgz
	fi
}


# --------------------------------------------------------------------
# ------------------------- image functions --------------------------
# --------------------------------------------------------------------


# function to create a crypted password file for an image
# param 1	: image id
# param 2	: plain password
function htvcenter_server_set_image_password() {
	htvcenter_IMAGE_ID=$1
	htvcenter_IMAGE_PASSWORD=$2
	echo "htvcenter-server: Setting root-password for image $htvcenter_IMAGE_ID" | logger
	$htvcenter_SERVER_BASE_DIR/htvcenter/sbin/htvcenter-crypt $htvcenter_IMAGE_PASSWORD > $htvcenter_SERVER_BASE_DIR/htvcenter/web/action/image-auth/iauth.$htvcenter_IMAGE_ID.php
	chmod 777 $htvcenter_SERVER_BASE_DIR/htvcenter/web/action/image-auth/iauth.$htvcenter_IMAGE_ID.php
}





# --------------------------------------------------------------------
# ------------------------- deployments functions -------------------------
# --------------------------------------------------------------------

# function to add a deployment method to the htvcenter-server db
# this function is used by the init+uninstall functions of the deployment plugins
# param 1	: username
# param 2	: password
# param 3	: deployment name
# param 4	: deployment type
# param 5	: deployment description
# param 6	: deployment storagetype
# param 7	: deployment storagetype description
# param 8	: deployment mapping
function htvcenter_server_add_deployment_type() {
	htvcenter_USER=$1
	htvcenter_USER_PASSWORD=$2
	htvcenter_SERVER_DEPLOYMENT_NAME=$3
	htvcenter_SERVER_DEPLOYMENT_TYPE=$4
	htvcenter_SERVER_DEPLOYMENT_DESCRIPTION=$5
	htvcenter_SERVER_DEPLOYMENT_STORAGE_TYPE=$6
	htvcenter_SERVER_DEPLOYMENT_STORAGE_DESCRIPTION=$7
	htvcenter_SERVER_DEPLOYMENT_MAPPING=$8
	if [ "$htvcenter_SERVER_IP_ADDRESS" == "" ]; then
		htvcenter_SERVER_IP_ADDRESS="localhost"
	fi
	echo "htvcenter-server: Adding deployment type $htvcenter_SERVER_DEPLOYMENT_NAME  to the htvcenter-server" | logger
	if ! $WGET -O /dev/null -q --http-user=$htvcenter_USER --http-password=$htvcenter_USER_PASSWORD "$htvcenter_WEB_PROTOCOL://$htvcenter_SERVER_IP_ADDRESS/htvcenter/base/server/image/image-action.php?image_command=add_deployment_type&deployment_name=$htvcenter_SERVER_DEPLOYMENT_NAME&deployment_type=$htvcenter_SERVER_DEPLOYMENT_TYPE&deployment_description=$htvcenter_SERVER_DEPLOYMENT_DESCRIPTION&deployment_storagetype=$htvcenter_SERVER_DEPLOYMENT_STORAGE_TYPE&deployment_storagedescription=$htvcenter_SERVER_DEPLOYMENT_STORAGE_DESCRIPTION&deployment_mapping=$htvcenter_SERVER_DEPLOYMENT_MAPPING"; then
		echo "ERROR: Could not add deployment type $htvcenter_SERVER_DEPLOYMENT_NAME to the htvcenter-server!" | logger
		return 1
	fi
	return 0
}

# function to remove a deployment method to the htvcenter-server db
# this function is used by the init+uninstall functions of the deployment plugins
# param 1	: username
# param 2	: password
# param 3	: deployment name
function htvcenter_server_remove_deployment_type() {
	htvcenter_USER=$1
	htvcenter_USER_PASSWORD=$2
	htvcenter_SERVER_DEPLOYMENT_NAME=$3
	if [ "$htvcenter_SERVER_IP_ADDRESS" == "" ]; then
		htvcenter_SERVER_IP_ADDRESS="localhost"
	fi
	echo "htvcenter-server: Removing deployment type $htvcenter_SERVER_DEPLOYMENT_NAME  from the htvcenter-server" | logger
	if ! $WGET -O /dev/null -q --http-user=$htvcenter_USER --http-password=$htvcenter_USER_PASSWORD "$htvcenter_WEB_PROTOCOL://$htvcenter_SERVER_IP_ADDRESS/htvcenter/base/server/image/image-action.php?image_command=remove_deployment_type&deployment_name=$htvcenter_SERVER_DEPLOYMENT_NAME"; then
		echo "ERROR: Could not remove deployment type $htvcenter_SERVER_DEPLOYMENT_NAME from the htvcenter-server!" | logger
		return 1
	fi
	return 0
}



# --------------------------------------------------------------------
# ------------------------- virtualization functions -------------------------
# --------------------------------------------------------------------

# function to add a virtualization method to the htvcenter-server db
# this function is used by the init+uninstall functions of the virtualization plugins
# param 1	: username
# param 2	: password
# param 3	: virtualization type
# param 4	: virtualization name
function htvcenter_server_add_virtualization_type() {
	htvcenter_USER=$1
	htvcenter_USER_PASSWORD=$2
	htvcenter_SERVER_VIRTUALIZATION_TYPE=$3
	htvcenter_SERVER_VIRTUALIZATION_NAME=$4
	if [ "$htvcenter_SERVER_IP_ADDRESS" == "" ]; then
		htvcenter_SERVER_IP_ADDRESS="localhost"
	fi
	echo "htvcenter-server: Adding virtualization type $htvcenter_SERVER_VIRTUALIZATION_TYPE  to the htvcenter-server" | logger
	if ! $WGET -O /dev/null -q --http-user=$htvcenter_USER --http-password=$htvcenter_USER_PASSWORD "$htvcenter_WEB_PROTOCOL://$htvcenter_SERVER_IP_ADDRESS/htvcenter/base/server/resource/resource-action.php?resource_command=add_virtualization_type&virtualization_type=$htvcenter_SERVER_VIRTUALIZATION_TYPE&virtualization_name=$htvcenter_SERVER_VIRTUALIZATION_NAME"; then
		echo "ERROR: Could not add virtualization type $htvcenter_SERVER_VIRTUALIZATION_TYPE to the htvcenter-server!" | logger
		return 1
	fi
	return 0
}

# function to remove a virtualization method to the htvcenter-server db
# this function is used by the init+uninstall functions of the virtualization plugins
# param 1	: username
# param 2	: password
# param 3	: virtualization type
function htvcenter_server_remove_virtualization_type() {
	htvcenter_USER=$1
	htvcenter_USER_PASSWORD=$2
	htvcenter_SERVER_VIRTUALIZATION_TYPE=$3
	if [ "$htvcenter_SERVER_IP_ADDRESS" == "" ]; then
		htvcenter_SERVER_IP_ADDRESS="localhost"
	fi
	echo "htvcenter-server: Removing virtualization type $htvcenter_SERVER_VIRTUALIZATION_TYPE  from the htvcenter-server" | logger
	if ! $WGET -O /dev/null -q --http-user=$htvcenter_USER --http-password=$htvcenter_USER_PASSWORD "$htvcenter_WEB_PROTOCOL://$htvcenter_SERVER_IP_ADDRESS/htvcenter/base/server/resource/resource-action.php?resource_command=remove_virtualization_type&virtualization_type=$htvcenter_SERVER_VIRTUALIZATION_TYPE"; then
		echo "ERROR: Could not remove virtualization type $htvcenter_SERVER_VIRTUALIZATION_TYPE from the htvcenter-server!" | logger
		return 1
	fi
	return 0
}




# --------------------------------------------------------------------
# ------------------------- resource functions -----------------------
# --------------------------------------------------------------------



# function adding a new resource to the htvcenter-server
# param 1	: resource_id
# param 2	: kernel name
# param 3	: pxelinux.cfg filename
function htvcenter_server_create_pxe_config() {
	local RESOURCE_ID=$1
	local KERNEL_NAME=$2
	local RESOURCE_PXELINUXCFG_FILE=$3
	cat $htvcenter_SERVER_BASE_DIR/htvcenter/etc/templates/htvcenter-pxelinux |	\
		sed -e "s/htvcenter_BOOTIMAGE_KERNEL/vmlinuz-$KERNEL_NAME/g" |	\
		sed -e "s/htvcenter_BOOTIMAGE_INITRD/initrd-$KERNEL_NAME.img/g" |	\
		sed -e "s/htvcenter_RESOURCE_ID/$RESOURCE_ID/g" |	\
		sed -e "s/htvcenter_SERVER_IP_ADDRESS/$htvcenter_SERVER_IP_ADDRESS/g" \
		> $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/$RESOURCE_PXELINUXCFG_FILE
	chmod 777 $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/$RESOURCE_PXELINUXCFG_FILE

	# allow plugin to re-write the pxe-config
	for htvcenter_PLUGIN in `ls $htvcenter_WEBSERVER_DOCUMENT_ROOT/htvcenter/base/plugins/`; do
		if [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$htvcenter_PLUGIN/include/htvcenter-plugin-$htvcenter_PLUGIN-assign-hook ]; then
			. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$htvcenter_PLUGIN/include/htvcenter-plugin-$htvcenter_PLUGIN-assign-hook
			htvcenter_PLUGIN=`echo $htvcenter_PLUGIN | sed -e "s/-/_/g"`
			$htvcenter_PLUGIN""_assign_hook $RESOURCE_ID $KERNEL_NAME $RESOURCE_PXELINUXCFG_FILE
		fi
	done
}



# function adding a new resource to the htvcenter-server
# param 1	: resource_id
# param 2	: resource_mac
# param 3	: resouce_ip
function htvcenter_server_add_resource() {
	local RESOURCE_ID=$1
	local RESOURCE_MAC=$2
	local RESOURCE_IP_ADDRESS=$3
	local RESOURCE_PXELINUXCFG_FILE=`echo 01-$RESOURCE_MAC | sed -e "s/:/-/g" | tr '[:upper:]' '[:lower:]'`
	echo "htvcenter-server: Adding resource $RESOURCE_ID $RESOURCE_MAC/$RESOURCE_IP_ADDRESS" | logger
	htvcenter_server_create_pxe_config $RESOURCE_ID default $RESOURCE_PXELINUXCFG_FILE
}


# function to remove a resource from the htvcenter-server
# param 1	: resource_id
# param 2	: resource_mac
function htvcenter_remove_resource() {
	local RESOURCE_ID=$1
	local RESOURCE_MAC=$2
	local RESOURCE_PXELINUXCFG_FILE=`echo 01-$RESOURCE_MAC | sed -e "s/:/-/g" | tr '[:upper:]' '[:lower:]'`
	echo "htvcenter-server: Removing resource $RESOURCE_ID $RESOURCE_MAC/$RESOURCE_IP_ADDRESS" | logger
	rm -f $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/$RESOURCE_PXELINUXCFG_FILE
	rm -f $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/$RESOURCE_PXELINUXCFG_FILE.idle
}



# function to set a resource net or local boot
# param 1	: resource_id
# param 2	: resource_mac
# param 3	: resouce_ip
function htvcenter_server_set_boot() {
	local RESOURCE_BOOT=$1
	local RESOURCE_ID=$2
	local RESOURCE_MAC=$3
	local RESOURCE_IP_ADDRESS=$4
	local RESOURCE_PXELINUXCFG_FILE=`echo 01-$RESOURCE_MAC | sed -e "s/:/-/g" | tr '[:upper:]' '[:lower:]'`
	if [ "$RESOURCE_BOOT" == "net" ]; then
		echo "htvcenter-server: Setting resource $RESOURCE_ID $RESOURCE_MAC/$RESOURCE_IP_ADDRESS to netboot" | logger
		htvcenter_server_create_pxe_config $RESOURCE_ID default $RESOURCE_PXELINUXCFG_FILE
	else
		echo "htvcenter-server: Setting resource $RESOURCE_ID $RESOURCE_MAC/$RESOURCE_IP_ADDRESS to localboot" | logger
		sed -i -e "s/^default.*/default local/g" $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/$RESOURCE_PXELINUXCFG_FILE
		chmod 777 $htvcenter_SERVER_BASE_DIR/htvcenter/tftpboot/pxelinux.cfg/$RESOURCE_PXELINUXCFG_FILE
	fi
}




# function to assign a kernel to a resource
# param 1	: resource_id
# param 2	: resource_mac
# param 3	: resouce_ip
function htvcenter_assign_kernel() {
	local RESOURCE_ID=$1
	local RESOURCE_MAC=$2
	local RESOURCE_KERNEL=$3
	local RESOURCE_PXELINUXCFG_FILE=`echo 01-$RESOURCE_MAC | sed -e "s/:/-/g" | tr '[:upper:]' '[:lower:]'`
	echo "htvcenter-server: Assigning resource $RESOURCE_ID $RESOURCE_MAC to kernel $RESOURCE_KERNEL" | logger
	htvcenter_server_create_pxe_config $RESOURCE_ID $RESOURCE_KERNEL $RESOURCE_PXELINUXCFG_FILE
}




# function to get infos about a resource
# param 1	: resource_mac
function htvcenter_get_resource_parameter() {
	local mac=$1
	if [ "$htvcenter_SERVER_IP_ADDRESS" == "" ]; then
		htvcenter_SERVER_IP_ADDRESS="localhost"
	fi
	$WGET -q -O /tmp/$mac "$htvcenter_WEB_PROTOCOL://$htvcenter_SERVER_IP_ADDRESS/htvcenter/action/resource-monitor.php?resource_command=get_parameter&resource_mac=$mac"
	. /tmp/$mac
	for param in `cat /tmp/$mac`; do
		KEY=`echo $param | cut -d'=' -f1`
		if [ "$KEY" != '"' ]; then
			export $KEY 2>/dev/null
		fi
	done
}




# --------------------------------------------------------------------
# ------------------------- plugin functions -------------------------
# --------------------------------------------------------------------

# function to run a plugin command
# param 1	: plugin_name
function htvcenter_server_plugin_command() {
	local PLUGIN_NAME=$1
	local PLUGIN_COMMAND=$2
	local PLUGIN_USER=$3
	local PLUGIN_PASS=$4
	local PLUGIN_INIT_SCRIPT="$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$PLUGIN_NAME/etc/init.d/htvcenter-plugin-$PLUGIN_NAME"
	if [ -x $PLUGIN_INIT_SCRIPT ]; then
		echo "htvcenter-server: $PLUGIN_COMMAND htvcenter plugin $PLUGIN_NAME user $PLUGIN_USER" | logger
		$PLUGIN_INIT_SCRIPT $PLUGIN_COMMAND $PLUGIN_USER $PLUGIN_PASS &
	else
		echo "htvcenter-server: $PLUGIN_NAME init script not found or not executable !" | logger
	fi
}






# --------------------------------------------------------------------
# ------------------------- state backup/restore functions -------------------------
# --------------------------------------------------------------------

# function to backup/restore a server-state
# param 1	: <backup/restore/remove/list>
# param 1	: [name]
function htvcenter_server_state() {
	local CMD=$1
	local NAME=$2
	local NOW=`date +"%D_%T" | sed -e "s#/#-#g" | sed -e "s#:#.#g"`
	local USAGE="Usage : htvcenter_server_state backup/restore/remove/list [name]"
	if [ ! -d $htvcenter_SERVER_STATE_DIR ]; then
		mkdir -p $htvcenter_SERVER_STATE_DIR
	fi
	if [ "$CMD" == "" ]; then
		echo $USAGE
		return 1
	fi
	if [ "$CMD" != "list" ] && [ "$NAME" == "" ]; then
		echo $USAGE
		return 1
	fi



	case $CMD in
		backup)
				echo "htvcenter-server: Creating backup of the server state $NAME-$NOW"
				rm -rf $htvcenter_SERVER_STATE_DIR/$NAME
				mkdir -p $htvcenter_SERVER_STATE_DIR/$NAME

				# dirs
				# adding the plugin-backup dirs to the dirlist
				for htvcenter_PLUGIN in `ls $htvcenter_WEBSERVER_DOCUMENT_ROOT/htvcenter/base/plugins/`; do
					if [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$htvcenter_PLUGIN/etc/htvcenter-plugin-$htvcenter_PLUGIN.conf ]; then
						. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$htvcenter_PLUGIN/etc/htvcenter-plugin-$htvcenter_PLUGIN.conf
						htvcenter_SERVER_STATE_DIRS="$htvcenter_SERVER_STATE_DIRS $htvcenter_PLUGIN_STATE_DIRS"
						unset htvcenter_PLUGIN_STATE_DIRS
					fi
				done
				# now the static dirs
				for DIR in $htvcenter_SERVER_STATE_DIRS; do
					if [ -d "$DIR" ]; then
						mkdir -p `dirname $htvcenter_SERVER_STATE_DIR/$NAME/$DIR`
						cp -aR $DIR `dirname $htvcenter_SERVER_STATE_DIR/$NAME/$DIR`
					fi
				done

				# files
				# first add the enabled plugins state file
				for RUNNING in `ls $htvcenter_SERVER_BASE_DIR/htvcenter/web/base/plugins/`; do
					if [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$RUNNING/web/.running ]; then
						mkdir -p $htvcenter_SERVER_STATE_DIR/$NAME/$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$RUNNING/web/
						touch $htvcenter_SERVER_STATE_DIR/$NAME/$htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$RUNNING/web/.running
					fi
				done
				# now adding the plugin-backup files to the filelist
				for htvcenter_PLUGIN in `ls $htvcenter_WEBSERVER_DOCUMENT_ROOT/htvcenter/base/plugins/`; do
					if [ -f $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$htvcenter_PLUGIN/etc/htvcenter-plugin-$htvcenter_PLUGIN.conf ]; then
						. $htvcenter_SERVER_BASE_DIR/htvcenter/plugins/$htvcenter_PLUGIN/etc/htvcenter-plugin-$htvcenter_PLUGIN.conf
						htvcenter_SERVER_STATE_FILES="$htvcenter_SERVER_STATE_FILES $htvcenter_PLUGIN_STATE_FILES"
						unset htvcenter_PLUGIN_STATE_FILES
					fi
				done
				# now the static files
				for FILE in $htvcenter_SERVER_STATE_FILES; do
					if [ -f "$FILE" ]; then
						mkdir -p `dirname $htvcenter_SERVER_STATE_DIR/$NAME/$FILE`
						cp -af $FILE $htvcenter_SERVER_STATE_DIR/$NAME/$FILE
					fi
				done

				RELATIVE_htvcenter_SERVER_BASE_DIR=`echo $htvcenter_SERVER_BASE_DIR | sed -e s"#/##"`
				# db
				$htvcenter_SERVER_BASE_DIR/htvcenter/etc/db/$htvcenter_DATABASE_TYPE/htvcenter-$htvcenter_DATABASE_TYPE-functions backup $htvcenter_SERVER_STATE_DIR/$NAME/$RELATIVE_htvcenter_SERVER_BASE_DIR/htvcenter/database.sql

				# package
				tar -C $htvcenter_SERVER_STATE_DIR/$NAME -czf $htvcenter_SERVER_STATE_DIR/$NAME-$NOW.tgz $RELATIVE_htvcenter_SERVER_BASE_DIR/htvcenter
				rm -rf $htvcenter_SERVER_STATE_DIR/$NAME
				;;

		restore)
				if [ -f $htvcenter_SERVER_STATE_DIR/$NAME.tgz ]; then
					echo "htvcenter-server: Restoring server state from $htvcenter_SERVER_STATE_DIR/$NAME.tgz"
					# files + dirs
					tar -C / -xzf $htvcenter_SERVER_STATE_DIR/$NAME.tgz
					# db
					$htvcenter_SERVER_BASE_DIR/htvcenter/etc/db/$htvcenter_DATABASE_TYPE/htvcenter-$htvcenter_DATABASE_TYPE-functions restore $htvcenter_SERVER_BASE_DIR/htvcenter/database.sql
					rm -f $htvcenter_SERVER_BASE_DIR/htvcenter/database.sql
				else
					echo "htvcenter-server: No such sever state file $NAME"
					return 1
				fi
				;;

		remove)
				if [ -f $htvcenter_SERVER_STATE_DIR/$NAME.tgz ]; then
					echo "htvcenter-server: Removing server state $NAME-$NOW"
					rm -f $htvcenter_SERVER_STATE_DIR/$NAME.tgz
				else
					echo "htvcenter-server: No such sever state file $NAME"
					return 1
				fi
				;;
		list)
				ls $htvcenter_SERVER_STATE_DIR | sed -s "s/\.tgz//g"
				;;

		*)
				echo "htvcenter-server: No such server-state command!"
				return 1
				;;



	esac

}


# --------------------------------------------------------------------



